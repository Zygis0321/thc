{"version":3,"sources":["services/player-service.ts","components/players-autocomplete.tsx","data/scorecalc-data.ts","components/rankedplayers-list.tsx","components/home.tsx","services/tournament-service.ts","components/players-chart.tsx","components/progress.tsx","App.tsx","store/players/player-actions.ts","store/players/player-types.ts","serviceWorker.ts","store/players/player-reducers.ts","store/combineReducers.ts","store/index.ts","store/createStore.ts","index.tsx"],"names":["playersService","prefScores","rankPlayers","players","i","length","lowestScore","newPoints","points","Math","max","score","rank","j","newRank","recalc","level","pos","value","map","p","sort","a","b","valueSum","min","coefficient","maxScore","winnerpoints","floor","content","stringArray","split","ln","ret","player","Number","id","name","club","nation","push","el","document","createElement","innerHTML","list","getElementsByClassName","cnt","ind","indexOf","substr","this","Array","fill","PlayersAutoComplete","state","searchText","handleSearchChange","e","setState","target","TextField","label","variant","onChange","fullWidth","InputProps","endAdornment","InputAdornment","position","Search","color","List","dense","props","filter","toLowerCase","includes","slice","from","ListItem","key","button","onClick","handlePlayerToggle","ListItemText","primary","secondary","ListItemSecondaryAction","Checkbox","edge","checked","playersCompare","some","Box","pt","pl","pr","Skeleton","width","Component","levelList","percentageList","appliedFrom","Date","UTC","appliedUntil","tournamentAge","percentage","listItemStyle","boxShadow","backgroundColor","marginTop","marginBottom","mobileListItemStyle","paddingRight","paddingLeft","ratingUpStyle","fontWeight","ratingDownStyle","ratingConstantStyle","SortableItem","SortableElement","children","isTabletOrMobile","useMediaQuery","maxWidth","style","SortableList","SortableContainer","ResponsiveListItem","undefined","RankedPlayersList","onSortEnd","reorder","shouldCancelStart","nearestViewportElement","useWindowAsScrollContainer","Grid","item","xs","sm","md","minWidth","textAlign","float","index","container","direction","mr","abs","justify","matches","display","alignItems","justifyContent","marginRight","IconButton","size","playerRemoved","Clear","fontSize","HomeComponent","selectedLevel","bottomNavVal","levelName","levelFound","find","oldIndex","newIndex","arrayMove","playerAdded","prevState","concat","$","ajax","then","res","items","catch","console","log","handleClearAllClick","playerId","handleLevelChange","prevProps","setPlayerScores","Container","isMobile","pb","spacing","FormControl","InputLabel","Select","MenuItem","Button","startIcon","ClearAll","BottomNavigation","newValue","bottom","right","left","showLabels","BottomNavigationAction","icon","GroupAdd","Home","connect","tournamentsService","addYears","dt","n","dtt","setFullYear","getFullYear","getPointsByDate","tournaments","start","now","datesToCheck","newDate","date","round","getTime","best5","best","sum","end","scalePointsByDate","density","startRange","endRange","startTime","endTime","step","toUTCString","PlayersChart","yearRange","getYearRange","handleYearChange","event","handleDensityChange","playerPoints","getUTCFullYear","Typography","Slider","valueLabelDisplay","aria-labelledby","marks","height","data","getMaxDate","stroke","strokeDasharray","dataKey","interval","angle","dx","type","dot","strokeWidth","ProgressComponent","handlePlayerChange","getJSON","Autocomplete","options","getOptionLabel","option","renderInput","params","filterOptions","createFilterOptions","limit","CircularProgress","Progress","AppComponent","parseContent","updatePlayers","exact","path","component","displayName","App","dispatch","payload","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","reducer","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.02a6038b.chunk.js","sourcesContent":["import { Level } from \"../data/scorecalc-data\";\r\n\r\n\r\nexport interface Player{\r\n    name: string,\r\n    id: string,\r\n    rank: number,\r\n    nation: string,\r\n    points: number,\r\n    value: number\r\n    club: string\r\n}\r\n\r\nexport interface PlayerRanked extends Player{\r\n    pos: number\r\n    lowestScore: number\r\n    score: number\r\n    newRank: number\r\n    newPoints: number\r\n}\r\n\r\nclass PlayersService {\r\n\r\n    private prefScores:number[] = []\r\n\r\n    rankPlayers = (players: PlayerRanked[]): PlayerRanked[] => {\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n            players[i].newPoints = players[i].points + Math.max(0, players[i].score - players[i].lowestScore)\r\n        }\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n\r\n            let rank: number = this.prefScores[players[i].newPoints + 1] + 1\r\n            for(let j=0; j<players.length; j++){\r\n                if(players[j].lowestScore === -1)continue\r\n                if(players[j].points>players[i].newPoints)rank--\r\n                if(players[j].newPoints>players[i].newPoints)rank++\r\n            }\r\n            players[i].rank = this.prefScores[players[i].points + 1] + 1\r\n            players[i].newRank = rank\r\n        }\r\n\r\n        return players\r\n    }\r\n\r\n    recalc = (players: PlayerRanked[], level: Level): PlayerRanked[] => {\r\n        \r\n        \r\n        //set player pos\r\n        for(var i=0; i<players.length; i++){\r\n            players[i].pos=i+1\r\n            players[i].score=0;\r\n        }\r\n        \r\n        \r\n        if(players.length<4){\r\n            return players;\r\n        }\r\n        \r\n        \r\n        //which player beaten\r\n        var value:number[] = players.map(p => p.value).sort((a,b) => b-a)\r\n        for(let i=0; i+1<players.length; i++){\r\n            let valueSum: number = 0;\r\n            for(var j=i; j<Math.min(i+4, players.length); j++){\r\n                valueSum+=value[j]\r\n            }\r\n            players[i].score = Math.max(players[i].score, (valueSum/4)*level.coefficient);\r\n        }\r\n        //number of beaten\r\n        for(let i=0; i<players.length; i++){\r\n            let maxScore: number = (((70-1)*(players.length - i - 1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, Math.min(maxScore,players.length-i))\r\n        }\r\n\r\n        //scalar\r\n        let points:number = level.winnerpoints\r\n        for(let i=0; i+1<players.length; i++){\r\n            players[i].score = Math.max(players[i].score, points)\r\n            points/=2\r\n        }\r\n\r\n        //linear\r\n        for(let i=0; i<players.length; i++){\r\n            let score: number = (((level.winnerpoints-1)*(players.length-i-1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, score)\r\n        }\r\n\r\n        //sum up\r\n        for(let i=0; i<players.length; i++){\r\n            players[i].score = Math.floor(players[i].score)\r\n        }\r\n        players[0].score+=10\r\n\r\n        return players\r\n    }\r\n\r\n    parseContent(content: string): Player[]{\r\n        const stringArray = content.split('\\n').map((ln) => {\r\n            return ln.split('\\t');\r\n        });\r\n        let ret: Player[] = []\r\n        for(var i=2; i+1<stringArray.length; i++){\r\n            const player:Player = {\r\n                rank: Number(stringArray[i][0]),\r\n                id: stringArray[i][1],\r\n                name: stringArray[i][2],\r\n                club: stringArray[i][3],\r\n                nation: stringArray[i][4],\r\n                points: Number(stringArray[i][5]),\r\n                value: Number(stringArray[i][6]),\r\n            }\r\n            ret.push(player)\r\n        }\r\n        return ret\r\n    }\r\n\r\n    parsePlayerMinPoints(content: string): number{\r\n        var el = document.createElement('html');\r\n        el.innerHTML = content\r\n        var list = el.getElementsByClassName(\"normTour\");\r\n        \r\n        var ret:number = 100000;\r\n        var cnt:number = 0;\r\n        for(var i=6; i<list.length; i+=7){\r\n            let ind:number = list[i].innerHTML.indexOf('(')\r\n            if(ind===-1)ind=list[i].innerHTML.length\r\n            let score:string = list[i].innerHTML.substr(0, ind);\r\n            ret = Math.min(ret, Number(score));\r\n            cnt++\r\n        }\r\n        if(cnt<5)ret=0\r\n        return ret\r\n    }\r\n\r\n    setPlayerScores(players: Player[]): void{\r\n        this.prefScores = new Array(6005).fill(0)\r\n        for(let i=0; i<players.length; i++){\r\n            this.prefScores[players[i].points]++;\r\n        }\r\n        \r\n        for(let i=6000; i>=0; i--){\r\n            this.prefScores[i]+=this.prefScores[i+1]\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nconst playersService = new PlayersService();\r\nexport default playersService","import { Box, Checkbox, InputAdornment, List, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Search, SearchOutlined } from '@material-ui/icons';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport React, { Component } from 'react';\r\nimport { Player, PlayerRanked } from '../services/player-service';\r\n//import matchSorter from 'match-sorter'\r\n\r\ninterface OwnProps{\r\n    players: Player[]\r\n    handlePlayerToggle: (player: Player) => void\r\n    playersCompare: Player[]\r\n}\r\ninterface State{\r\n    searchText: string\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class PlayersAutoComplete extends Component<Props, State>{\r\n    public readonly state: State = {\r\n        searchText: ''\r\n    }\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n\r\n            <>\r\n                \r\n\r\n                <TextField \r\n                    label=\"Players\" \r\n                    variant=\"outlined\" \r\n                    onChange={this.handleSearchChange} \r\n                    fullWidth\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <Search color='action'/>\r\n                            </InputAdornment>\r\n                        )\r\n                    }}\r\n                />\r\n                <List dense>\r\n                    {(!this.props.players.length ? Array.from(new Array(10)) : \r\n                        this.props.players.filter(p => p.name.toLowerCase().includes(this.state.searchText.toLowerCase())).slice(0, 10))\r\n                        .map((player) => {\r\n                            return (\r\n                                player ? (\r\n                                    <ListItem key={player.id} button onClick={() => this.props.handlePlayerToggle(player)}>\r\n                                        <ListItemText id={player.id+player.name} primary={player.name} secondary={player.club} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Checkbox\r\n                                                edge=\"end\"\r\n                                                onChange={() => this.props.handlePlayerToggle(player)}\r\n                                                checked={this.props.playersCompare.some(p => p.id==player.id)}\r\n                                            />\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ) : (\r\n                                    <Box pt={2} pl={1} pr={1}>\r\n                                        <Skeleton />\r\n                                        <Skeleton width=\"60%\" />\r\n                                    </Box>\r\n                                )\r\n                            )\r\n                        })}\r\n                </List>\r\n            </>\r\n        )\r\n    }\r\n    private readonly handleSearchChange = (e: any): void => {\r\n        this.setState({searchText: e.target.value});\r\n    }\r\n}","export interface Level {\r\n    name: string,\r\n    coefficient: number,\r\n    winnerpoints: number\r\n}\r\n\r\nexport const levelList: Level[] = [\r\n    {name: \"Level 1 (World)\", coefficient: 0.96, winnerpoints: 1000},\r\n    {name: \"Level 1 (Continental)\", coefficient: 0.96, winnerpoints: 600},\r\n    {name: \"Level 2\", coefficient: 0.92, winnerpoints: 500},\r\n    {name: \"Level 3\", coefficient: 0.89, winnerpoints: 100},\r\n    {name: \"Level 4\", coefficient: 0.83, winnerpoints: 70},\r\n    {name: \"Level 5\", coefficient: 0.60, winnerpoints: 40},\r\n    {name: \"Level 6\", coefficient: 0.40, winnerpoints: 20},\r\n]\r\n\r\nexport interface PointsPercentage {\r\n    appliedFrom: Date,\r\n    appliedUntil: Date,\r\n    tournamentAge: number,\r\n    percentage: number\r\n}\r\n\r\nexport const percentageList: PointsPercentage[] = [\r\n    {\r\n        appliedFrom: new Date(Date.UTC(1111, 0)),\r\n        appliedUntil: new Date(Date.UTC(3333,0)),\r\n        tournamentAge: 0,\r\n        percentage: 1\r\n    },\r\n    {\r\n        appliedFrom: new Date(Date.UTC(1111, 0)),\r\n        appliedUntil: new Date(Date.UTC(2020, 9, 4)),\r\n        tournamentAge: 2,\r\n        percentage: 0.8\r\n    },\r\n    {\r\n        appliedFrom: new Date(Date.UTC(2020, 9, 5)),\r\n        appliedUntil: new Date(Date.UTC(2021, 5, 30)),\r\n        tournamentAge: 2,\r\n        percentage: 1\r\n    },\r\n    {\r\n        appliedFrom: new Date(Date.UTC(2021, 6, 1)),\r\n        appliedUntil: new Date(Date.UTC(3333, 0)),\r\n        tournamentAge: 2,\r\n        percentage: 0.8\r\n    },\r\n    {\r\n        appliedFrom: new Date(Date.UTC(1111, 0)),\r\n        appliedUntil: new Date(Date.UTC(3333,0)),\r\n        tournamentAge: 3,\r\n        percentage: 0.6\r\n    },\r\n    {\r\n        appliedFrom: new Date(Date.UTC(1111, 0)),\r\n        appliedUntil: new Date(Date.UTC(3333,0)),\r\n        tournamentAge: 4,\r\n        percentage: 0.4\r\n    },\r\n    {\r\n        appliedFrom: new Date(Date.UTC(1111, 0)),\r\n        appliedUntil: new Date(Date.UTC(3333,0)),\r\n        tournamentAge: 5,\r\n        percentage: 0.2\r\n    },\r\n    {\r\n        appliedFrom: new Date(Date.UTC(1111, 0)),\r\n        appliedUntil: new Date(Date.UTC(3333,0)),\r\n        tournamentAge: 6,\r\n        percentage: 0\r\n    },\r\n]\r\nexport const ruleChangeDates: Date[] = [\r\n    new Date(Date.UTC(2020, 9, 5)),\r\n    new Date(Date.UTC(2021, 6, 1))\r\n]","import { Box, Grid, IconButton, List, ListItem, ListItemText, Typography } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { SortableElement, SortableContainer } from \"react-sortable-hoc\";\r\nimport CSS from 'csstype';\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport { PlayerRanked } from \"../services/player-service\";\r\nimport { Clear } from \"@material-ui/icons\";\r\nimport MediaQuery, { useMediaQuery } from 'react-responsive'\r\n\r\n\r\nconst listItemStyle: CSS.Properties = {\r\n    boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.2)',\r\n    backgroundColor: 'rgb(255, 255, 255)',\r\n    marginTop: '12px',\r\n    marginBottom: '12px'\r\n}\r\n\r\nconst mobileListItemStyle: CSS.Properties = {\r\n    ...listItemStyle,\r\n    paddingRight: '5px',\r\n    paddingLeft: '10px'\r\n}\r\n\r\nconst ratingUpStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#5eb560'\r\n}\r\nconst ratingDownStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#f97373'\r\n}\r\nconst ratingConstantStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#969696'\r\n}\r\n\r\nconst tabletMaxWidth = 800\r\n\r\nconst SortableItem = SortableElement(({children}:any) => { \r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return(\r\n        <ListItem style={isTabletOrMobile ? mobileListItemStyle : listItemStyle}>{children}</ListItem>\r\n        )\r\n    });\r\n    \r\nconst SortableList = SortableContainer(({children}:any) => {\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return <List dense={isTabletOrMobile}>{children}</List>;\r\n});\r\nconst ResponsiveListItem = ({children}:any) => {\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return <ListItem style={isTabletOrMobile ? {paddingRight:'5px', paddingLeft:'10px'}:undefined}>{children}</ListItem>\r\n}\r\n\r\n\r\ninterface OwnProps{\r\n    playersCompare: PlayerRanked[] \r\n    reorder: ({oldIndex, newIndex}: any) => void\r\n    playerRemoved: (playerId: string) => void\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class RankedPlayersList extends Component<Props, {}>{\r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <SortableList \r\n                onSortEnd={this.props.reorder} \r\n                shouldCancelStart = {(e: any) => {\r\n                    if(\r\n                        e.target.id == \"buttonRemove\" || \r\n                        e.target.nearestViewportElement !== undefined && \r\n                        e.target.nearestViewportElement.id === \"buttonRemove\"\r\n                    ){\r\n                        return true\r\n                    }\r\n                }} \r\n                useWindowAsScrollContainer\r\n            >\r\n                <ResponsiveListItem>\r\n                    <Grid item xs = {1}>\r\n                        <ListItemText >#</ListItemText>\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={4}>\r\n                        <ListItemText>Name</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <ListItemText>Rank</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <ListItemText >Points</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} style={{minWidth: '65px'}}>  \r\n                        <ListItemText style={{textAlign:'right', float:'right'}}>Tournament Points</ListItemText>\r\n                    </Grid>\r\n                </ResponsiveListItem>\r\n                {this.props.playersCompare.map((value, index) => (\r\n                <SortableItem key={index} index={index}>\r\n                    <Grid item xs = {1}>\r\n                    <ListItemText><b>{value.pos}</b></ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={4}>\r\n                        <ListItemText>{value.name}</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={65}/> :(\r\n                            <Grid container direction='row' >\r\n                                <Box mr={0.5}><ListItemText>{value.newRank}</ListItemText></Box>\r\n                                {\r\n                                    value.rank > value.newRank ? <ListItemText style={ratingUpStyle}><b>{`(+${Math.abs(value.rank-value.newRank)})`}</b></ListItemText>:\r\n                                    value.rank === value.newRank ? <ListItemText style={ratingConstantStyle}><b>{`(=${value.rank-value.newRank})`}</b></ListItemText> :\r\n                                    <ListItemText style={ratingDownStyle}><b>{`(-${Math.abs(value.rank-value.newRank)})`}</b></ListItemText>\r\n                                } \r\n                            </Grid>\r\n                            )\r\n                        }\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={65}/> :(\r\n                                <Grid container direction='row' >\r\n                                    <Box mr={0.5}><ListItemText >{value.newPoints}</ListItemText></Box>\r\n                                    {\r\n                                        value.points < value.newPoints ? <ListItemText style={ratingUpStyle}><b>{`(+${Math.abs(value.points-value.newPoints)})`}</b></ListItemText>:\r\n                                        <ListItemText style={ratingConstantStyle}><b> {`(=${value.points-value.newPoints})`}</b></ListItemText> \r\n                                    } \r\n                                </Grid>\r\n                                )\r\n                        }\r\n                        \r\n\r\n                    </Grid>\r\n                      <Grid item xs={2} sm={2}  style={{minWidth: '65px'}}>  \r\n                         <Grid container direction='row' justify='flex-end' > \r\n                            <MediaQuery maxWidth={tabletMaxWidth}>\r\n                                {(matches) => \r\n                                    matches ? \r\n                                    <>\r\n                                        <Box  display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" marginRight='2px' >\r\n                                            <ListItemText  ><b>{value.score}</b></ListItemText>\r\n                                        </Box>\r\n                                        <IconButton size='small' onClick = {() => this.props.playerRemoved(value.id)} id=\"buttonRemove\">\r\n                                            <Clear fontSize='small' id=\"buttonRemove\"/>\r\n                                        </IconButton>\r\n                                        </>\r\n                                    :\r\n                                    <>\r\n                                        <Box  display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" marginRight={2} >\r\n                                            <ListItemText  ><b>{value.score}</b></ListItemText>\r\n                                        </Box>\r\n                                        <IconButton size='small' onClick = {() => this.props.playerRemoved(value.id)} id=\"buttonRemove\">\r\n                                            <Clear id=\"buttonRemove\"/>\r\n                                        </IconButton>\r\n                                    </>\r\n                                    \r\n                                }\r\n                            </MediaQuery>\r\n                         </Grid> \r\n                     </Grid> \r\n                </SortableItem>\r\n                ))}\r\n            </SortableList>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport playersService, { Player, PlayerRanked } from '../services/player-service';\r\nimport { PlayersAutoComplete } from './players-autocomplete';\r\nimport $ from \"jquery\";\r\nimport { BottomNavigation, BottomNavigationAction, Box, Button, Container, FormControl, Grid, InputLabel, MenuItem, Select } from '@material-ui/core';\r\nimport arrayMove from 'array-move';\r\nimport { Level, levelList } from '../data/scorecalc-data';\r\nimport { ClearAll, GroupAdd, List as ListIcon } from '@material-ui/icons';\r\nimport { RankedPlayersList } from './rankedplayers-list';\r\nimport { RootState } from '../store/combineReducers';\r\nimport { connect } from 'react-redux';\r\nimport MediaQuery, { useMediaQuery } from 'react-responsive';\r\n\r\n\r\ninterface State{\r\n    playersCompare: PlayerRanked[] \r\n    selectedLevel: string,\r\n    bottomNavVal: number\r\n}\r\n\r\ntype Props = ReturnType<typeof mapStateToProps>\r\n\r\nexport class HomeComponent extends Component<Props, State>{\r\n\r\n    public readonly state: State = {\r\n        playersCompare: [],\r\n        selectedLevel: levelList[0].name,\r\n        bottomNavVal: 0\r\n    }\r\n    \r\n    \r\n\r\n\r\n    private readonly recalc = (players: PlayerRanked[], levelName: string): PlayerRanked[] => {\r\n        let levelFound = levelList.find(level => level.name==levelName)\r\n        let level:Level = levelFound ? levelFound : levelList[0]\r\n        return playersService.rankPlayers(playersService.recalc(players, level));\r\n    }\r\n\r\n    private readonly reorder = ({oldIndex, newIndex}: any): void => {\r\n        this.setState(({playersCompare}) => ({\r\n            playersCompare: this.recalc(arrayMove(playersCompare, oldIndex, newIndex), this.state.selectedLevel),\r\n        }));\r\n      };\r\n    \r\n    public componentDidUpdate(prevProps: Props): void{\r\n        if(prevProps.players.length===0 && this.props.players.length > 0){\r\n            playersService.setPlayerScores(this.props.players)\r\n        }\r\n    }\r\n\r\n    public componentDidMount(): void{\r\n\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <>\r\n            <Container>\r\n                <MediaQuery maxWidth={599}>\r\n                {(isMobile) => \r\n                <Box pt={2} pb={isMobile ? 6 : 2}>\r\n                    <Grid container spacing={3}>\r\n                            <>\r\n                            {(!isMobile || this.state.bottomNavVal === 0) &&\r\n                            <Grid item xs={12}  sm={3} style={{minWidth:'200px'}}>\r\n                                <PlayersAutoComplete\r\n                                    players = {this.props.players}\r\n                                    handlePlayerToggle = {this.handlePlayerToggle}\r\n                                    playersCompare = {this.state.playersCompare}\r\n                                />\r\n                            </Grid>\r\n                            }\r\n                        \r\n                            {(!isMobile || this.state.bottomNavVal === 1) &&\r\n                                <Grid item xs={12} sm>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item>\r\n                                        <FormControl>\r\n                                            <InputLabel>Level</InputLabel>\r\n                                            <Select\r\n                                                value={this.state.selectedLevel}\r\n                                                onChange={this.handleLevelChange}\r\n                                            >\r\n                                                {levelList.map(level => <MenuItem value={level.name}>{level.name}</MenuItem> )}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            startIcon={<ClearAll />}\r\n                                            onClick={this.handleClearAllClick}\r\n                                            style={{float:'right'}}\r\n                                        >\r\n                                            Clear\r\n                                        </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <RankedPlayersList\r\n                                        playersCompare = {this.state.playersCompare}\r\n                                        reorder = {this.reorder}\r\n                                        playerRemoved = {this.playerRemoved}\r\n                                    />\r\n                                </Grid>\r\n                            \r\n                            }\r\n                            \r\n                        </>\r\n                    </Grid>\r\n                </Box>\r\n                }\r\n            \r\n                </MediaQuery>\r\n            </Container>\r\n            <MediaQuery maxWidth={599}>\r\n                <BottomNavigation\r\n                    value = {this.state.bottomNavVal}\r\n                    onChange={(e, newValue) => {\r\n                        this.setState({bottomNavVal: newValue})\r\n                    }}\r\n                    style = {{\r\n                        width:'100%',\r\n                        position: 'fixed',\r\n                        bottom: '0',\r\n                        right:'0',\r\n                        left:'0',\r\n                    }}\r\n                    showLabels\r\n                >\r\n                    <BottomNavigationAction label=\"Select Players\" style={{maxWidth:'1000px'}} icon={<GroupAdd/>}/>\r\n                    <BottomNavigationAction label=\"Standings\" style={{maxWidth:\"1000px\"}} icon={<ListIcon/>}/>\r\n                </BottomNavigation>\r\n            </MediaQuery>\r\n            </>\r\n        )\r\n    }\r\n\r\n    private readonly handlePlayerToggle = (player: Player): void => {\r\n        if(this.state.playersCompare.some(p => p.id==player.id)){\r\n            this.playerRemoved(player.id)\r\n        }\r\n        else{\r\n            this.playerAdded(player);\r\n        }\r\n    }\r\n    private readonly playerAdded = (player: Player): void => {\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            playersCompare: this.recalc(prevState.playersCompare.concat({\r\n                ...player, \r\n                pos:prevState.playersCompare.length+1, \r\n                score:-1, \r\n                lowestScore:-1,\r\n                newRank:-1,\r\n                newPoints:-1\r\n            }), prevState.selectedLevel)\r\n        }))\r\n        $.ajax('https://serene-crag-74633.herokuapp.com/single/'+player.id)\r\n        .then(res => {\r\n            \r\n            let score = Number(res);\r\n            let items = [...this.state.playersCompare]\r\n            for(var i=0; i<items.length; i++){\r\n                if(items[i].id === player.id && items[i].lowestScore===-1){\r\n                    let item = {...items[i]}\r\n                    item.lowestScore=score\r\n                    \r\n                    items[i]=item\r\n                    \r\n                    this.setState({playersCompare: this.recalc(items, this.state.selectedLevel)})\r\n\r\n                    break\r\n                }\r\n            }\r\n        \r\n        })\r\n        .catch(() => {\r\n            console.log(\"error\")\r\n        })\r\n\r\n    }\r\n    private readonly handleClearAllClick = (): void => {\r\n        this.setState({\r\n            playersCompare: []\r\n        })\r\n    }\r\n    private readonly playerRemoved = (playerId: string): void => {\r\n        this.setState(({playersCompare, selectedLevel}) => ({\r\n            playersCompare: this.recalc(playersCompare.filter(player => player.id !== playerId), selectedLevel)\r\n        }))\r\n    }\r\n    private readonly handleLevelChange = (e: any): void => {\r\n        \r\n        this.setState(({playersCompare}) => ({\r\n            selectedLevel: e.target.value,\r\n            playersCompare: this.recalc(playersCompare, e.target.value)\r\n            \r\n        }));\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) =>({\r\n    players: state.players\r\n});\r\n\r\nconst Home = connect(mapStateToProps)(HomeComponent)\r\nexport {Home}","import { percentageList, ruleChangeDates } from \"../data/scorecalc-data\";\r\nimport { Player } from \"./player-service\";\r\n\r\nexport interface Tournament{\r\n    date: Date,\r\n    name: string,\r\n    series: string[],\r\n    city: string,\r\n    pos: number,\r\n    points: number\r\n}\r\n\r\nexport interface PlayerWithTournaments extends Player{\r\n    tournaments: PointsByDate[]\r\n}\r\n\r\nexport interface PointsByDate {\r\n    date: Date,\r\n    points: number\r\n}\r\n\r\ninterface PointsByDatePrecalc extends PointsByDate {\r\n    ind: number\r\n}\r\n\r\ninterface ChartData {\r\n    date: string,\r\n    points: number\r\n}\r\n\r\nclass TournamentsService {\r\n\r\n    private readonly addYears = (dt: Date, n: number): Date => {\r\n        let dtt = new Date(dt)\r\n        return new Date(dtt.setFullYear(dtt.getFullYear() + n))\r\n    }\r\n\r\n    getPointsByDate = (tournaments: Tournament[]): PointsByDate[] => {\r\n        var start = Date.now()\r\n        \r\n        let datesToCheck: PointsByDatePrecalc[] = []\r\n        for(let i=0; i<tournaments.length; i++) {\r\n            for(let percentage of percentageList){\r\n                let newDate: Date = this.addYears(tournaments[i].date, percentage.tournamentAge)\r\n                if(newDate < percentage.appliedFrom || newDate > percentage.appliedUntil){\r\n                    continue\r\n                }\r\n\r\n                datesToCheck.push({\r\n                    date: newDate,\r\n                    points: Math.round(tournaments[i].points * percentage.percentage),\r\n                    ind: i\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        datesToCheck = datesToCheck.sort((a, b) => {\r\n            return new Date(a.date).getTime() - new Date(b.date).getTime()\r\n        })\r\n        \r\n        let best5: PointsByDatePrecalc[] = []\r\n        let ret:PointsByDate[] = []\r\n\r\n        for(let date of datesToCheck){\r\n            best5 = best5.filter((best) => best.ind !== date.ind)\r\n            best5.push(date)\r\n            best5 = best5.sort((a, b) => b.points - a.points)\r\n            let sum = 0\r\n\r\n            for(let i=0; i< Math.min(best5.length, 5); i++){\r\n                sum += best5[i].points;\r\n            }\r\n            ret.push({\r\n                date: date.date,\r\n                points: sum\r\n            })\r\n        }\r\n        var end = Date.now()\r\n        console.log(\"elapsed \"+(end-start))\r\n\r\n\r\n        return ret\r\n    }\r\n    scalePointsByDate = (points: PointsByDate[], density: number, startRange: Date, endRange: Date): ChartData[] => {\r\n        let startTime = startRange.getTime();\r\n        let endTime = endRange.getTime();\r\n        let step = (endTime - startTime) / density\r\n        let ind = 0\r\n        let score = 0\r\n        let ret:ChartData[] = []\r\n        for(let i=startTime; i<endTime; i+=step){\r\n            while(ind < points.length && points[ind].date.getTime() <= i){\r\n                score = points[ind].points\r\n                ind++\r\n            }\r\n            ret.push({\r\n                date: new Date(i).toUTCString().slice(5, 16),\r\n                points: score\r\n            })\r\n        }\r\n        console.log(ret)\r\n        return ret\r\n    }\r\n}\r\n\r\nconst tournamentsService = new TournamentsService();\r\nexport default tournamentsService","import React, { Component } from \"react\";\r\nimport tournamentsService, { PlayerWithTournaments, PointsByDate } from \"../services/tournament-service\";\r\nimport {CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis} from \"recharts\"\r\nimport playersService from \"../services/player-service\";\r\nimport { PlayersAutoComplete } from \"./players-autocomplete\";\r\nimport { Slider, Typography } from \"@material-ui/core\";\r\n\r\ninterface OwnProps{\r\n    playerPoints: PointsByDate[]\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\ninterface State{\r\n    yearRange: number[],\r\n    density: number\r\n}\r\n\r\n\r\nexport class PlayersChart extends Component<Props, State>{\r\n\r\n    public readonly state:State = {\r\n        yearRange: this.getYearRange(),\r\n        density: 20\r\n    }\r\n\r\n    getYearRange(): number[]{\r\n        return [\r\n            this.props.playerPoints[0].date.getUTCFullYear(),\r\n            this.props.playerPoints[this.props.playerPoints.length-1].date.getUTCFullYear(),\r\n        ]\r\n    }\r\n\r\n    getMaxDate(a: Date, b:Date): Date{\r\n        if(a>b)return a\r\n        return b\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props): void{\r\n        if(prevProps.playerPoints !== this.props.playerPoints){\r\n            this.setState({yearRange: this.getYearRange()})\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n        const {\r\n            yearRange,\r\n            density\r\n        } = this.state\r\n\r\n        return(\r\n            <>\r\n                <Typography>\r\n                    Year Range\r\n                </Typography>\r\n                <Slider\r\n                    value = {this.state.yearRange}\r\n                    onChange={this.handleYearChange}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                    marks\r\n                    step = {1}\r\n                    min = {this.getYearRange()[0]}\r\n                    max = {this.getYearRange()[1]}\r\n                />\r\n                <Typography>\r\n                    Chart Density\r\n                </Typography>\r\n                <Slider\r\n                    value = {this.state.density}\r\n                    onChange={this.handleDensityChange}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                    min = {5}\r\n                    max = {50}\r\n                />\r\n                <div style={{ width: '100%', height: 300 }}>\r\n                    <ResponsiveContainer>\r\n                        <LineChart\r\n                            data={tournamentsService.scalePointsByDate(\r\n                                this.props.playerPoints,\r\n                                density, \r\n                                this.getMaxDate(new Date(Date.UTC(yearRange[0], 0)), this.props.playerPoints[0].date), \r\n                                new Date(Date.UTC(yearRange[1], 0))\r\n                            )}\r\n                        >\r\n                            <CartesianGrid stroke=\"#eee\" strokeDasharray=\"3 3\"/>\r\n                            <XAxis dataKey=\"date\" interval={0} angle={30} dx={20} />\r\n                            <YAxis />\r\n                            <Tooltip />\r\n                            <Legend />\r\n                            <Line type=\"monotone\" dataKey=\"points\" stroke=\"#8884d8\" dot={false} strokeWidth = {2}/>\r\n                        </LineChart>\r\n                    </ResponsiveContainer>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n    private readonly handleYearChange = (event: any, newValue: number | number[]) => {\r\n        this.setState({yearRange: newValue as number[]});\r\n    };\r\n    private readonly handleDensityChange = (event: any, newValue: number | number[]) => {\r\n        this.setState({density: newValue as number});\r\n    };\r\n\r\n}","import { CircularProgress, Slider, TextField, Typography } from '@material-ui/core';\r\nimport Box from '@material-ui/core/Box/Box';\r\nimport Button from '@material-ui/core/Button/Button';\r\nimport Container from '@material-ui/core/Container/Container';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport { ClearAll, ThreeSixty } from '@material-ui/icons';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Player } from '../services/player-service';\r\nimport tournamentsService, { PlayerWithTournaments, PointsByDate, Tournament } from '../services/tournament-service';\r\nimport { RootState } from '../store/combineReducers';\r\nimport { PlayersAutoComplete } from './players-autocomplete';\r\nimport $ from \"jquery\";\r\nimport { RankedPlayersList } from './rankedplayers-list';\r\nimport { PlayersChart } from './players-chart';\r\n\r\ntype Props = ReturnType<typeof mapStateToProps>\r\n\r\ninterface State{\r\n    playerPoints: PointsByDate[]\r\n}\r\n\r\nexport class ProgressComponent extends Component<Props, State>{\r\n\r\n    public readonly state:State = {\r\n        playerPoints: []\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <Container>\r\n                <Box pt={5}>\r\n                <Grid container spacing={3}>\r\n                        <Autocomplete\r\n                            options = {this.props.players}\r\n                            getOptionLabel = {(option) => option.name}\r\n                            renderInput = {(params) => \r\n                                <TextField {...params} label=\"Choose a player\" />\r\n                            }\r\n                            filterOptions = {createFilterOptions({\r\n                                limit: 100\r\n                            })}\r\n                            onChange = {this.handlePlayerChange}\r\n                        />\r\n                        {/*<Autocomplete\r\n                            options = {this.props.players}\r\n                            getOptionLabel = {(option) => option.name}\r\n                            renderInput = {(params) => \r\n                                <TextField {...params} label=\"Select a player to compare\" />\r\n                            }\r\n                            filterOptions = {createFilterOptions({\r\n                                limit: 100\r\n                            })}\r\n                        />*/}\r\n                        {this.state.playerPoints.length ? \r\n                            <PlayersChart playerPoints={this.state.playerPoints} /> :\r\n                            <CircularProgress/>\r\n                        }\r\n                </Grid>\r\n                \r\n                </Box>\r\n            </Container>\r\n        )\r\n\r\n    }\r\n    \r\n    private readonly handlePlayerChange = (event: any, newValue: Player|null) =>{\r\n        if(newValue === null){\r\n            this.setState({playerPoints: []})\r\n        }\r\n        else{\r\n            $.getJSON('https://serene-crag-74633.herokuapp.com/tournaments/'+newValue.id)\r\n            .then(res => {\r\n                this.setState({\r\n                    playerPoints: tournamentsService.getPointsByDate(res)\r\n                })\r\n            })\r\n            .catch(() => {\r\n                console.log(\"error\")\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) =>({\r\n    players: state.players\r\n});\r\n\r\nconst Progress = connect(mapStateToProps)(ProgressComponent)\r\nexport {Progress}","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom';\r\nimport { Route } from 'react-router';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Home } from './components/home';\r\nimport playersService, { Player } from './services/player-service';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { updatePlayers } from './store/players/player-actions';\r\nimport { connect } from 'react-redux';\r\nimport $ from \"jquery\";\r\nimport { Progress } from './components/progress';\r\n\r\ntype Props = ReturnType<typeof mapDispatchToProps> \r\n\r\nclass AppComponent extends Component<Props, {}> {\r\n  \r\n  componentDidMount(): void{\r\n    $.ajax('https://serene-crag-74633.herokuapp.com/all')\r\n      .then(res => {\r\n          const players:Player[] =  playersService.parseContent(res)\r\n          this.props.updatePlayers(players)\r\n      })\r\n      .catch(() => {\r\n          console.log(\"error\")\r\n      })\r\n  }\r\n  \r\n  static displayName = AppComponent.name;\r\n  \r\n  render () {\r\n    return (\r\n      <HashRouter>\r\n        <Route exact path='/' component={Home} />\r\n        <Route exact path='/progress' component={Progress} />\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>({\r\n  updatePlayers: (players: Player[]) => dispatch(updatePlayers(players))\r\n});\r\n\r\nconst App = connect(null, mapDispatchToProps)(AppComponent)\r\nexport default App","import { Player } from \"../../services/player-service\";\r\nimport { UpdatePlayersAction, UPDATE_PLAYERS } from \"./player-types\";\r\n\r\nexport function updatePlayers(newPlayers: Player[]): UpdatePlayersAction{\r\n    return {\r\n        type: UPDATE_PLAYERS,\r\n        payload: newPlayers\r\n    }\r\n}","import { Player } from \"../../services/player-service\";\r\n\r\nexport const UPDATE_PLAYERS = 'UPDATE_PLAYERS'\r\n\r\nexport interface UpdatePlayersAction {\r\n    type: typeof UPDATE_PLAYERS\r\n    payload: Player[]\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { Player } from \"../../services/player-service\";\r\nimport { UpdatePlayersAction, UPDATE_PLAYERS } from \"./player-types\";\r\n\r\nconst initialState: Player[] = []\r\n\r\nexport function playersReducer(\r\n    state = initialState,\r\n    action: UpdatePlayersAction\r\n\r\n): Player[] {\r\n    switch(action.type){\r\n        case UPDATE_PLAYERS:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { playersReducer } from \"./players/player-reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n    players: playersReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","import store from './createStore';\r\n\r\nexport default store;","import { createStore } from 'redux';\r\nimport reducer from './combineReducers';\r\n\r\nexport default createStore(reducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}