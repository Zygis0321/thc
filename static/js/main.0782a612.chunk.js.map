{"version":3,"sources":["components/styles/playerlist.module.css","data/scorecalc-data.ts","services/player-service.ts","components/players-autocomplete.tsx","components/rankedplayers-list.tsx","components/ranker.tsx","store/ranker/ranker-actions.ts","store/ranker/ranker-types.ts","services/tournament-service.ts","services/country-service.ts","components/player-card.tsx","components/players-chart.tsx","components/progress.tsx","components/navbar.tsx","components/home.tsx","App.tsx","store/players/player-actions.ts","store/players/player-types.ts","serviceWorker.ts","store/players/player-reducers.ts","store/ranker/ranker-reducers.ts","store/combineReducers.ts","store/index.ts","store/createStore.ts","index.tsx"],"names":["module","exports","levelList","name","coefficient","winnerpoints","percentageNormalList","tournamentAge","percentage","percentageExceptionList","exceptionInterval","Date","UTC","playersService","rankPlayers","players","prefScores","i","length","lowestScore","newPoints","points","Math","max","score","rank","j","newRank","recalc","level","pos","value","map","p","sort","a","b","valueSum","min","maxScore","round","content","stringArray","split","ln","ret","player","Number","id","club","nation","push","el","document","createElement","innerHTML","list","getElementsByClassName","cnt","ind","indexOf","substr","Array","fill","PlayersAutoComplete","state","searchText","handleSearchChange","e","setState","target","TextField","label","variant","onChange","this","fullWidth","InputProps","endAdornment","InputAdornment","position","Search","color","dense","props","filter","toLowerCase","includes","slice","from","ListItem","key","button","onClick","handlePlayerToggle","ListItemText","primary","secondary","ListItemSecondaryAction","Checkbox","edge","checked","playersCompare","some","Box","pt","pl","pr","Skeleton","width","Component","listItemStyle","boxShadow","backgroundColor","marginTop","marginBottom","borderRadius","mobileListItemStyle","paddingRight","paddingLeft","ratingUpStyle","fontWeight","ratingDownStyle","ratingConstantStyle","SortableItem","SortableElement","children","isTabletOrMobile","useMediaQuery","maxWidth","style","SortableList","SortableContainer","ResponsiveListItem","undefined","RankedPlayersList","isMobile","onSortEnd","reorder","shouldCancelStart","nearestViewportElement","useWindowAsScrollContainer","lockAxis","pressDelay","helperClass","styles","selected","Grid","item","xs","sm","md","minWidth","textAlign","float","index","container","direction","mr","abs","justify","matches","display","alignItems","justifyContent","marginRight","IconButton","size","playerRemoved","Clear","fontSize","RankerComponent","levelName","levelFound","find","oldIndex","newIndex","updateRankerState","rankerState","arrayMove","selectedLevel","playerAdded","concat","$","ajax","then","res","items","catch","console","log","handleClearAllClick","playerId","handleLevelChange","pb","spacing","bottomNavVal","FormControl","InputLabel","Select","MenuItem","Button","startIcon","ClearAll","BottomNavigation","newValue","bottom","right","left","zIndex","showLabels","BottomNavigationAction","icon","GroupAdd","List","Ranker","connect","ranker","dispatch","type","payload","tournamentsService","addYears","dt","n","dtt","setFullYear","getFullYear","getPointsByDate","tournaments","percentageList","datesToCheck","newDate","date","getTime","best5","best","sum","convertDateToString","toUTCString","getChartData","points01","points02","points03","scalePointsByDate","step","startRange","endRange","startTime","endTime","getMaxDate","getMinDate","getChartDataArray","yearRange","density","playerPoints","playerPointsException","playerPoints1","startDate","endDate","res1","res2","res3","newEl","pop","getChartDataArrayCompare","playerPointsException1","playerPoints2","playerPointsException2","points11","points12","points13","getCountry","countryCodes","country","fifa","alpha2code","a2","PlayerDetail","Typography","align","bold","text","PlayerContent","CardContent","withFlag","alignSelf","objectFit","src","margin","toString","PlayerSkeleton","height","PlayerHomeCard","Card","PlayerCard","marginLeft","flexDirection","CardActions","window","open","flex","PlayersChart","player2Color","player1Color","handleYearChange","event","prevProps","playerPointsNormal1","prevState","getYearRange","getUTCFullYear","playerName1","playerName2","Slider","valueLabelDisplay","aria-labelledby","marks","overflow","data","playerPointsNormal2","strokeDasharray","dataKey","getPayload","stroke","dot","strokeWidth","x","ProgressComponent","playerUpdating","selectedPlayer","handlePlayerChange","getPlayerPoints","normal","exception","handlePlayerCompareChange","Promise","resolve","reject","getJSON","always","Autocomplete","options","getOptionLabel","option","renderInput","params","filterOptions","createFilterOptions","limit","loading","top","CircularProgress","Progress","navBarItemStyle","buttonSelectedStyle","navList","url","NavBar","opened","toggleDrawer","Drawer","anchor","onClose","Divider","component","to","exact","activeStyle","AppBar","Container","React","Home","useState","playerCount","setPlayerCount","useSelector","Whatshot","WebkitTextStroke","WebkitTextStrokeColor","gridGap","gridTemplateColumns","count","skeletons","getSkeletons","AppComponent","parseContent","updatePlayersState","getPlayerScores","path","displayName","App","playersState","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","reducer","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0782a612.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"playerlist_selected__2fnnR\"};","export interface Level {\r\n    name: string,\r\n    coefficient: number,\r\n    winnerpoints: number\r\n}\r\n\r\nexport const levelList: Level[] = [\r\n    {name: \"Level 1 (World)\", coefficient: 0.96, winnerpoints: 1000},\r\n    {name: \"Level 1 (Continental)\", coefficient: 0.96, winnerpoints: 600},\r\n    {name: \"Level 2\", coefficient: 0.92, winnerpoints: 500},\r\n    {name: \"Level 3\", coefficient: 0.89, winnerpoints: 100},\r\n    {name: \"Level 4\", coefficient: 0.83, winnerpoints: 70},\r\n    {name: \"Level 5\", coefficient: 0.60, winnerpoints: 40},\r\n    {name: \"Level 6\", coefficient: 0.40, winnerpoints: 20},\r\n]\r\n\r\nexport interface PointsPercentage {\r\n    tournamentAge: number,\r\n    percentage: number\r\n}\r\n\r\nexport const percentageNormalList: PointsPercentage[] = [\r\n    {\r\n        tournamentAge: 0,\r\n        percentage: 1\r\n    },\r\n    {\r\n        tournamentAge: 2,\r\n        percentage: 0.8\r\n    },\r\n    {\r\n        tournamentAge: 3,\r\n        percentage: 0.6\r\n    },\r\n    {\r\n        tournamentAge: 4,\r\n        percentage: 0.4\r\n    },\r\n    {\r\n        tournamentAge: 5,\r\n        percentage: 0.2\r\n    },\r\n    {\r\n        tournamentAge: 6,\r\n        percentage: 0\r\n    },\r\n]\r\nexport const percentageExceptionList: PointsPercentage[] = [\r\n    {\r\n        tournamentAge: 0,\r\n        percentage: 1\r\n    },\r\n    {\r\n        tournamentAge: 3,\r\n        percentage: 0.6\r\n    },\r\n    {\r\n        tournamentAge: 4,\r\n        percentage: 0.4\r\n    },\r\n    {\r\n        tournamentAge: 5,\r\n        percentage: 0.2\r\n    },\r\n    {\r\n        tournamentAge: 6,\r\n        percentage: 0\r\n    },\r\n]\r\nexport const exceptionInterval: Date[] = [\r\n    new Date(Date.UTC(2020, 9, 5)),\r\n    new Date(Date.UTC(2021, 6, 1))\r\n]","import { Level } from \"../data/scorecalc-data\";\r\n\r\n\r\nexport interface Player{\r\n    name: string,\r\n    id: string,\r\n    rank: number,\r\n    nation: string,\r\n    points: number,\r\n    value: number\r\n    club: string\r\n}\r\n\r\nexport interface PlayerRanked extends Player{\r\n    pos: number\r\n    lowestScore: number\r\n    score: number\r\n    newRank: number\r\n    newPoints: number\r\n}\r\n\r\nclass PlayersService {\r\n\r\n    //private prefScores:number[] = []\r\n\r\n    rankPlayers = (players: PlayerRanked[], prefScores:number[]): PlayerRanked[] => {\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n            players[i].newPoints = players[i].points + Math.max(0, players[i].score - players[i].lowestScore)\r\n        }\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n\r\n            let rank: number = prefScores[players[i].newPoints + 1] + 1\r\n            for(let j=0; j<players.length; j++){\r\n                if(players[j].lowestScore === -1)continue\r\n                if(players[j].points>players[i].newPoints)rank--\r\n                if(players[j].newPoints>players[i].newPoints)rank++\r\n            }\r\n            players[i].rank = prefScores[players[i].points + 1] + 1\r\n            players[i].newRank = rank\r\n        }\r\n\r\n        return players\r\n    }\r\n\r\n    recalc = (players: PlayerRanked[], level: Level): PlayerRanked[] => {\r\n        \r\n        \r\n        //set player pos\r\n        for(var i=0; i<players.length; i++){\r\n            players[i].pos=i+1\r\n            players[i].score=0;\r\n        }\r\n        \r\n        \r\n        if(players.length<4){\r\n            return players;\r\n        }\r\n        \r\n        \r\n        //which player beaten\r\n        var value:number[] = players.map(p => p.value).sort((a,b) => b-a)\r\n        for(let i=0; i+1<players.length; i++){\r\n            let valueSum: number = 0;\r\n            for(var j=i; j<Math.min(i+4, players.length); j++){\r\n                valueSum+=value[j]\r\n            }\r\n            players[i].score = Math.max(players[i].score, (valueSum/4)*level.coefficient);\r\n        }\r\n        //number of beaten\r\n        for(let i=0; i<players.length; i++){\r\n            let maxScore: number = (((70-1)*(players.length - i - 1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, Math.min(maxScore,players.length-i))\r\n        }\r\n\r\n        //scalar\r\n        let points:number = level.winnerpoints\r\n        for(let i=0; i+1<players.length; i++){\r\n            players[i].score = Math.max(players[i].score, points)\r\n            points/=2\r\n        }\r\n\r\n        //linear\r\n        for(let i=0; i<players.length; i++){\r\n            let score: number = (((level.winnerpoints-1)*(players.length-i-1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, score)\r\n        }\r\n\r\n        //sum up\r\n        for(let i=0; i<players.length; i++){\r\n            players[i].score = Math.round(players[i].score - 0.05)\r\n        }\r\n        players[0].score+=10\r\n\r\n        return players\r\n    }\r\n\r\n    parseContent(content: string): Player[]{\r\n        const stringArray = content.split('\\n').map((ln) => {\r\n            return ln.split('\\t');\r\n        });\r\n        let ret: Player[] = []\r\n        for(var i=2; i+1<stringArray.length; i++){\r\n            const player:Player = {\r\n                rank: Number(stringArray[i][0]),\r\n                id: stringArray[i][1],\r\n                name: stringArray[i][2],\r\n                club: stringArray[i][3],\r\n                nation: stringArray[i][4],\r\n                points: Number(stringArray[i][5]),\r\n                value: Number(stringArray[i][6]),\r\n            }\r\n            ret.push(player)\r\n        }\r\n        return ret\r\n    }\r\n\r\n    parsePlayerMinPoints(content: string): number{\r\n        var el = document.createElement('html');\r\n        el.innerHTML = content\r\n        var list = el.getElementsByClassName(\"normTour\");\r\n        \r\n        var ret:number = 100000;\r\n        var cnt:number = 0;\r\n        for(var i=6; i<list.length; i+=7){\r\n            let ind:number = list[i].innerHTML.indexOf('(')\r\n            if(ind===-1)ind=list[i].innerHTML.length\r\n            let score:string = list[i].innerHTML.substr(0, ind);\r\n            ret = Math.min(ret, Number(score));\r\n            cnt++\r\n        }\r\n        if(cnt<5)ret=0\r\n        return ret\r\n    }\r\n\r\n    getPlayerScores(players: Player[]): number[]{\r\n        let prefScores:number[] = new Array(6005).fill(0)\r\n        for(let i=0; i<players.length; i++){\r\n            prefScores[players[i].points]++;\r\n        }\r\n        \r\n        for(let i=6000; i>=0; i--){\r\n            prefScores[i]+=prefScores[i+1]\r\n        }\r\n        return prefScores\r\n\r\n    }\r\n\r\n}\r\n\r\nconst playersService = new PlayersService();\r\nexport default playersService","import { Box, Checkbox, InputAdornment, List, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Search } from '@material-ui/icons';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport React, { Component } from 'react';\r\nimport { Player } from '../services/player-service';\r\n//import matchSorter from 'match-sorter'\r\n\r\ninterface OwnProps{\r\n    players: Player[]\r\n    handlePlayerToggle: (player: Player) => void\r\n    playersCompare: Player[]\r\n}\r\ninterface State{\r\n    searchText: string\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class PlayersAutoComplete extends Component<Props, State>{\r\n    public readonly state: State = {\r\n        searchText: ''\r\n    }\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n\r\n            <>\r\n                \r\n\r\n                <TextField \r\n                    label=\"Players\" \r\n                    variant=\"outlined\" \r\n                    onChange={this.handleSearchChange} \r\n                    fullWidth\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <Search color='action'/>\r\n                            </InputAdornment>\r\n                        )\r\n                    }}\r\n                />\r\n                <List dense>\r\n                    {(!this.props.players.length ? Array.from(new Array(10)) : \r\n                        this.props.players.filter(p => p.name.toLowerCase().includes(this.state.searchText.toLowerCase())).slice(0, 10))\r\n                        .map((player) => {\r\n                            return (\r\n                                player ? (\r\n                                    <ListItem key={player.id} button onClick={() => this.props.handlePlayerToggle(player)}>\r\n                                        <ListItemText id={player.id+player.name} primary={player.name} secondary={player.club} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Checkbox\r\n                                                edge=\"end\"\r\n                                                onChange={() => this.props.handlePlayerToggle(player)}\r\n                                                checked={this.props.playersCompare.some(p => p.id==player.id)}\r\n                                            />\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ) : (\r\n                                    <Box pt={2} pl={1} pr={1}>\r\n                                        <Skeleton />\r\n                                        <Skeleton width=\"60%\" />\r\n                                    </Box>\r\n                                )\r\n                            )\r\n                        })}\r\n                </List>\r\n            </>\r\n        )\r\n    }\r\n    private readonly handleSearchChange = (e: any): void => {\r\n        this.setState({searchText: e.target.value});\r\n    }\r\n}","import { Box, Grid, IconButton, List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { Clear } from \"@material-ui/icons\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport CSS from 'csstype';\r\nimport React, { Component } from \"react\";\r\nimport MediaQuery, { useMediaQuery } from 'react-responsive';\r\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\r\nimport { PlayerRanked } from \"../services/player-service\";\r\nimport styles from './styles/playerlist.module.css';\r\n\r\nconst listItemStyle: CSS.Properties = {\r\n    boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.2)',\r\n    backgroundColor: 'rgb(255, 255, 255)',\r\n    marginTop: '10px',\r\n    marginBottom: '10px',\r\n    borderRadius: '7px'\r\n}\r\n\r\nconst mobileListItemStyle: CSS.Properties = {\r\n    ...listItemStyle,\r\n    paddingRight: '5px',\r\n    paddingLeft: '10px'\r\n}\r\n\r\nconst ratingUpStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#5eb560'\r\n}\r\nconst ratingDownStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#f97373'\r\n}\r\nconst ratingConstantStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#969696'\r\n}\r\n\r\nconst tabletMaxWidth = 800\r\n\r\nconst SortableItem = SortableElement(({children}:any) => { \r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return(\r\n        <ListItem style={isTabletOrMobile ? mobileListItemStyle : listItemStyle}>{children}</ListItem>\r\n        )\r\n    });\r\n    \r\nconst SortableList = SortableContainer(({children}:any) => {\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return <List dense={isTabletOrMobile}>{children}</List>;\r\n});\r\nconst ResponsiveListItem = ({children}:any) => {\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return <ListItem style={isTabletOrMobile ? {paddingRight:'5px', paddingLeft:'10px'}:undefined}>{children}</ListItem>\r\n}\r\n\r\n\r\ninterface OwnProps{\r\n    playersCompare: PlayerRanked[] \r\n    reorder: ({oldIndex, newIndex}: any) => void\r\n    playerRemoved: (playerId: string) => void\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class RankedPlayersList extends Component<Props, {}>{\r\n    \r\n    render(): React.ReactNode{\r\n        return(\r\n            <MediaQuery maxWidth={599}>\r\n            {(isMobile) => \r\n            <SortableList \r\n                onSortEnd={this.props.reorder} \r\n                shouldCancelStart = {(e: any) => {\r\n                    if(\r\n                        e.target.id == \"buttonRemove\" || \r\n                        e.target.nearestViewportElement !== undefined && \r\n                        e.target.nearestViewportElement.id === \"buttonRemove\"\r\n                    ){\r\n                        return true\r\n                    }\r\n                }} \r\n                useWindowAsScrollContainer\r\n                lockAxis = 'y'\r\n                pressDelay = {isMobile ? 200 : 0}\r\n                helperClass = {styles.selected}\r\n            >\r\n                <ResponsiveListItem>\r\n                    <Grid item xs = {1}>\r\n                        <ListItemText >#</ListItemText>\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={4}>\r\n                        <ListItemText>Name</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <ListItemText>Rank</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <ListItemText >Points</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} style={{minWidth: '65px'}}>  \r\n                        <ListItemText style={{textAlign:'right', float:'right'}}>Tournament Points</ListItemText>\r\n                    </Grid>\r\n                </ResponsiveListItem>\r\n                {this.props.playersCompare.map((value, index) => (\r\n                <SortableItem key={index} index={index} >\r\n                    <Grid item xs = {1}>\r\n                    <ListItemText><b>{value.pos}</b></ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={4}>\r\n                        <ListItemText>{value.name}</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={65}/> :(\r\n                            <Grid container direction='row' >\r\n                                <Box mr={0.5}><ListItemText>{value.newRank}</ListItemText></Box>\r\n                                {\r\n                                    value.rank > value.newRank ? <ListItemText style={ratingUpStyle}><b>{`(+${Math.abs(value.rank-value.newRank)})`}</b></ListItemText>:\r\n                                    value.rank === value.newRank ? <ListItemText style={ratingConstantStyle}><b>{`(=${value.rank-value.newRank})`}</b></ListItemText> :\r\n                                    <ListItemText style={ratingDownStyle}><b>{`(-${Math.abs(value.rank-value.newRank)})`}</b></ListItemText>\r\n                                } \r\n                            </Grid>\r\n                            )\r\n                        }\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={65}/> :(\r\n                                <Grid container direction='row' >\r\n                                    <Box mr={0.5}><ListItemText >{value.newPoints}</ListItemText></Box>\r\n                                    {\r\n                                        value.points < value.newPoints ? <ListItemText style={ratingUpStyle}><b>{`(+${Math.abs(value.points-value.newPoints)})`}</b></ListItemText>:\r\n                                        <ListItemText style={ratingConstantStyle}><b> {`(=${value.points-value.newPoints})`}</b></ListItemText> \r\n                                    } \r\n                                </Grid>\r\n                                )\r\n                        }\r\n                        \r\n\r\n                    </Grid>\r\n                      <Grid item xs={2} sm={2}  style={{minWidth: '65px'}}>  \r\n                         <Grid container direction='row' justify='flex-end' > \r\n                            <MediaQuery maxWidth={tabletMaxWidth}>\r\n                                {(matches) => \r\n                                    matches ? \r\n                                    <>\r\n                                        <Box  display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" marginRight='2px' >\r\n                                            <ListItemText  ><b>{value.score}</b></ListItemText>\r\n                                        </Box>\r\n                                        <IconButton size='small' onClick = {() => this.props.playerRemoved(value.id)} id=\"buttonRemove\">\r\n                                            <Clear fontSize='small' id=\"buttonRemove\"/>\r\n                                        </IconButton>\r\n                                        </>\r\n                                    :\r\n                                    <>\r\n                                        <Box  display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" marginRight={2} >\r\n                                            <ListItemText  ><b>{value.score}</b></ListItemText>\r\n                                        </Box>\r\n                                        <IconButton size='small' onClick = {() => this.props.playerRemoved(value.id)} id=\"buttonRemove\">\r\n                                            <Clear id=\"buttonRemove\"/>\r\n                                        </IconButton>\r\n                                    </>\r\n                                    \r\n                                }\r\n                            </MediaQuery>\r\n                         </Grid> \r\n                     </Grid> \r\n                </SortableItem>\r\n                ))}\r\n            </SortableList>\r\n            }\r\n            </MediaQuery>\r\n        )\r\n    }\r\n\r\n}","import { BottomNavigation, BottomNavigationAction, Box, Button, FormControl, Grid, InputLabel, MenuItem, Select } from '@material-ui/core';\r\nimport { ClearAll, GroupAdd, List as ListIcon } from '@material-ui/icons';\r\nimport arrayMove from 'array-move';\r\nimport $ from \"jquery\";\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MediaQuery from 'react-responsive';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { Level, levelList } from '../data/scorecalc-data';\r\nimport playersService, { Player, PlayerRanked } from '../services/player-service';\r\nimport { RootState } from '../store/combineReducers';\r\nimport { updateRankerState } from '../store/ranker/ranker-actions';\r\nimport { RankerState } from '../store/ranker/ranker-types';\r\nimport { PlayersAutoComplete } from './players-autocomplete';\r\nimport { RankedPlayersList } from './rankedplayers-list';\r\n\r\n\r\n\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps> \r\n\r\nexport class RankerComponent extends Component<Props, {}>{ \r\n    \r\n    private readonly recalc = (players: PlayerRanked[], levelName: string): PlayerRanked[] => {\r\n        let levelFound = levelList.find(level => level.name==levelName)\r\n        let level:Level = levelFound ? levelFound : levelList[0]\r\n        return playersService.rankPlayers(playersService.recalc(players, level), this.props.prefScores);\r\n    }\r\n\r\n    private readonly reorder = ({oldIndex, newIndex}: any): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState, \r\n            playersCompare: this.recalc(arrayMove(this.props.rankerState.playersCompare, oldIndex, newIndex), this.props.rankerState.selectedLevel)\r\n        })\r\n      };\r\n\r\n    public componentDidMount(): void{\r\n\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <>\r\n                <MediaQuery maxWidth={599}>\r\n                {(isMobile) => \r\n                <Box pb={isMobile ? 6 : 2}>\r\n                    <Grid container spacing={3}>\r\n                            <>\r\n                            {(!isMobile || this.props.rankerState.bottomNavVal === 0) &&\r\n                            <Grid item xs={12}  sm={3} style={{minWidth:'200px'}}>\r\n                                <PlayersAutoComplete\r\n                                    players = {this.props.players}\r\n                                    handlePlayerToggle = {this.handlePlayerToggle}\r\n                                    playersCompare = {this.props.rankerState.playersCompare}\r\n                                />\r\n                            </Grid>\r\n                            }\r\n                        \r\n                            {(!isMobile || this.props.rankerState.bottomNavVal === 1) &&\r\n                                <Grid item xs={12} sm>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item>\r\n                                        <FormControl>\r\n                                            <InputLabel>Level</InputLabel>\r\n                                            <Select\r\n                                                value={this.props.rankerState.selectedLevel}\r\n                                                onChange={this.handleLevelChange}\r\n                                            >\r\n                                                {levelList.map(level => <MenuItem value={level.name}>{level.name}</MenuItem> )}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            startIcon={<ClearAll />}\r\n                                            onClick={this.handleClearAllClick}\r\n                                            style={{float:'right'}}\r\n                                        >\r\n                                            Clear\r\n                                        </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <RankedPlayersList\r\n                                        playersCompare = {this.props.rankerState.playersCompare}\r\n                                        reorder = {this.reorder}\r\n                                        playerRemoved = {this.playerRemoved}\r\n                                    />\r\n                                </Grid>\r\n                            \r\n                            }\r\n                            \r\n                        </>\r\n                    </Grid>\r\n                </Box>\r\n                }\r\n            \r\n                </MediaQuery>\r\n            <MediaQuery maxWidth={599}>\r\n                <BottomNavigation\r\n                    value = {this.props.rankerState.bottomNavVal}\r\n                    onChange={(e, newValue) => {\r\n                        this.props.updateRankerState({\r\n                            ...this.props.rankerState,\r\n                            bottomNavVal: newValue\r\n                        })\r\n                    }}\r\n                    style = {{\r\n                        width:'100%',\r\n                        position: 'fixed',\r\n                        bottom: '0',\r\n                        right:'0',\r\n                        left:'0',\r\n                        boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',\r\n                        zIndex: 99999\r\n                    }}\r\n                    showLabels\r\n                >\r\n                    <BottomNavigationAction label=\"Select Players\" style={{maxWidth:'1000px'}} icon={<GroupAdd/>}/>\r\n                    <BottomNavigationAction label=\"Standings\" style={{maxWidth:\"1000px\"}} icon={<ListIcon/>}/>\r\n                </BottomNavigation>\r\n            </MediaQuery>\r\n            </>\r\n        )\r\n    }\r\n\r\n    private readonly handlePlayerToggle = (player: Player): void => {\r\n        if(this.props.rankerState.playersCompare.some(p => p.id==player.id)){\r\n            this.playerRemoved(player.id)\r\n        }\r\n        else{\r\n            this.playerAdded(player);\r\n        }\r\n    }\r\n    private readonly playerAdded = (player: Player): void => {\r\n        \r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare.concat({\r\n                ...player, \r\n                pos:this.props.rankerState.playersCompare.length+1, \r\n                score:-1, \r\n                lowestScore:-1,\r\n                newRank:-1,\r\n                newPoints:-1\r\n            }), this.props.rankerState.selectedLevel)\r\n        })\r\n        $.ajax('https://serene-crag-74633.herokuapp.com/single/'+player.id)\r\n        .then(res => {\r\n            \r\n            let score = Number(res);\r\n            let items = [...this.props.rankerState.playersCompare]\r\n            for(var i=0; i<items.length; i++){\r\n                if(items[i].id === player.id && items[i].lowestScore===-1){\r\n                    let item = {...items[i]}\r\n                    item.lowestScore=score\r\n                    \r\n                    items[i]=item\r\n                    this.props.updateRankerState({\r\n                        ...this.props.rankerState,\r\n                        playersCompare: this.recalc(items, this.props.rankerState.selectedLevel)\r\n                    })\r\n\r\n                    break\r\n                }\r\n            }\r\n        \r\n        })\r\n        .catch(() => {\r\n            console.log(\"error\")\r\n        })\r\n\r\n    }\r\n    private readonly handleClearAllClick = (): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: []\r\n        })\r\n    }\r\n    private readonly playerRemoved = (playerId: string): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare.filter(player => player.id !== playerId), this.props.rankerState.selectedLevel)\r\n        })\r\n    }\r\n    private readonly handleLevelChange = (e: any): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            selectedLevel: e.target.value,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare, e.target.value)\r\n        })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) =>({\r\n    players: state.players.players,\r\n    prefScores: state.players.prefScores,\r\n    rankerState: state.ranker\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>({\r\n    updateRankerState: (rankerState: RankerState) => dispatch(updateRankerState(rankerState))\r\n});\r\n  \r\n\r\nconst Ranker = connect(mapStateToProps, mapDispatchToProps)(RankerComponent)\r\nexport { Ranker };\r\n","import { RankerActionTypes, RankerState, UPDATE_RANKER_STATE } from \"./ranker-types\";\r\n\r\nexport function updateRankerState(rankerState: RankerState): RankerActionTypes{\r\n    return{\r\n        type: UPDATE_RANKER_STATE,\r\n        payload: rankerState\r\n    }\r\n}","import { PlayerRanked } from \"../../services/player-service\";\r\n\r\nexport const UPDATE_RANKER_STATE = 'UPDATE_RANKER_STATE'\r\n\r\nexport interface RankerState {\r\n    playersCompare: PlayerRanked[] \r\n    selectedLevel: string,\r\n    bottomNavVal: number\r\n}\r\n\r\ninterface UpdateRankerStateAction {\r\n    type: typeof UPDATE_RANKER_STATE\r\n    payload: RankerState\r\n}\r\n\r\nexport type RankerActionTypes = \r\n    | UpdateRankerStateAction","import {  exceptionInterval, PointsPercentage } from \"../data/scorecalc-data\";\r\nimport { Player } from \"./player-service\";\r\n\r\nexport interface Tournament{\r\n    date: Date,\r\n    name: string,\r\n    series: string[],\r\n    city: string,\r\n    pos: number,\r\n    points: number\r\n}\r\n\r\nexport interface PlayerWithTournaments extends Player{\r\n    tournaments: PointsByDate[]\r\n}\r\n\r\nexport interface PointsByDate {\r\n    date: Date,\r\n    points: number\r\n}\r\n\r\ninterface PointsByDatePrecalc extends PointsByDate {\r\n    ind: number\r\n}\r\n\r\nexport interface ChartData {\r\n    date: string,\r\n    points01?: number,\r\n    points02?: number,\r\n    points03?: number,\r\n    points11?: number,\r\n    points12?: number,\r\n    points13?: number,\r\n}\r\n\r\nclass TournamentsService {\r\n\r\n    private readonly addYears = (dt: Date, n: number): Date => {\r\n        let dtt = new Date(dt)\r\n        return new Date(dtt.setFullYear(dtt.getFullYear() + n))\r\n    }\r\n\r\n    getPointsByDate = (tournaments: Tournament[], percentageList: PointsPercentage[]): PointsByDate[] => {\r\n        \r\n        let datesToCheck: PointsByDatePrecalc[] = []\r\n        for(let i=0; i<tournaments.length; i++) {\r\n            for(let percentage of percentageList){\r\n                let newDate: Date = this.addYears(tournaments[i].date, percentage.tournamentAge)\r\n\r\n                datesToCheck.push({\r\n                    date: newDate,\r\n                    points: Math.round(tournaments[i].points * percentage.percentage),\r\n                    ind: i\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        datesToCheck = datesToCheck.sort((a, b) => {\r\n            return new Date(a.date).getTime() - new Date(b.date).getTime()\r\n        })\r\n        \r\n        let best5: PointsByDatePrecalc[] = []\r\n        let ret:PointsByDate[] = []\r\n\r\n        for(let date of datesToCheck){\r\n            best5 = best5.filter((best) => best.ind !== date.ind)\r\n            best5.push(date)\r\n            best5 = best5.sort((a, b) => b.points - a.points)\r\n            let sum = 0\r\n\r\n            for(let i=0; i< Math.min(best5.length, 5); i++){\r\n                sum += best5[i].points;\r\n            }\r\n            ret.push({\r\n                date: date.date,\r\n                points: sum\r\n            })\r\n        }\r\n\r\n\r\n        return ret\r\n    }\r\n\r\n    convertDateToString = (date: Date): string  => {\r\n        return date.toUTCString().slice(5, 16);\r\n    }\r\n\r\n    getChartData = (date: number, score: number, type: number): ChartData => {\r\n        if(type==0){\r\n            return{\r\n                date: this.convertDateToString(new Date(date)),\r\n                points01: score\r\n            }\r\n        }\r\n        else if(type==1){\r\n            return{\r\n                date: this.convertDateToString(new Date(date)),\r\n                points02: score\r\n            }\r\n        }\r\n        else {\r\n            return{\r\n                date: this.convertDateToString(new Date(date)),\r\n                points03: score\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    scalePointsByDate = (points: PointsByDate[], step: number, startRange: Date, endRange: Date, type: number): ChartData[] => {\r\n        let startTime = startRange.getTime();\r\n        let endTime = endRange.getTime();\r\n\r\n        let ind = 0\r\n        let score = 0\r\n        let ret:ChartData[] = []\r\n        for(let i=startTime; i<endTime; i+=step){\r\n            while(ind < points.length && points[ind].date.getTime() <= i){\r\n                score = points[ind].points\r\n                ind++\r\n            }\r\n            ret.push(this.getChartData(i, score, type))\r\n        }\r\n        while(ind < points.length && points[ind].date.getTime() <= endTime){\r\n            score = points[ind].points\r\n            ind++\r\n        }\r\n        ret.push(this.getChartData(endTime, score, type))\r\n        return ret\r\n    }\r\n\r\n\r\n    getMaxDate = (a: Date, b:Date): Date=>{\r\n        if(a>b)return a\r\n        return b\r\n    }\r\n    getMinDate = (a: Date, b:Date): Date => {\r\n        if(a<b)return a\r\n        return b\r\n    }\r\n\r\n    getChartDataArray = (\r\n        yearRange: number[], \r\n        density: number, \r\n        playerPoints:PointsByDate[], \r\n        playerPointsException: PointsByDate[],\r\n        playerPoints1:PointsByDate[]\r\n    ): ChartData[] => {\r\n\r\n\r\n        let startDate: Date = this.getMaxDate(\r\n            new Date(Date.UTC(yearRange[0], 0)), \r\n            playerPoints1[0].date\r\n        )\r\n        let endDate: Date = this.getMinDate(\r\n            new Date(Date.UTC(yearRange[1], 0)), \r\n            playerPoints1[playerPoints1.length - 1].date\r\n        )\r\n        let step: number = (endDate.getTime() - startDate.getTime()) / density\r\n\r\n        let res1: ChartData[] = startDate < exceptionInterval[0] ? \r\n        this.scalePointsByDate(\r\n            playerPoints,\r\n            step, \r\n            startDate, \r\n            this.getMinDate( exceptionInterval[0], endDate),\r\n            0\r\n        ) : []\r\n        let res2: ChartData[] = endDate > exceptionInterval[0] && startDate < exceptionInterval[1]  ? \r\n        this.scalePointsByDate(\r\n            playerPointsException,\r\n            step, \r\n            this.getMaxDate(exceptionInterval[0], startDate), \r\n            this.getMinDate(exceptionInterval[1], endDate),\r\n            1\r\n        ) : []\r\n        let res3: ChartData[] = endDate > exceptionInterval[1] ? \r\n        this.scalePointsByDate(\r\n            playerPoints,\r\n            step, \r\n            this.getMaxDate(startDate, exceptionInterval[1]),\r\n            endDate,\r\n            2\r\n        ) : []\r\n\r\n        if(res1.length && res2.length && res1[res1.length - 1].date === res2[0].date){\r\n            let newEl: ChartData = {\r\n                date: res2[0].date,\r\n                points01: res1[res1.length - 1].points01,\r\n                points02: res2[0].points02\r\n            }\r\n            \r\n            res1.pop()\r\n            res2[0] = newEl\r\n        }\r\n        if(res2.length && res3.length && res2[res2.length - 1].date === res3[0].date){\r\n            let newEl: ChartData = {\r\n                date: res3[0].date,\r\n                points02: res2[res2.length - 1].points02,\r\n                points03: res3[0].points03\r\n            }\r\n            \r\n            res2.pop()\r\n            res3[0] = newEl\r\n        }\r\n        return res1.concat(res2.concat(res3));\r\n    }\r\n    getChartDataArrayCompare = (\r\n        yearRange: number[], \r\n        density: number, \r\n        playerPoints1:PointsByDate[], \r\n        playerPointsException1: PointsByDate[],\r\n        playerPoints2:PointsByDate[], \r\n        playerPointsException2: PointsByDate[]\r\n    ): ChartData[] => {\r\n        let res1: ChartData[] = this.getChartDataArray(\r\n            yearRange,\r\n            density, \r\n            playerPoints1, \r\n            playerPointsException1,\r\n            playerPoints1\r\n        )\r\n        let res2: ChartData[] = this.getChartDataArray(\r\n            yearRange,\r\n            density, \r\n            playerPoints2, \r\n            playerPointsException2,\r\n            playerPoints1\r\n        )\r\n        let ind = 0\r\n        for(let i=0; i<res1.length; i++){\r\n            if(ind < res2.length && res1[i].date === res2[ind].date){\r\n                res1[i].points11 = res2[ind].points01 \r\n                res1[i].points12 = res2[ind].points02 \r\n                res1[i].points13 = res2[ind].points03\r\n                \r\n                ind++            \r\n            }\r\n\r\n        }\r\n        return res1\r\n\r\n    }\r\n}\r\n\r\nconst tournamentsService = new TournamentsService();\r\nexport default tournamentsService","import countryCodes from '../data/countryCodes.json'\r\n\r\nexport interface CountryCode{\r\n    name: string; \r\n    alpha2code: string;\r\n}\r\n\r\nexport function getCountry(nation: string): CountryCode{\r\n    let ret = countryCodes.find(country => country.fifa===nation)\r\n    if(ret===undefined){\r\n        return {\r\n            name:\"Not Found\",\r\n            alpha2code:\"_empty\",\r\n        }\r\n    }\r\n    return {\r\n        name: ret.name,\r\n        alpha2code: ret.a2\r\n    }\r\n}","import { Button, CardActions, CardContent, Typography } from \"@material-ui/core\";\r\nimport Card from '@material-ui/core/Card';\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport React from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { getCountry } from \"../services/country-service\";\r\nimport { Player } from \"../services/player-service\";\r\n\r\ninterface OwnProps{\r\n    player: Player | null\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nfunction PlayerDetail(props: {text: string, value: string, bold?: boolean}){\r\n    return (\r\n        <>\r\n            <Typography align='right' style={{float:'right'}}>\r\n                {props.bold === true ? <b>{props.value}</b> : props.value}\r\n            </Typography>\r\n            <Typography color=\"textSecondary\" style={{fontWeight:'lighter'}}>\r\n                {props.text}\r\n            </Typography>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction PlayerContent(props: {player: Player, withFlag:boolean}){\r\n    return(\r\n        <CardContent >\r\n            <div style={{display:'flex', marginBottom:'12px'}}>\r\n                {props.withFlag && <img \r\n                style={{alignSelf:'center',width:'100px',objectFit:'fill', boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',}}\r\n                    src = {`http://purecatamphetamine.github.io/country-flag-icons/3x2/${getCountry(props.player.nation).alpha2code}.svg`}\r\n                />}\r\n                <Typography variant=\"h5\" align='center' style = {{margin:'auto'}} color=\"secondary\">\r\n                    {props.player.name}\r\n                </Typography>\r\n            </div>\r\n            <PlayerDetail text='Club' value={props.player.club} />\r\n            <PlayerDetail text='Rank' value={props.player.rank.toString()} bold/>\r\n            <PlayerDetail text='Points' value={props.player.points.toString()} bold/>\r\n            <PlayerDetail text='Player Value' value={props.player.value.toString()}/>\r\n            \r\n        </CardContent>\r\n    )\r\n}\r\nfunction PlayerSkeleton(){\r\n    return(\r\n        <CardContent >\r\n            <div style={{display:'flex', marginBottom:'12px'}}>\r\n                <div style={{alignSelf:'center'}}><Skeleton variant='rect' width={100} height={66} /></div>\r\n                <div style={{margin:'auto'}}><Skeleton variant='text' width='150px' height={40}/></div>\r\n            </div>\r\n            <Skeleton variant='text' height={25}/>\r\n            <Skeleton variant='text' height={25}/>\r\n            <Skeleton variant='text' height={25}/>\r\n            <Skeleton variant='text' height={25}/>\r\n            \r\n        </CardContent>\r\n    )\r\n}\r\n\r\n\r\nexport function PlayerHomeCard(props: {player?: Player}){\r\n    return(\r\n        <Card style = {{width:'100%', height:'100%'}}>\r\n            {/* <CardActionArea> */}\r\n                {\r\n                    props.player === undefined ? <PlayerSkeleton/> :\r\n                    <PlayerContent player={props.player} withFlag />\r\n                }\r\n            {/* </CardActionArea> */}\r\n        </Card>\r\n\r\n    )\r\n}\r\n\r\nexport default function PlayerCard(props: Props){\r\n    const isMobile = useMediaQuery({maxWidth: 959});\r\n    return (\r\n        props.player === null ?\r\n        <Card style = {{ display:'flex', height: '230px', width:'100%', maxWidth:'650px', marginLeft:'auto', marginRight:'auto'}}>\r\n            <Typography style={{margin:'auto'}}>\r\n                No player selected\r\n            </Typography>\r\n        </Card>\r\n        :\r\n        <Card style = {{display:'flex',justifyContent:'flex-end', alignItems:'stretch',  maxWidth:'650px', marginLeft:'auto', marginRight:'auto', width:'100%'}}>\r\n                \r\n                    <div style={{display:'flex', flexDirection:'column', justifyContent:'space-between', width:'100%'}}>\r\n                        <PlayerContent player={props.player} withFlag={isMobile} />\r\n                        <CardActions>\r\n                            <Button \r\n                                size=\"small\" \r\n                                color=\"primary\"\r\n                                onClick={() => {\r\n                                    if(props.player !== null)\r\n                                        window.open( `https://stiga.trefik.cz/ithf/ranking/player.aspx?ID=${props.player.id}`, '_blank')\r\n                                }}\r\n                            >\r\n                                Learn More\r\n                            </Button>\r\n                        </CardActions>\r\n                    </div>\r\n            {!isMobile && <img \r\n            style={{width:'345px', flex:'0 0 345px', boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',}}\r\n            //height=\"100%\"\r\n                src = {`http://purecatamphetamine.github.io/country-flag-icons/3x2/${getCountry(props.player.nation).alpha2code}.svg`}\r\n            />}\r\n        </Card>\r\n    )\r\n}","import { Slider, Typography } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport { CartesianGrid, Legend, LegendPayload, Line, LineChart, ReferenceLine, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\r\nimport { exceptionInterval } from \"../data/scorecalc-data\";\r\nimport tournamentsService, { PointsByDate } from \"../services/tournament-service\";\r\n\r\ninterface OwnProps{\r\n    playerPointsNormal1: PointsByDate[]\r\n    playerPointsException1: PointsByDate[]\r\n    playerPointsNormal2: PointsByDate[]\r\n    playerPointsException2: PointsByDate[]\r\n    playerName1?: string\r\n    playerName2?: string\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\ninterface State{\r\n    yearRange: number[]\r\n}\r\n\r\n\r\nexport class PlayersChart extends Component<Props, State>{\r\n\r\n    public readonly state:State = {\r\n        yearRange: [2000, new Date().getFullYear() + 7],\r\n    }\r\n\r\n    public readonly player2Color: string = \"#8884d8\"\r\n    public readonly player1Color: string = \"#0004d8\"\r\n\r\n    componentDidUpdate(prevProps: Props){\r\n        if(prevProps.playerPointsNormal1 !== this.props.playerPointsNormal1){\r\n            this.setState((prevState) => ({\r\n                yearRange: [\r\n                    Math.min(this.getYearRange()[1], Math.max(this.getYearRange()[0], prevState.yearRange[0])),\r\n                    Math.max(this.getYearRange()[0], Math.min(this.getYearRange()[1], prevState.yearRange[1]))\r\n                ]\r\n            }));\r\n        }\r\n    }\r\n\r\n    getYearRange(): number[]{\r\n        if(this.props.playerPointsNormal1.length === 0){\r\n            return [2000, new Date().getFullYear() + 7]\r\n        }\r\n        return [\r\n            this.props.playerPointsNormal1[0].date.getUTCFullYear(),\r\n            this.props.playerPointsNormal1[this.props.playerPointsNormal1.length-1].date.getUTCFullYear() + 1,\r\n        ]\r\n    }\r\n    \r\n    \r\n    getPayload(): LegendPayload[]{\r\n        let ret:LegendPayload[] = []\r\n        if(this.props.playerName1 !== undefined){\r\n            ret.push({\r\n                value: this.props.playerName1,\r\n                type: \"line\",\r\n                id:\"points01\",\r\n                color: this.player1Color\r\n            })\r\n        }\r\n        if(this.props.playerName2 !== undefined){\r\n            ret.push({\r\n                value: this.props.playerName2,\r\n                type: \"line\",\r\n                id:\"points02\",\r\n                color: this.player2Color\r\n            })\r\n        }\r\n        return ret\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n            <>\r\n                <div style={{paddingLeft:'10px', paddingRight:'10px'}}>\r\n                <Typography>\r\n                    Year Range\r\n                </Typography>\r\n                <Slider\r\n                    color = \"secondary\"\r\n                    value = {this.state.yearRange}\r\n                    onChange={this.handleYearChange}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                    marks\r\n                    step = {1}\r\n                    min = {this.getYearRange()[0]}\r\n                    max = {this.getYearRange()[1]}\r\n                />\r\n                </div>\r\n                <MediaQuery maxWidth='599px'>{\r\n                    (isMobile) =>\r\n                <div style={{ width: '100%', height: isMobile ? 350:500, overflow:'hidden' }}>\r\n                    <ResponsiveContainer>\r\n                        {this.props.playerPointsNormal1.length ?\r\n\r\n                        <LineChart\r\n                            data={ this.props.playerPointsNormal2.length === 0 ? \r\n                                tournamentsService.getChartDataArray(\r\n                                    this.state.yearRange, \r\n                                    isMobile ? 20 : 40, \r\n                                    this.props.playerPointsNormal1, \r\n                                    this.props.playerPointsException1,\r\n                                    this.props.playerPointsNormal1) :\r\n                                tournamentsService.getChartDataArrayCompare(\r\n                                    this.state.yearRange, \r\n                                    isMobile ? 20 : 40,\r\n                                    this.props.playerPointsNormal1, \r\n                                    this.props.playerPointsException1, \r\n                                    this.props.playerPointsNormal2, \r\n                                    this.props.playerPointsException2)\r\n                            }\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <YAxis width={40}/>\r\n                            <XAxis dataKey=\"date\"  />\r\n                            <Tooltip />\r\n                            <Legend  payload = {this.getPayload()} />\r\n                            <Line name={this.props.playerName1} type=\"monotone\" dataKey=\"points01\" stroke={this.player1Color} dot={false} strokeWidth = {2}/>\r\n                            <Line name={`${this.props.playerName1} (New Rules)`} type=\"monotone\" dataKey=\"points02\" stroke={this.player1Color} dot={false} strokeWidth = {2}/>\r\n                            <Line name={this.props.playerName1} type=\"monotone\" dataKey=\"points03\" stroke={this.player1Color} dot={false} strokeWidth = {2}/>\r\n                            {this.props.playerPointsNormal2.length > 0 && \r\n                                <Line name={this.props.playerName2} type=\"monotone\" dataKey=\"points11\" stroke={this.player2Color} dot={false} strokeWidth={2} />}\r\n                            {this.props.playerPointsNormal2.length > 0 && \r\n                                <Line name={`${this.props.playerName2} (New Rules)`} type=\"monotone\" dataKey=\"points12\" stroke={this.player2Color} dot={false} strokeWidth={2} />}\r\n                            {this.props.playerPointsNormal2.length > 0 && \r\n                                <Line name={this.props.playerName2} type=\"monotone\" dataKey=\"points13\" stroke={this.player2Color} dot={false} strokeWidth={2} />}\r\n                            <ReferenceLine x={tournamentsService.convertDateToString(exceptionInterval[0])} stroke=\"#f50057\"/>\r\n                            <ReferenceLine x={tournamentsService.convertDateToString(exceptionInterval[1])} stroke=\"#f50057\"/>\r\n                        </LineChart>\r\n                        :\r\n                        <LineChart>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <YAxis width={40}/>\r\n                            <XAxis/>\r\n                        </LineChart>\r\n                        }\r\n                    </ResponsiveContainer>\r\n                </div>}\r\n                </MediaQuery>\r\n            </>\r\n        )\r\n    }\r\n    \r\n    private readonly handleYearChange = (event: any, newValue: number | number[]) => {\r\n        this.setState({yearRange: newValue as number[]});\r\n    };\r\n\r\n\r\n}","import { CircularProgress, TextField, Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport $ from \"jquery\";\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { percentageExceptionList, percentageNormalList } from '../data/scorecalc-data';\r\nimport { Player } from '../services/player-service';\r\nimport tournamentsService, { PointsByDate } from '../services/tournament-service';\r\nimport { RootState } from '../store/combineReducers';\r\nimport PlayerCard from './player-card';\r\nimport { PlayersChart } from './players-chart';\r\n\r\ntype Props = ReturnType<typeof mapStateToProps>\r\n\r\ninterface State{\r\n    playerPointsNormal1: PointsByDate[]\r\n    playerPointsException1: PointsByDate[]\r\n    playerPointsNormal2: PointsByDate[]\r\n    playerPointsException2: PointsByDate[]\r\n    playerName1?: string\r\n    playerName2?: string\r\n    \r\n    playerUpdating: boolean\r\n    selectedPlayer: Player | null\r\n}\r\n\r\ninterface PlayerPoints{\r\n    normal: PointsByDate[],\r\n    exception: PointsByDate[]\r\n}\r\n\r\nexport class ProgressComponent extends Component<Props, State>{\r\n\r\n    public readonly state:State = {\r\n        playerPointsNormal1: [],\r\n        playerPointsException1: [],\r\n        playerPointsNormal2: [],\r\n        playerPointsException2: [],\r\n        \r\n        playerUpdating: false,\r\n        selectedPlayer: null\r\n    }\r\n\r\n    \r\n    \r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={5} md={4}>\r\n                        <Grid container spacing={3}>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Autocomplete\r\n                                options = {this.props.players}\r\n                                getOptionLabel = {(option) => option.name}\r\n                                renderInput = {(params) => \r\n                                    <TextField {...params} label=\"Select a player\" variant = \"outlined\" />\r\n                                }\r\n                                filterOptions = {createFilterOptions({\r\n                                    limit: 100\r\n                                })}\r\n                                onChange = {this.handlePlayerChange}\r\n                                loading = {this.props.players.length === 0}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Autocomplete\r\n                                options = {this.props.players}\r\n                                getOptionLabel = {(option) => option.name}\r\n                                renderInput = {(params) => \r\n                                    <TextField {...params} label=\"Select a player to compare\" />\r\n                                }\r\n                                filterOptions = {createFilterOptions({\r\n                                    limit: 100\r\n                                })}\r\n                                onChange = {this.handlePlayerCompareChange}\r\n                                loading = {this.props.players.length === 0}\r\n                            />\r\n                        </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs sm md>\r\n                        <PlayerCard player={this.state.selectedPlayer}/>\r\n                    </Grid>\r\n                    <Grid item xs = {12}>\r\n                        <div style={{position: \"relative\"}}>\r\n                            {\r\n                                <div style={(this.state.playerUpdating || this.state.playerName1 === undefined) ? {filter:\"blur(5px)\"} : undefined }>\r\n                                    \r\n                                    <PlayersChart \r\n                                        playerPointsNormal1={this.state.playerPointsNormal1} \r\n                                        playerPointsException1={this.state.playerPointsException1}\r\n                                        playerPointsNormal2={this.state.playerPointsNormal2} \r\n                                        playerPointsException2={this.state.playerPointsException2}\r\n                                        playerName1={this.state.playerName1}\r\n                                        playerName2={this.state.playerName2}\r\n                                    />\r\n                                </div>\r\n                            }\r\n                            {\r\n                                (this.state.playerUpdating || this.state.playerName1 === undefined) && \r\n                                <div style={{\r\n                                    position:\"absolute\", \r\n                                    width:\"100%\", \r\n                                    height:\"500px\", \r\n                                    top:0, \r\n                                    left:0, \r\n                                    display:'flex', \r\n                                    justifyContent:\"center\", \r\n                                    alignItems:'center'\r\n                                }}>\r\n                                    {this.state.playerName1 !== undefined ?\r\n\r\n                                        <CircularProgress  />\r\n                                        :\r\n                                        <Typography>\r\n                                            Select a player to load chart\r\n                                        </Typography>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n        )\r\n\r\n    }\r\n\r\n    \r\n    \r\n    private readonly handlePlayerChange = (event: any, newValue: Player|null) =>{\r\n        this.setState({playerName1: newValue?.name, selectedPlayer: newValue})\r\n        this.getPlayerPoints(newValue).then((value) => {\r\n            this.setState({\r\n                playerPointsNormal1: value.normal,\r\n                playerPointsException1: value.exception\r\n            })\r\n            \r\n        })\r\n    }\r\n    private readonly handlePlayerCompareChange = (event: any, newValue: Player|null) =>{\r\n        this.getPlayerPoints(newValue).then((value) => {\r\n            this.setState({\r\n                playerPointsNormal2: value.normal,\r\n                playerPointsException2: value.exception,\r\n                playerName2: newValue?.name\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    private readonly getPlayerPoints = (newValue: Player|null): Promise<PlayerPoints> =>{\r\n        var promise = new Promise<PlayerPoints>((resolve, reject) => {\r\n            if(newValue === null){\r\n                resolve( {\r\n                    normal: [],\r\n                    exception: []\r\n                })\r\n            }\r\n            else{\r\n                this.setState({playerUpdating: true})\r\n                $.getJSON('https://serene-crag-74633.herokuapp.com/tournaments/'+newValue.id)\r\n                .then(res => {\r\n                    resolve({\r\n                        normal: tournamentsService.getPointsByDate(res, percentageNormalList),\r\n                        exception: tournamentsService.getPointsByDate(res, percentageExceptionList)\r\n                    })\r\n                })\r\n                .catch(() => {\r\n                    console.log(\"error\")\r\n                    resolve( {\r\n                        normal: [],\r\n                        exception: []\r\n                    })\r\n                })\r\n                .always(() => {\r\n                    this.setState({playerUpdating: false})\r\n                })\r\n            }\r\n\r\n        })\r\n        return promise\r\n    }\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) =>({\r\n    players: state.players.players\r\n});\r\n\r\nconst Progress = connect(mapStateToProps)(ProgressComponent)\r\nexport { Progress };\r\n","import { AppBar, Box, Button, Container, Divider, Drawer, IconButton, List, ListItem, ListItemText, Typography } from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CSS from 'csstype';\r\nimport React from \"react\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\n\r\nconst navBarItemStyle:CSS.Properties = {\r\n    margin:'10px',\r\n    alignSelf:'center'\r\n}\r\n\r\nconst buttonSelectedStyle:CSS.Properties = {\r\n    backgroundColor: '#dddddd'\r\n}\r\n\r\n\r\ninterface State{\r\n    opened: boolean\r\n}\r\n\r\ninterface navItem{\r\n    name: string\r\n    url: string\r\n}\r\n\r\nconst navList: navItem[] = [\r\n    {\r\n        name: 'Home',\r\n        url: '/'\r\n    },\r\n    {\r\n        name: 'Players',\r\n        url: '/players'\r\n    },\r\n    {\r\n        name: 'Ranker',\r\n        url: '/ranker'\r\n    },\r\n\r\n]\r\n\r\nexport class NavBar extends React.Component<{},State>{\r\n    public readonly state:State = {\r\n        opened:false\r\n    }\r\n    render(): React.ReactNode{\r\n        return(\r\n            <MediaQuery maxWidth={599}>\r\n                {(isMobile) =>\r\n                <>\r\n                {isMobile && <>\r\n                    <Drawer anchor='left' open={this.state.opened} onClose={this.toggleDrawer} style={{zIndex:999999}}>\r\n                        <Typography variant=\"h6\"style={{margin:'15px'}}>\r\n                            TH Ranker\r\n                        </Typography>\r\n                        <Divider/>\r\n                        <List style={{width:'200px'}}>\r\n                            {\r\n                                navList.map(item => \r\n                                    <ListItem component={(props) => <NavLink to={item.url} exact activeStyle={buttonSelectedStyle} {...props}/>} onClick={this.toggleDrawer} button>\r\n                                        <ListItemText primary={item.name}/>\r\n                                    </ListItem>\r\n                                )\r\n                            }\r\n                        </List>\r\n                    </Drawer>\r\n                    </>\r\n                }\r\n                <AppBar position='sticky' color='default' style={{justifyContent:'space-between', flexDirection:'row', height:'55px'}} >\r\n                    <div style={{display:'flex'}}>\r\n                        {isMobile && \r\n                            <IconButton \r\n                                edge=\"start\" \r\n                                size='small' \r\n                                color=\"inherit\" \r\n                                onClick={this.toggleDrawer} \r\n                                style={{...navBarItemStyle, marginLeft:'10px'}}>\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                        }\r\n                        <Typography variant=\"h6\" style={navBarItemStyle}>\r\n                            TH Ranker\r\n                        </Typography>\r\n                    </div>\r\n                    {!isMobile && <div style={navBarItemStyle}>\r\n                        {\r\n                            navList.map(item => \r\n                                <Button \r\n                                    component={(props) => <NavLink to={item.url} exact activeStyle={buttonSelectedStyle} {...props} />} \r\n                                    color=\"inherit\" \r\n                                    style={{marginLeft:'10px',  }}\r\n                                >\r\n                                    {item.name}\r\n                                </Button>\r\n                            )\r\n                        }\r\n                    </div>}\r\n                </AppBar>\r\n                <Container>\r\n                    <Box pt={3}>{this.props.children}</Box>\r\n                </Container>\r\n                </>\r\n            }\r\n            </MediaQuery>\r\n        )\r\n            \r\n    }\r\n    private readonly toggleDrawer = () => {\r\n        this.setState(prevState => ({\r\n            opened: !prevState.opened\r\n        }))\r\n    }\r\n}","import { Button, Typography } from \"@material-ui/core\";\r\nimport { Whatshot } from \"@material-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { RootState } from \"../store/combineReducers\";\r\nimport { PlayerHomeCard } from \"./player-card\";\r\n\r\n\r\nfunction getSkeletons(count: number){\r\n    let skeletons = []\r\n    for(let i=0; i<count; i++){\r\n        skeletons.push(<PlayerHomeCard/>)\r\n    }\r\n    return skeletons\r\n}\r\n\r\n\r\nexport function Home(){\r\n    \r\n    const isMobile = useMediaQuery({maxWidth:'599px'})\r\n    const [playerCount, setPlayerCount] = useState(5)\r\n\r\n    const players = useSelector(\r\n        (state: RootState) => \r\n        state.players.players.slice(0, playerCount)\r\n    )\r\n    return(\r\n        <>\r\n            <div style={{display:'flex', justifyContent:'center'}}>\r\n                <div style={{alignSelf:'stretch'}}><Whatshot fontSize='large' style={{ color:'#2c387e'}}/></div>\r\n\r\n                    <Typography \r\n                        variant='h4' \r\n                        align='center'\r\n                        style={{\r\n                            color:'white', \r\n                            marginBottom:'20px', \r\n                            WebkitTextStroke:'1px', \r\n                            WebkitTextStrokeColor:'#3f51b5',\r\n                        }}\r\n                        >\r\n                        <b>TOP PLAYERS</b>\r\n                    </Typography>\r\n            </div>\r\n            <div \r\n                style={!isMobile ? {\r\n                    display:'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',\r\n                    gridGap:'20px'\r\n                }:\r\n                {\r\n                    display:'grid', \r\n                    gridGap:'20px'\r\n                }\r\n            }>\r\n                {\r\n                    players.length > 0 ? players.map(value =>\r\n                        <PlayerHomeCard player={value}/>\r\n                    ) : getSkeletons(playerCount)   \r\n                }\r\n            </div>\r\n            <div style={{textAlign:'center', margin:'20px'}}>\r\n                <Button \r\n                    variant='outlined' \r\n                    color='primary' \r\n                    onClick={() => {\r\n                        console.log(isMobile)\r\n                        setPlayerCount(playerCount+5)\r\n                    }}\r\n                    style={{width:'200px'}}\r\n                >\r\n                    Load More\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom';\r\nimport { Route } from 'react-router';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Ranker } from './components/ranker';\r\nimport playersService, { Player } from './services/player-service';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { updatePlayers, updatePlayersState } from './store/players/player-actions';\r\nimport { connect } from 'react-redux';\r\nimport $ from \"jquery\";\r\nimport { Progress } from './components/progress';\r\nimport { NavBar } from './components/navbar';\r\nimport tournamentsService from './services/tournament-service';\r\nimport { PlayersState } from './store/players/player-types';\r\nimport { Home } from './components/home';\r\n\r\ntype Props = ReturnType<typeof mapDispatchToProps> \r\n\r\nclass AppComponent extends Component<Props, {}> {\r\n  \r\n  componentDidMount(): void{\r\n    $.ajax('https://serene-crag-74633.herokuapp.com/all')\r\n      .then(res => {\r\n          const players:Player[] =  playersService.parseContent(res)\r\n          this.props.updatePlayersState({\r\n            prefScores: playersService.getPlayerScores(players),\r\n            players\r\n          })\r\n      })\r\n      .catch(() => {\r\n          console.log(\"error\")\r\n      })\r\n  }\r\n  \r\n  static displayName = AppComponent.name;\r\n  \r\n  render () {\r\n    return (\r\n      <HashRouter>\r\n        <NavBar>\r\n          <Route exact path='/' component={Home} />\r\n          <Route exact path='/ranker' component={Ranker} />\r\n          <Route exact path='/players' component={Progress} />\r\n        </NavBar>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>({\r\n  updatePlayersState: (playersState: PlayersState) => dispatch(updatePlayersState(playersState))\r\n});\r\n\r\nconst App = connect(null, mapDispatchToProps)(AppComponent)\r\nexport default App","import { Player } from \"../../services/player-service\";\r\nimport { PlayersActionTypes, PlayersState, UPDATE_PLAYERS, UPDATE_PLAYERS_STATE } from \"./player-types\";\r\n\r\nexport function updatePlayers(newPlayers: Player[]): PlayersActionTypes{\r\n    return {\r\n        type: UPDATE_PLAYERS,\r\n        payload: newPlayers\r\n    }\r\n}\r\nexport function updatePlayersState(playersState: PlayersState): PlayersActionTypes{\r\n    return {\r\n        type: UPDATE_PLAYERS_STATE,\r\n        payload: playersState\r\n    }\r\n}","import { Player } from \"../../services/player-service\";\r\n\r\nexport const UPDATE_PLAYERS = 'UPDATE_PLAYERS'\r\nexport const UPDATE_PLAYERS_STATE = 'UPDATE_PLAYERS_STATE'\r\n\r\nexport interface PlayersState {\r\n    players: Player[],\r\n    prefScores: number[]\r\n}\r\n\r\ninterface UpdatePlayersStateAction {\r\n    type: typeof UPDATE_PLAYERS_STATE\r\n    payload: PlayersState\r\n}\r\n\r\ninterface UpdatePlayersAction {\r\n    type: typeof UPDATE_PLAYERS\r\n    payload: Player[]\r\n}\r\n\r\nexport type PlayersActionTypes = \r\n    | UpdatePlayersStateAction\r\n    | UpdatePlayersAction","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { PlayersActionTypes, PlayersState, UPDATE_PLAYERS, UPDATE_PLAYERS_STATE } from \"./player-types\";\r\n\r\nconst initialState: PlayersState = {\r\n    players: [],\r\n    prefScores: []\r\n}\r\n\r\nexport function playersReducer(\r\n    state = initialState,\r\n    action: PlayersActionTypes\r\n\r\n): PlayersState {\r\n    switch(action.type){\r\n        case UPDATE_PLAYERS:\r\n            return{\r\n                ...state,\r\n                players: action.payload\r\n            }\r\n        case UPDATE_PLAYERS_STATE:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import { levelList } from \"../../data/scorecalc-data\";\r\nimport { RankerActionTypes, RankerState, UPDATE_RANKER_STATE } from \"./ranker-types\";\r\n\r\nconst initialState: RankerState = {\r\n    playersCompare: [],\r\n    selectedLevel: levelList[0].name,\r\n    bottomNavVal: 0\r\n}\r\n\r\nexport function rankerReducer(\r\n    state = initialState,\r\n    action: RankerActionTypes\r\n\r\n): RankerState {\r\n    switch(action.type){\r\n        case UPDATE_RANKER_STATE:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { playersReducer } from \"./players/player-reducers\";\r\nimport { rankerReducer } from \"./ranker/ranker-reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n    players: playersReducer,\r\n    ranker: rankerReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","import store from './createStore';\r\n\r\nexport default store;","import { createStore } from 'redux';\r\nimport reducer from './combineReducers';\r\n\r\nexport default createStore(reducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}