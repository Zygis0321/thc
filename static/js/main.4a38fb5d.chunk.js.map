{"version":3,"sources":["components/styles/playerlist.module.css","components/error-message.tsx","services/country-service.ts","components/player-card.tsx","components/home.tsx","components/navbar.tsx","data/scorecalc-data.ts","services/tournament-service.ts","services/color-service.ts","components/charts/players-chart.tsx","components/charts/career-chart-wrapper.tsx","components/charts/year-chart-wrapper.tsx","components/progress.tsx","services/player-service.ts","components/players-autocomplete.tsx","components/rankedplayers-list.tsx","components/ranker.tsx","store/ranker/ranker-actions.ts","store/ranker/ranker-types.ts","App.tsx","store/players/player-actions.ts","store/players/player-types.ts","serviceWorker.ts","store/players/player-reducers.ts","store/ranker/ranker-reducers.ts","store/combineReducers.ts","store/index.ts","store/createStore.ts","index.tsx"],"names":["module","exports","Alert","props","elevation","variant","ErrorMessage","Snackbar","open","show","severity","getCountry","nation","ret","countryCodes","find","country","fifa","undefined","name","alpha2code","a2","PlayerDetail","Typography","align","style","float","bold","value","color","text","PlayerContent","CardContent","homePage","paddingBottom","display","marginBottom","withFlag","alignSelf","marginRight","width","objectFit","boxShadow","alt","player","code","toLowerCase","margin","IconButton","ArrowForward","fontSize","club","rank","toString","points","PlayerSkeleton","Skeleton","height","PlayerHomeCard","history","useHistory","Card","CardActionArea","onClick","playerId","id","push","PlayerCard","isMobile","useMediaQuery","maxWidth","playersCompare","useSelector","state","ranker","marginLeft","justifyContent","alignItems","flexDirection","CardActions","Button","size","href","target","disabled","some","pathname","addPlayer","flex","Home","useState","playerCount","setPlayerCount","players","slice","Whatshot","WebkitTextStroke","WebkitTextStrokeColor","gridGap","gridTemplateColumns","length","map","count","skeletons","i","getSkeletons","textAlign","navBarItemStyle","buttonSelectedStyle","backgroundColor","navList","url","NavBar","children","opened","setOpened","toggleDrawer","Drawer","anchor","onClose","zIndex","position","src","left","bottom","Divider","List","item","ListItem","component","to","exact","activeStyle","button","ListItemText","primary","AppBar","paddingLeft","paddingRight","edge","cursor","Container","Box","pt","levelList","coefficient","winnerpoints","percentageNormalList","tournamentAge","percentage","percentageExceptionList","exceptionInterval","Date","UTC","tournamentsService","addYears","dt","n","dtt","setFullYear","getFullYear","getPointsByDate","tournaments","percentageList","datesToCheck","newDate","date","Math","round","ind","sort","a","b","getTime","best5","filter","best","sum","min","convertDateToYearString","toUTCString","convertDateToCareerString","interval","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","getYearChartData","score","getCareerChartData","scalePointsByDate","step","startRange","endRange","includeEnd","startTime","endTime","scalePointsByDateYear","scalePointsByDateCareer","offset","getMaxDate","getMinDate","getCareerChartDataArray","careerRange","density","playerPoints","startDate","endDate","dateOffset","dateInterval","currentDate","playerName","data","pointsNormal","getYearChartDataArray","yearRange","mainPlayerStartDate","mainPlayerEndDate","pointsException","getColorByName","red","green","blue","mod","x1","x2","x3","charCodeAt","PlayersChart","mainPlayerColor","this","series","playerSeries","index","type","Slider","sliderRange","onChange","event","newValue","onSliderChange","valueLabelDisplay","aria-labelledby","marks","sliderMin","max","sliderMax","overflow","strokeDasharray","dataKey","allowDuplicatedCategory","itemSorter","payload","wrapperStyle","contentStyle","whiteSpace","getPayload","chartData","index2","isAnimationActive","stroke","dot","strokeWidth","reverse","references","ref","x","Component","PlayersCareerChart","handleYearChange","setState","componentDidUpdate","playerPointsArray","prevProps","prevState","getYearRange","end","start","maxYear","PlayersYearChart","currentYear","ProgressComponent","comparePlayerPoints","playerUpdating","selectedPlayer","selectedComparePlayers","tabValue","showError","handleValueChange","handlePlayerChange","getPlayerPoints","then","mainPlayerPoints","handlePlayerCompareChange","reason","details","option","concat","valToAdd","Promise","resolve","reject","$","getJSON","res","catch","always","match","params","getPlayerValue","CircularProgress","container","spacing","xs","sm","md","Autocomplete","blurOnSelect","options","getOptionLabel","renderInput","TextField","label","filterOptions","createFilterOptions","limit","loading","multiple","Tabs","centered","indicatorColor","Tab","pointerEvents","getPlayerPointsArray","top","Progress","connect","playersService","rankPlayers","prefScores","lowestScore","newPoints","j","newRank","recalc","level","pos","p","valueSum","maxScore","content","stringArray","split","ln","Number","el","document","createElement","innerHTML","list","getElementsByClassName","cnt","indexOf","substr","Array","fill","PlayersAutoComplete","searchText","handleSearchChange","e","fullWidth","InputProps","startAdornment","InputAdornment","Search","endAdornment","Clear","dense","includes","from","key","handlePlayerToggle","secondary","ListItemSecondaryAction","Checkbox","checked","pl","pr","listItemStyle","marginTop","borderRadius","mobileListItemStyle","ratingUpStyle","fontWeight","ratingDownStyle","ratingConstantStyle","SortableItem","SortableElement","isTabletOrMobile","onMouseEnter","body","onMouseLeave","SortableList","SortableContainer","paddingTop","ResponsiveListItem","RankedPlayersList","onSortStart","onSortEnd","oldIndex","newIndex","reorder","shouldCancelStart","nearestViewportElement","useWindowAsScrollContainer","lockAxis","pressDelay","helperClass","styles","selected","minWidth","direction","mr","abs","justify","matches","playerRemoved","Remove","RankerComponent","levelName","levelFound","updateRankerState","rankerState","arrayMove","selectedLevel","forceAdd","playerAdded","ajax","items","handleClearAllClick","handleLevelChange","location","pb","bottomNavVal","FormControl","InputLabel","Select","MenuItem","startIcon","ClearAll","fontFamily","BottomNavigation","showLabels","BottomNavigationAction","icon","GroupAdd","Ranker","dispatch","AppComponent","parseContent","getPlayerScores","updatePlayersState","fixPlayers","path","displayName","App","playersState","Boolean","window","hostname","initialState","rootReducer","combineReducers","action","store","createStore","reducer","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.4a38fb5d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"playerlist_selected__3NSKn\"};","import React from \"react\";\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props: any) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nexport function ErrorMessage(props: {show: boolean}){\r\n\r\n    return(\r\n        <Snackbar open={props.show} >\r\n            <Alert severity=\"error\">\r\n                Failed to load data\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}","import countryCodes from '../data/countryCodes.json'\r\n\r\nexport interface CountryCode{\r\n    name: string; \r\n    alpha2code: string;\r\n}\r\n\r\nexport function getCountry(nation: string): CountryCode{\r\n    let ret = countryCodes.find(country => country.fifa===nation)\r\n    if(ret===undefined){\r\n        return {\r\n            name:\"Not Found\",\r\n            alpha2code:\"_empty\",\r\n        }\r\n    }\r\n    return {\r\n        name: ret.name,\r\n        alpha2code: ret.a2\r\n    }\r\n}","import { Button, CardActionArea, CardActions, CardContent, IconButton, Typography } from \"@material-ui/core\";\r\nimport Card from '@material-ui/core/Card';\r\nimport { ArrowForward } from \"@material-ui/icons\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport React from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { useHistory } from \"react-router\";\r\nimport { getCountry } from \"../services/country-service\";\r\nimport { Player } from \"../services/player-service\";\r\nimport Flag from 'react-world-flags'\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/combineReducers\";\r\n\r\ninterface OwnProps{\r\n    player: Player | null\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nfunction PlayerDetail(props: {text: string, value: string, bold?: boolean}){\r\n    return (\r\n        <>\r\n            <Typography align='right' style={{float:'right'}}>\r\n                {props.bold === true ? <b>{props.value}</b> : props.value}\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n                {props.text}\r\n            </Typography>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction PlayerContent(props: {player: Player, withFlag:boolean, homePage?:boolean}){\r\n    return(\r\n        <CardContent style={props.homePage===true ? undefined :{paddingBottom:4}}>\r\n            <div style={{display:'flex', marginBottom: props.homePage===true ? '0px':'12px'}}>\r\n                {props.withFlag && <Flag \r\n                    style={{alignSelf:'center', marginRight:'12px',width: props.homePage===true ? '60px':'90px',objectFit:'fill', boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',}}\r\n                    alt = {getCountry(props.player.nation).name}\r\n                    code={getCountry(props.player.nation).alpha2code.toLowerCase()}\r\n                />}\r\n                <Typography variant={props.homePage===true ? 'h6' : \"h5\"} align='center' style = {{margin:'auto'}} color={props.homePage===true?'textPrimary':\"secondary\"}>\r\n                    {props.player.name}\r\n                </Typography>\r\n                {props.homePage===true &&\r\n                    <IconButton >\r\n                        <ArrowForward fontSize='large'/>\r\n                    </IconButton>\r\n                }\r\n            </div>\r\n            {props.homePage!==true &&\r\n                <>\r\n                    <PlayerDetail text='Club' value={props.player.club} />\r\n                    <PlayerDetail text='Rank' value={props.player.rank.toString()} bold/>\r\n                    <PlayerDetail text='Points' value={props.player.points.toString()} bold/>\r\n                    <PlayerDetail text='Player Value' value={props.player.value.toString()}/>\r\n                </>\r\n            }\r\n            \r\n        </CardContent>\r\n    )\r\n}\r\nfunction PlayerSkeleton(){\r\n    return(\r\n        <CardContent >\r\n            <div style={{display:'flex'}}>\r\n                <div style={{alignSelf:'center'}}><Skeleton variant='rect' width={60} height={40} /></div>\r\n                <div style={{margin:'auto'}}><Skeleton variant='text' width='120px' height={30}/></div>\r\n                <div style={{alignSelf:'center'}}><IconButton><ArrowForward fontSize='large'/></IconButton></div>\r\n            </div>\r\n            \r\n        </CardContent>\r\n    )\r\n}\r\n\r\n\r\nexport function PlayerHomeCard(props: {player?: Player}){\r\n    let history = useHistory()\r\n    \r\n    function PlayerClicked(playerId?: string){\r\n        if(playerId===undefined)return\r\n        history.push(`/players/${playerId}`)\r\n    }\r\n    return(\r\n        <Card style = {{width:'100%', height:'100%'}}>\r\n            <CardActionArea onClick={() => PlayerClicked(props.player?.id)} >\r\n                {\r\n                    props.player === undefined ? <PlayerSkeleton/> :\r\n                    <PlayerContent player={props.player} withFlag homePage/>\r\n                }\r\n            </CardActionArea>\r\n        </Card>\r\n\r\n    )\r\n}\r\n\r\nexport default function PlayerCard(props: Props){\r\n    const isMobile = useMediaQuery({maxWidth: 959});\r\n    const history = useHistory()\r\n    const playersCompare = useSelector(\r\n        (state: RootState) => \r\n        state.ranker.playersCompare\r\n    )\r\n    return (\r\n        props.player === null ?\r\n        <Card style = {{ display:'flex', height: '230px', width:'100%', maxWidth:'650px', marginLeft:'auto', marginRight:'auto'}}>\r\n            <Typography style={{margin:'auto'}}>\r\n                No player selected\r\n            </Typography>\r\n        </Card>\r\n        :\r\n        <Card style = {{display:'flex',justifyContent:'flex-end', alignItems:'stretch',  maxWidth:'650px', marginLeft:'auto', marginRight:'auto', width:'100%'}}>\r\n                \r\n                    <div style={{display:'flex', flexDirection:'column', justifyContent:'space-between', width:'100%'}}>\r\n                        <PlayerContent player={props.player} withFlag={isMobile} />\r\n                        <CardActions>\r\n                            <Button \r\n                                size=\"small\" \r\n                                color=\"primary\"\r\n                                href =  {`https://stiga.trefik.cz/ithf/ranking/player.aspx?ID=${props.player.id}`}\r\n                                target = '_blank'\r\n                            >\r\n                                Learn More\r\n                            </Button>\r\n                            <Button \r\n                                size=\"small\" \r\n                                color=\"primary\"\r\n                                disabled={playersCompare.some(player => props.player?.id===player.id)}\r\n                                onClick = {() => {\r\n                                    history.push({\r\n                                        pathname: '/ranker',\r\n                                        state: {addPlayer: props.player}\r\n                                    })\r\n                                }}\r\n                            >\r\n                                Add to Ranker\r\n                            </Button>\r\n                        </CardActions>\r\n                    </div>\r\n            {!isMobile && <Flag \r\n                style={{width:'340px', flex:'0 0 340px', boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',}}\r\n                alt = {getCountry(props.player.nation).name}\r\n                code={getCountry(props.player.nation).alpha2code.toLowerCase()}\r\n            />}\r\n        </Card>\r\n    )\r\n}","import { Button, Typography } from \"@material-ui/core\";\r\nimport { Whatshot } from \"@material-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { RootState } from \"../store/combineReducers\";\r\nimport { PlayerHomeCard } from \"./player-card\";\r\n\r\n\r\nfunction getSkeletons(count: number){\r\n    let skeletons = []\r\n    for(let i=0; i<count; i++){\r\n        skeletons.push(<PlayerHomeCard/>)\r\n    }\r\n    return skeletons\r\n}\r\n\r\n\r\nexport function Home(){\r\n    \r\n    const isMobile = useMediaQuery({maxWidth:'599px'})\r\n    const [playerCount, setPlayerCount] = useState(6)\r\n\r\n    const players = useSelector(\r\n        (state: RootState) => \r\n        state.players.players.slice(0, playerCount)\r\n    )\r\n    return(\r\n        <>\r\n            <div style={{display:'flex', justifyContent:'center'}}>\r\n                <div style={{alignSelf:'stretch'}}><Whatshot fontSize='large' style={{ color:'#2c387e'}}/></div>\r\n\r\n                    <Typography \r\n                        variant='h4' \r\n                        align='center'\r\n                        style={{\r\n                            color:'white', \r\n                            marginBottom:'20px', \r\n                            WebkitTextStroke:'1px', \r\n                            WebkitTextStrokeColor:'#3f51b5',\r\n                        }}\r\n                        >\r\n                        <b>TOP PLAYERS</b>\r\n                    </Typography>\r\n            </div>\r\n            <div \r\n                style={!isMobile ? {\r\n                    display:'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',\r\n                    gridGap:'20px'\r\n                }:\r\n                {\r\n                    display:'grid', \r\n                    gridGap:'20px'\r\n                }\r\n            }>\r\n                {\r\n                    players.length > 0 ? players.map(value =>\r\n                        <PlayerHomeCard player={value}/>\r\n                    ) : getSkeletons(playerCount)   \r\n                }\r\n            </div>\r\n            <div style={{textAlign:'center', margin:'20px'}}>\r\n                <Button \r\n                    variant='outlined' \r\n                    color='primary' \r\n                    onClick={() => {\r\n                        setPlayerCount(playerCount+6)\r\n                    }}\r\n                    style={{width:'200px'}}\r\n                >\r\n                    Load More\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import { AppBar, Box, Button, Container, Divider, Drawer, IconButton, List, ListItem, ListItemText, Typography } from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CSS from 'csstype';\r\nimport React, { useState } from \"react\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport { NavLink, useHistory } from \"react-router-dom\";\r\n\r\nconst navBarItemStyle:CSS.Properties = {\r\n    margin:'10px',\r\n    alignSelf:'center'\r\n}\r\n\r\nconst buttonSelectedStyle:CSS.Properties = {\r\n    backgroundColor: '#dddddd'\r\n}\r\n\r\n\r\ninterface navItem{\r\n    name: string\r\n    url: string\r\n}\r\n\r\nconst navList: navItem[] = [\r\n    {\r\n        name: 'Home',\r\n        url: '/'\r\n    },\r\n    {\r\n        name: 'Players',\r\n        url: '/players'\r\n    },\r\n    {\r\n        name: 'Ranker',\r\n        url: '/ranker'\r\n    },\r\n\r\n]\r\n\r\n\r\nexport const NavBar: React.FC = ({children}) => {\r\n\r\n    let history = useHistory()\r\n    const [opened, setOpened] = useState(false)\r\n\r\n    function toggleDrawer(){\r\n        setOpened(!opened)\r\n    }\r\n\r\n    return(\r\n        <MediaQuery maxWidth={599}>\r\n            {(isMobile) =>\r\n            <>\r\n            {isMobile && <>\r\n                <Drawer anchor='left' open={opened} onClose={() => toggleDrawer()} style={{zIndex:999999}}>\r\n                    <div style={{position:'relative', margin:6}}>\r\n                        <img width={100} height={100} src='/logo256.png' alt='logo'/>\r\n                        <Typography variant=\"h6\"  style={{position:'absolute', left:70, bottom:0}}>\r\n                            TH RANKER\r\n                        </Typography>\r\n                    </div>\r\n                    <Divider/>\r\n                    <List style={{width:'250px'}}>\r\n                        {\r\n                            navList.map(item => \r\n                                <ListItem component={(props) => <NavLink to={item.url} exact={item.url==='/'} activeStyle={buttonSelectedStyle} {...props}/>} onClick={() => toggleDrawer()} button>\r\n                                    <ListItemText primary={item.name}/>\r\n                                </ListItem>\r\n                            )\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n                </>\r\n            }\r\n            <AppBar position='sticky' color='default' style={{justifyContent:'space-between', flexDirection:'row', height:'55px', paddingLeft:!isMobile ? 24 : undefined, paddingRight:24}} >\r\n                <div style={{display:'flex'}}>\r\n                    {isMobile &&\r\n                        <IconButton \r\n                            edge=\"start\" \r\n                            //size='small' \r\n                            color=\"inherit\" \r\n                            onClick={() => toggleDrawer()} \r\n                            style={{...navBarItemStyle, marginLeft:'10px'}}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    }\r\n\r\n                    \r\n                    <div onClick={() => {history.push('/')}} style={{display:'flex', cursor:'pointer'}}>\r\n                        {!isMobile && <img width={45} height={45} style={{alignSelf:'center'}} src='/logo256.png' alt='logo'/>}\r\n                        <Typography variant=\"h6\" style={{alignSelf:'center', marginLeft:5}}>\r\n                            TH RANKER\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n                {!isMobile && <div style={navBarItemStyle}>\r\n                    {\r\n                        navList.map(item => \r\n                            <Button \r\n                                component={(props) => <NavLink to={item.url} exact={item.url==='/'} activeStyle={buttonSelectedStyle} {...props} />} \r\n                                color=\"inherit\" \r\n                                style={{marginLeft:'10px'}}\r\n                            >\r\n                                {item.name}\r\n                            </Button>\r\n                        )\r\n                    }\r\n                </div>}\r\n            </AppBar>\r\n            <Container>\r\n                <Box pt={3}>{children}</Box>\r\n            </Container>\r\n            </>\r\n        }\r\n        </MediaQuery>\r\n    )\r\n} \r\n","export interface Level {\r\n    name: string,\r\n    coefficient: number,\r\n    winnerpoints: number\r\n}\r\n\r\nexport const levelList: Level[] = [\r\n    {name: \"Level 1 (World)\", coefficient: 0.96, winnerpoints: 1000},\r\n    {name: \"Level 1 (Continental)\", coefficient: 0.96, winnerpoints: 600},\r\n    {name: \"Level 2\", coefficient: 0.92, winnerpoints: 500},\r\n    {name: \"Level 3\", coefficient: 0.89, winnerpoints: 100},\r\n    {name: \"Level 4\", coefficient: 0.83, winnerpoints: 70},\r\n    {name: \"Level 5\", coefficient: 0.60, winnerpoints: 40},\r\n    {name: \"Level 6\", coefficient: 0.40, winnerpoints: 20},\r\n]\r\n\r\nexport interface PointsPercentage {\r\n    tournamentAge: number,\r\n    percentage: number\r\n}\r\n\r\nexport const percentageNormalList: PointsPercentage[] = [\r\n    {\r\n        tournamentAge: 0,\r\n        percentage: 1\r\n    },\r\n    {\r\n        tournamentAge: 2,\r\n        percentage: 0.8\r\n    },\r\n    {\r\n        tournamentAge: 3,\r\n        percentage: 0.6\r\n    },\r\n    {\r\n        tournamentAge: 4,\r\n        percentage: 0.4\r\n    },\r\n    {\r\n        tournamentAge: 5,\r\n        percentage: 0.2\r\n    },\r\n    {\r\n        tournamentAge: 6,\r\n        percentage: 0\r\n    },\r\n]\r\nexport const percentageExceptionList: PointsPercentage[] = [\r\n    {\r\n        tournamentAge: 0,\r\n        percentage: 1\r\n    },\r\n    {\r\n        tournamentAge: 3,\r\n        percentage: 0.6\r\n    },\r\n    {\r\n        tournamentAge: 4,\r\n        percentage: 0.4\r\n    },\r\n    {\r\n        tournamentAge: 5,\r\n        percentage: 0.2\r\n    },\r\n    {\r\n        tournamentAge: 6,\r\n        percentage: 0\r\n    },\r\n]\r\nexport const exceptionInterval: Date[] = [\r\n    new Date(Date.UTC(2020, 9, 5)),\r\n    new Date(Date.UTC(2021, 6, 1))\r\n]","import { PlayerSeries } from \"../components/charts/players-chart\";\r\nimport {  exceptionInterval, PointsPercentage } from \"../data/scorecalc-data\";\r\nimport { Player } from \"./player-service\";\r\n\r\nexport interface Tournament{\r\n    date: Date,\r\n    name: string,\r\n    series: string[],\r\n    city: string,\r\n    pos: number,\r\n    points: number\r\n}\r\n\r\nexport interface PlayerWithTournaments extends Player{\r\n    tournaments: PointsByDate[]\r\n}\r\n\r\nexport interface PointsByDate {\r\n    date: Date,\r\n    points: number\r\n}\r\n\r\ninterface PointsByDatePrecalc extends PointsByDate {\r\n    ind: number\r\n}\r\n\r\nexport interface ChartData {\r\n    date: string,\r\n    points: number,\r\n}\r\n\r\nexport interface PlayerPoints {\r\n    pointsNormal: PointsByDate[]\r\n    pointsException: PointsByDate[]\r\n    playerName: string\r\n}\r\n\r\n\r\n\r\nclass TournamentsService {\r\n\r\n    private readonly addYears = (dt: Date, n: number): Date => {\r\n        let dtt = new Date(dt)\r\n        return new Date(dtt.setFullYear(dtt.getFullYear() + n))\r\n    }\r\n\r\n    getPointsByDate = (tournaments: Tournament[], percentageList: PointsPercentage[]): PointsByDate[] => {\r\n        \r\n        let datesToCheck: PointsByDatePrecalc[] = []\r\n        for(let i=0; i<tournaments.length; i++) {\r\n            for(let percentage of percentageList){\r\n                let newDate: Date = this.addYears(tournaments[i].date, percentage.tournamentAge)\r\n\r\n                datesToCheck.push({\r\n                    date: newDate,\r\n                    points: Math.round(tournaments[i].points * percentage.percentage),\r\n                    ind: i\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        datesToCheck = datesToCheck.sort((a, b) => {\r\n            return new Date(a.date).getTime() - new Date(b.date).getTime()\r\n        })\r\n        \r\n        let best5: PointsByDatePrecalc[] = []\r\n        let ret:PointsByDate[] = []\r\n\r\n        for(let date of datesToCheck){\r\n            best5 = best5.filter((best) => best.ind !== date.ind)\r\n            best5.push(date)\r\n            best5 = best5.sort((a, b) => b.points - a.points)\r\n            let sum = 0\r\n\r\n            for(let i=0; i< Math.min(best5.length, 5); i++){\r\n                sum += best5[i].points;\r\n            }\r\n            ret.push({\r\n                date: date.date,\r\n                points: sum\r\n            })\r\n        }\r\n\r\n\r\n        return ret\r\n    }\r\n\r\n    convertDateToYearString = (date: Date): string  => {\r\n        return date.toUTCString().slice(5, 16);\r\n    }\r\n    convertDateToCareerString = (date: Date, interval: number): string  => {\r\n        let year = date.getUTCFullYear()-1970\r\n        let month = date.getUTCMonth()\r\n        let day = date.getUTCDate()\r\n        return `${year} yr${year===1?'':'s'}. ${month} mo${month===1?'':'s'}.${interval < 4 ? ` ${day} d.`:''}`\r\n    }\r\n\r\n    getYearChartData = (date: number, score: number): ChartData => {\r\n        return{\r\n            date: this.convertDateToYearString(new Date(date)),\r\n            points: score\r\n        }\r\n\r\n    }\r\n    getCareerChartData = (date: number, score: number, interval:number): ChartData => {\r\n        return{\r\n            date: this.convertDateToCareerString(new Date(date), interval),\r\n            points: score\r\n        }\r\n\r\n    }\r\n\r\n    scalePointsByDate = (points: PointsByDate[], step: number, startRange: Date, endRange: Date, includeEnd?: boolean): {date:number, score:number}[] => {\r\n        let startTime = startRange.getTime();\r\n        let endTime = endRange.getTime();\r\n\r\n        let ind = 0\r\n        let score = 0\r\n        let ret:{date:number, score:number}[] = []\r\n        for(let i=startTime; i<endTime; i+=step){\r\n            while(ind < points.length && points[ind].date.getTime() <= i){\r\n                score = points[ind].points\r\n                ind++\r\n            }\r\n            ret.push({date:i, score})\r\n        }\r\n        if(includeEnd===true){\r\n            while(ind < points.length && points[ind].date.getTime() <= endTime){\r\n                score = points[ind].points\r\n                ind++\r\n            }\r\n            ret.push({date:endTime, score})\r\n        }\r\n\r\n        return ret\r\n    }\r\n\r\n    scalePointsByDateYear = (\r\n        points: PointsByDate[], \r\n        step: number, \r\n        startRange: Date, \r\n        endRange: Date\r\n    ): ChartData[] => {\r\n        let ret = this.scalePointsByDate(points, step, startRange, endRange, true);\r\n        return ret.map(value => this.getYearChartData(value.date, value.score))\r\n    }\r\n\r\n    scalePointsByDateCareer = (\r\n        points: PointsByDate[], \r\n        step: number, \r\n        startRange: Date, \r\n        endRange: Date, \r\n        offset:number, \r\n        interval: number\r\n    ): ChartData[] => {\r\n        let ret = this.scalePointsByDate(points, step, startRange, endRange);\r\n        return ret.map(value => this.getCareerChartData(value.date-offset, value.score, interval))\r\n    }\r\n\r\n\r\n\r\n    getMaxDate = (a: Date, b:Date): Date=>{\r\n        if(a>b)return a\r\n        return b\r\n    }\r\n    getMinDate = (a: Date, b:Date): Date => {\r\n        if(a<b)return a\r\n        return b\r\n    }\r\n\r\n    getCareerChartDataArray = (\r\n        careerRange: number[],\r\n        density: number,\r\n        \r\n        playerPoints:PlayerPoints[]\r\n    ): PlayerSeries[] => {\r\n\r\n        let startDate:Date = new Date(Date.UTC(careerRange[0], 0))\r\n        let endDate:Date = new Date(Date.UTC(careerRange[1], 0))\r\n        let dateOffset = startDate.getTime() - new Date(Date.UTC(0,0)).getTime()\r\n\r\n        let ret:PlayerSeries[] = []\r\n        let dateInterval = endDate.getTime() - startDate.getTime()\r\n        let step: number = dateInterval / density\r\n\r\n        let currentDate = new Date()\r\n\r\n        for(let player of playerPoints){\r\n             \r\n            ret.push({\r\n                playerName: player.playerName,\r\n                data: [this.scalePointsByDateCareer(\r\n                    player.pointsNormal,\r\n                    step,\r\n                    new Date(player.pointsNormal[0].date.getTime()+dateOffset),\r\n                    new Date(Math.min(currentDate.getTime(), player.pointsNormal[0].date.getTime()+dateInterval+dateOffset)),\r\n                    player.pointsNormal[0].date.getTime(),\r\n                    careerRange[1]-careerRange[0]\r\n                )]\r\n            })\r\n        }\r\n        return ret\r\n    }\r\n\r\n    getYearChartDataArray = (\r\n        yearRange: number[], \r\n        density: number, \r\n\r\n        playerPoints:PlayerPoints,\r\n        mainPlayerStartDate: Date,\r\n        mainPlayerEndDate: Date\r\n    ): ChartData[][] => {\r\n\r\n        //Year might start earlier than first tournament\r\n        let startDate: Date = this.getMaxDate(\r\n            new Date(Date.UTC(yearRange[0], 0)), \r\n            mainPlayerStartDate\r\n        )\r\n        let endDate: Date = this.getMinDate(\r\n            new Date(Date.UTC(yearRange[1], 0)), \r\n            mainPlayerEndDate\r\n        )\r\n        let step: number = (endDate.getTime() - startDate.getTime()) / density\r\n\r\n        let res1: ChartData[] = startDate < exceptionInterval[0] ? \r\n        this.scalePointsByDateYear(\r\n            playerPoints.pointsNormal,\r\n            step, \r\n            startDate, \r\n            this.getMinDate( exceptionInterval[0], endDate)\r\n        ) : []\r\n        let res2: ChartData[] = endDate > exceptionInterval[0] && startDate < exceptionInterval[1]  ? \r\n        this.scalePointsByDateYear(\r\n            playerPoints.pointsException,\r\n            step, \r\n            this.getMaxDate(exceptionInterval[0], startDate), \r\n            this.getMinDate(exceptionInterval[1], endDate)\r\n        ) : []\r\n        let res3: ChartData[] = endDate > exceptionInterval[1] ? \r\n        this.scalePointsByDateYear(\r\n            playerPoints.pointsNormal,\r\n            step, \r\n            this.getMaxDate(startDate, exceptionInterval[1]),\r\n            endDate\r\n        ) : []\r\n        return [res1, res2, res3];\r\n    }\r\n}\r\n\r\nconst tournamentsService = new TournamentsService();\r\nexport default tournamentsService","export function getColorByName(name: string):string{\r\n    let red:number=213874;\r\n    let green:number=736452;\r\n    let blue:number=432654;\r\n    let mod:number=1000000007\r\n    let p1 = 1242;\r\n    let p2 = 5432;\r\n    let p3 = 1435;\r\n    let x1 = 1;\r\n    let x2 = 1;\r\n    let x3 = 1;\r\n    for(let i=0; i<name.length; i++){\r\n        \r\n        red+=name.charCodeAt(i)*x1\r\n        green+=name.charCodeAt(i)*x2\r\n        blue+=name.charCodeAt(i)*x3\r\n\r\n        red%=mod\r\n        green%=mod\r\n        blue%=mod\r\n\r\n        x1=x1*p1%mod\r\n        x2=x2*p2%mod\r\n        x3=x3*p3%mod\r\n    }\r\n\r\n    red= 30 + red%150\r\n    green= 30 + green%150\r\n    blue= 205 + blue%50\r\n    return `rgb(${red},${green},${blue})`\r\n\r\n}","import { Slider, Typography } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport { CartesianGrid, Legend, LegendPayload, Line, LineChart, ReferenceLine, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\r\nimport { getColorByName } from \"../../services/color-service\";\r\nimport { ChartData } from \"../../services/tournament-service\";\r\n\r\n\r\nexport interface PlayerSeries{\r\n    playerName: string\r\n    data: ChartData[][]\r\n}\r\n\r\ninterface OwnProps{\r\n\r\n    sliderMin:number\r\n    sliderMax:number\r\n    sliderRange: number[]\r\n    onSliderChange:(newValue: number | number[]) => void\r\n    \r\n    references:string[]\r\n    series: PlayerSeries[]\r\n\r\n\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class PlayersChart extends Component<Props, {}>{\r\n    \r\n    public readonly mainPlayerColor: string = \"#0004d8\"\r\n\r\n    \r\n    \r\n    getPayload(): LegendPayload[]{\r\n        return this.props.series.map((playerSeries, index) =>\r\n            ( {\r\n                value: playerSeries.playerName,\r\n                type: \"line\",\r\n                id:\"index\",\r\n                color: index===0 ? this.mainPlayerColor : getColorByName(playerSeries.playerName) \r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n            <>\r\n                <div style={{paddingLeft:'10px', paddingRight:'10px'}}>\r\n                <Typography>\r\n                    Year Range\r\n                </Typography>\r\n                <Slider\r\n                    color = \"secondary\"\r\n                    value = {this.props.sliderRange}\r\n                    onChange={(event:any, newValue: number | number[]) => this.props.onSliderChange(newValue)}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                    marks\r\n                    step = {1}\r\n                    min = {this.props.sliderMin}\r\n                    max = {this.props.sliderMax}\r\n                />\r\n                </div>\r\n                <MediaQuery maxWidth='599px'>{\r\n                    (isMobile) =>\r\n                <div style={{ width: '100%', height:isMobile ? 400:500, overflow:'hidden' }}>\r\n                    <ResponsiveContainer>\r\n                        {this.props.series.length && this.props.series[0].data.length ?\r\n\r\n                        <LineChart>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <YAxis width={40}/>\r\n                            <XAxis dataKey=\"date\"   allowDuplicatedCategory={false}/>\r\n                            <Tooltip itemSorter={(item) => -item.payload.points} wrapperStyle={{maxWidth:'calc(100% - 50px)'}} contentStyle={{whiteSpace:'normal'}}/>\r\n                            <Legend  payload = {this.getPayload()} />\r\n\r\n                            {this.props.series.map((playerSeries, index) => playerSeries.data.map((chartData, index2) => \r\n                                <Line \r\n                                    isAnimationActive = {false}\r\n                                    name={index2 === 1 ? playerSeries.playerName+ \" (New Rules)\" :\r\n                                            playerSeries.playerName\r\n                                        } \r\n                                    type=\"monotone\" \r\n                                    dataKey=\"points\" \r\n                                    data={chartData} \r\n                                    stroke={index===0 ? this.mainPlayerColor : getColorByName(playerSeries.playerName)} \r\n                                    dot={false} \r\n                                    strokeWidth = {index===0? 2.5 : 1.7}\r\n                                    \r\n                                />\r\n                            )).reverse()}\r\n\r\n                            {this.props.references.map(ref => <ReferenceLine x={ref} stroke=\"#f50057\"/>)}\r\n                        </LineChart>\r\n                        :\r\n                        <LineChart>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <YAxis width={40}/>\r\n                            <XAxis/>\r\n                            <Legend/>\r\n                        </LineChart>\r\n                        }\r\n                    </ResponsiveContainer>\r\n                </div>}\r\n                </MediaQuery>\r\n            </>\r\n        )\r\n    }\r\n    \r\n\r\n\r\n}","import React, { Component } from \"react\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport tournamentsService, { PlayerPoints } from \"../../services/tournament-service\";\r\nimport { PlayersChart } from \"./players-chart\";\r\n\r\n\r\n\r\ninterface OwnProps{\r\n    playerPointsArray: PlayerPoints[]\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\ninterface State{\r\n    yearRange?: number[]\r\n}\r\n\r\n\r\nexport class PlayersCareerChart extends Component<Props, State>{\r\n    \r\n    private currentDate = tournamentsService.getMaxDate(new Date(Date.UTC(2020,0)), new Date())\r\n    public readonly state:State = {\r\n    }\r\n    componentDidMount(){\r\n        this.componentDidUpdate({playerPointsArray:[]})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props){\r\n        if(this.props.playerPointsArray.length &&\r\n            (!prevProps.playerPointsArray.length || prevProps.playerPointsArray !== this.props.playerPointsArray)){\r\n            \r\n            if(!prevProps.playerPointsArray.length || prevProps.playerPointsArray[0].pointsNormal !== this.props.playerPointsArray[0].pointsNormal){\r\n                this.setState({\r\n                    yearRange: [this.getYearRange().start, this.getYearRange().end]\r\n                })\r\n            }\r\n            else{\r\n                this.setState((prevState) => ({\r\n                    yearRange: [\r\n                        Math.min(  this.getYearRange().end, Math.max(this.getYearRange().start, prevState.yearRange ? prevState.yearRange[0] : 0)),\r\n                        Math.max(this.getYearRange().start, Math.min( this.getYearRange().end, prevState.yearRange ? prevState.yearRange[1] : 100000))\r\n                    ]\r\n                }));                \r\n            }\r\n\r\n\r\n        }\r\n    }\r\n\r\n    getYearRange():  {start:number, end:number}{\r\n        if(this.props.playerPointsArray.length===0 || this.props.playerPointsArray[0].pointsNormal.length === 0){\r\n            return {start: 0, end: 10}\r\n        }\r\n        let maxYear = 0;\r\n        for(let playerPoints of this.props.playerPointsArray){\r\n            maxYear = Math.max(maxYear, \r\n                new Date(tournamentsService.getMinDate(this.currentDate, \r\n                    playerPoints.pointsNormal[playerPoints.pointsNormal.length-1].date).getTime()\r\n                    - playerPoints.pointsNormal[0].date.getTime()).getFullYear() - 1970 + 1\r\n            )\r\n        }\r\n        return {\r\n            start: 0,\r\n            end: maxYear,\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <MediaQuery maxWidth='599px'>{\r\n                (isMobile) =>\r\n                <PlayersChart\r\n                    sliderMin = {this.getYearRange().start}\r\n                    sliderMax = {this.getYearRange().end}\r\n                    sliderRange = {this.state.yearRange ? this.state.yearRange : [this.getYearRange().start, this.getYearRange().end]}\r\n                    onSliderChange = {this.handleYearChange}\r\n                    references = {[]}\r\n                    series = {this.props.playerPointsArray.length && this.props.playerPointsArray[0].pointsNormal.length && this.state.yearRange ?\r\n                        tournamentsService.getCareerChartDataArray(\r\n                            this.state.yearRange,\r\n                            isMobile ? 20 : 40,\r\n                            this.props.playerPointsArray,\r\n                        )\r\n                        :\r\n                        [] }\r\n                />\r\n            }\r\n            </MediaQuery>\r\n        )\r\n    }\r\n    \r\n    private readonly handleYearChange = (newValue: number | number[]) => {\r\n        this.setState({yearRange: newValue as number[]});\r\n    };\r\n\r\n\r\n}","import React, { Component } from \"react\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport { exceptionInterval } from \"../../data/scorecalc-data\";\r\nimport tournamentsService, { PlayerPoints } from \"../../services/tournament-service\";\r\nimport { PlayersChart } from \"./players-chart\";\r\n\r\n\r\n\r\ninterface OwnProps{\r\n    playerPointsArray: PlayerPoints[]\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\ninterface State{\r\n    yearRange?: number[]\r\n}\r\n\r\n\r\nexport class PlayersYearChart extends Component<Props, State>{\r\n    \r\n    public readonly state:State = {\r\n    }\r\n\r\n    private currentYear = Math.max(new Date().getFullYear(), 2020)\r\n    componentDidMount(){\r\n        this.componentDidUpdate({playerPointsArray:[]})\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props){\r\n\r\n        if(this.props.playerPointsArray.length &&\r\n            (!prevProps.playerPointsArray.length || prevProps.playerPointsArray[0].pointsNormal !== this.props.playerPointsArray[0].pointsNormal)){\r\n            this.setState((prevState) => ({\r\n                yearRange: [\r\n                    Math.min(  Math.min(this.getYearRange().end, this.currentYear + 1), Math.max(this.getYearRange().start, prevState.yearRange === undefined ? 0 : prevState.yearRange[0])),\r\n                    Math.max(this.getYearRange().start, Math.min( Math.min(this.getYearRange().end, this.currentYear + 1), prevState.yearRange === undefined ? 1000000 : prevState.yearRange[1]))\r\n                ]\r\n            }));\r\n        }\r\n    }\r\n\r\n    getYearRange():  {start:number, end:number}{\r\n        if(this.props.playerPointsArray.length===0 || this.props.playerPointsArray[0].pointsNormal.length === 0){\r\n            return {start: 2000, end: this.currentYear + 7}\r\n        }\r\n        return {\r\n            start: this.props.playerPointsArray[0].pointsNormal[0].date.getUTCFullYear(),\r\n            end: this.props.playerPointsArray[0].pointsNormal[this.props.playerPointsArray[0].pointsNormal.length-1].date.getUTCFullYear() + 1,\r\n        }\r\n    }\r\n    \r\n    \r\n\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n            <MediaQuery maxWidth='599px'>{\r\n                (isMobile) =>\r\n                <PlayersChart\r\n                    sliderMin = {this.getYearRange().start}\r\n                    sliderMax = {this.getYearRange().end}\r\n                    sliderRange = {this.state.yearRange === undefined ? [2000, this.currentYear] : this.state.yearRange}\r\n                    onSliderChange = {this.handleYearChange}\r\n                    references = {exceptionInterval.map(interval => tournamentsService.convertDateToYearString(interval))}\r\n                    series = {this.props.playerPointsArray.map(playerPoints => ({\r\n                        playerName:playerPoints.playerName, \r\n                        data: this.props.playerPointsArray[0].pointsNormal.length && this.state.yearRange ?\r\n                        tournamentsService.getYearChartDataArray(\r\n                            this.state.yearRange,\r\n                            isMobile ? 20 : 40,\r\n                            playerPoints,\r\n                            this.props.playerPointsArray[0].pointsNormal[0].date,\r\n                            this.props.playerPointsArray[0].pointsNormal[this.props.playerPointsArray[0].pointsNormal.length - 1].date\r\n                        )\r\n                        :\r\n                        []\r\n                    })) }\r\n                />\r\n            }\r\n            </MediaQuery>\r\n        )\r\n    }\r\n    \r\n    private readonly handleYearChange = (newValue: number | number[]) => {\r\n        this.setState({yearRange: newValue as number[]});\r\n    };\r\n\r\n\r\n}","import { CircularProgress, Tab, Tabs, TextField, Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport Autocomplete, { AutocompleteChangeDetails, AutocompleteChangeReason, createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport $ from \"jquery\";\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MediaQuery from 'react-responsive';\r\nimport { RouteComponentProps } from 'react-router';\r\nimport { percentageExceptionList, percentageNormalList } from '../data/scorecalc-data';\r\nimport { Player } from '../services/player-service';\r\nimport tournamentsService, { PlayerPoints } from '../services/tournament-service';\r\nimport { RootState } from '../store/combineReducers';\r\nimport { PlayersCareerChart } from './charts/career-chart-wrapper';\r\nimport { PlayersYearChart } from './charts/year-chart-wrapper';\r\nimport { ErrorMessage } from './error-message';\r\nimport PlayerCard from './player-card';\r\n\r\ninterface Params{\r\n    id: string\r\n}\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & RouteComponentProps<Params>\r\n\r\ninterface PlayerPointsWithId extends PlayerPoints{\r\n    id: string\r\n}\r\n\r\ninterface State{\r\n\r\n    mainPlayerPoints?: PlayerPoints,\r\n    comparePlayerPoints: PlayerPointsWithId[]   \r\n    \r\n    playerUpdating: number\r\n    selectedPlayer: Player | null\r\n    selectedComparePlayers: Player[]\r\n\r\n    tabValue: number\r\n\r\n    showError: boolean\r\n}\r\n\r\nexport class ProgressComponent extends Component<Props, State>{\r\n\r\n    public readonly state:State = {\r\n        comparePlayerPoints: [],\r\n        \r\n        playerUpdating: 0,\r\n        selectedPlayer: null,\r\n        selectedComparePlayers: [],\r\n        tabValue: 0,\r\n\r\n        showError: false\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.match.params.id !== undefined && this.props.players.length){\r\n            this.handlePlayerChange(undefined, this.getPlayerValue())\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props){\r\n        if(prevProps.players.length !== this.props.players.length && this.props.match.params.id !== undefined ||\r\n           prevProps.match.params.id !== this.props.match.params.id && this.props.players.length){\r\n            this.handlePlayerChange(undefined, this.getPlayerValue())\r\n        }\r\n    }\r\n\r\n\r\n    getPlayerValue(): Player | null{\r\n        let player = this.props.players.find(player => player.id === this.props.match.params.id)\r\n        if(player === undefined){\r\n            return null\r\n        }\r\n\r\n        return player\r\n    }\r\n\r\n    getPlayerPointsArray(): PlayerPoints[]{\r\n        if(this.state.mainPlayerPoints !== undefined ){\r\n            return [ this.state.mainPlayerPoints ].concat(this.state.comparePlayerPoints)\r\n        }\r\n        return []\r\n    }\r\n    \r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <>\r\n            {(this.props.match.params.id !== undefined && this.props.players.length === 0) \r\n            ? \r\n            <div style={{\r\n                height:'calc(100vh - 100px)',\r\n                display:'flex', \r\n                justifyContent:\"center\", \r\n                alignItems:'center'}}\r\n            >\r\n                <CircularProgress style = {{alignSelf:'center'}}/>\r\n            </div>\r\n            :\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={5} md={4}>\r\n                        <Grid container spacing={3}>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Autocomplete\r\n                                blurOnSelect\r\n                                options = {this.props.players}\r\n                                getOptionLabel = {(option) => option.name}\r\n                                value = {this.state.selectedPlayer}\r\n                                renderInput = {(params) => \r\n                                    <TextField {...params} label=\"Select a player\" variant = \"outlined\" />\r\n                                }\r\n                                filterOptions = {createFilterOptions({\r\n                                    limit: 100\r\n                                })}\r\n                                onChange = {this.handleValueChange}\r\n                                loading = {this.props.players.length === 0}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Autocomplete\r\n                                multiple\r\n                                blurOnSelect\r\n                                options = {this.props.players}\r\n                                getOptionLabel = {(option) => option.name}\r\n                                renderInput = {(params) => \r\n                                    <TextField {...params} label=\"Select players to compare\" />\r\n                                }\r\n                                filterOptions = {createFilterOptions({\r\n                                    limit: 100\r\n                                })}\r\n                                onChange = {this.handlePlayerCompareChange}\r\n                                loading = {this.props.players.length === 0}\r\n                            />\r\n                        </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs sm md>\r\n                        <PlayerCard player={this.state.selectedPlayer}/>\r\n                    </Grid>\r\n                    <Grid item xs = {12}>\r\n                    {/* <Divider/> */}\r\n                        {/* <AppBar position='static' color='transparent' style={{margin:12}}> */}\r\n                        <Tabs\r\n                            value = {this.state.tabValue}\r\n                            onChange = {(event: any, newValue:number) => {this.setState({tabValue:newValue})}}\r\n                            centered\r\n                            style = {{marginBottom:\"24px\"}}\r\n                            indicatorColor='primary'\r\n                        >\r\n                            <Tab label=\"Career Chart\"/>\r\n                            <Tab label=\"Date Chart\"/>\r\n                        </Tabs>\r\n                        {/* </AppBar> */}\r\n                        <MediaQuery maxWidth={599}>\r\n                        {(isMobile) =>\r\n                        <div style={{position: \"relative\"}}>\r\n                            {\r\n                                <div style={(this.state.playerUpdating || this.state.mainPlayerPoints === undefined) ? {filter:\"blur(5px)\", pointerEvents:'none'} : undefined }>\r\n                                    \r\n                                    {this.state.tabValue === 1 ?\r\n                                        <PlayersYearChart \r\n                                            playerPointsArray = {this.getPlayerPointsArray()}\r\n                                        />\r\n                                        :\r\n                                        <PlayersCareerChart \r\n                                            playerPointsArray = {this.getPlayerPointsArray()}\r\n                                        />\r\n                                    }\r\n                                </div>\r\n                            }\r\n                            {\r\n                                (this.state.playerUpdating || this.state.mainPlayerPoints === undefined) && \r\n                                <div style={{\r\n                                    position:\"absolute\", \r\n                                    width:\"100%\", \r\n                                    height:isMobile?\"400px\":\"500px\", \r\n                                    top:0, \r\n                                    left:0, \r\n                                    display:'flex', \r\n                                    justifyContent:\"center\", \r\n                                    alignItems:'center'\r\n                                }}>\r\n                                    {this.state.playerUpdating && this.state.selectedPlayer !== null ?\r\n\r\n                                        <CircularProgress  />\r\n                                        :\r\n                                        <Typography>\r\n                                            Select a player to load chart\r\n                                        </Typography>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        }\r\n                        </MediaQuery>\r\n                    </Grid>\r\n                </Grid>}\r\n                <ErrorMessage show={this.state.showError}/>\r\n                </>\r\n        )\r\n\r\n    }\r\n\r\n    \r\n    private readonly handleValueChange = (event: any, newValue: Player|null) => {\r\n        if(newValue === null){\r\n            this.props.history.push(`/players`)\r\n        }\r\n        else{\r\n            this.props.history.push(`/players/${newValue.id}`)\r\n        }\r\n    }\r\n    private readonly handlePlayerChange = (event: any, newValue: Player|null) =>{\r\n        this.setState({selectedPlayer: newValue})\r\n        this.getPlayerPoints(newValue).then((value) => {\r\n            if(this.state.selectedPlayer?.id === newValue?.id){\r\n                this.setState({\r\n                    mainPlayerPoints: value\r\n                })                \r\n            }\r\n\r\n            \r\n        })\r\n    }\r\n    private readonly handlePlayerCompareChange = (\r\n        event: any, \r\n        newValue: Player[], \r\n        reason: AutocompleteChangeReason, \r\n        details: AutocompleteChangeDetails<Player> | undefined\r\n    ) =>{\r\n        //this.setState({playerName2: newValue?.name})\r\n        if(reason === \"clear\"){\r\n            this.setState({\r\n                comparePlayerPoints: [],\r\n                selectedComparePlayers: []\r\n            })\r\n        }\r\n        else if(details !== undefined){\r\n            if(reason === \"remove-option\"){\r\n                this.setState((prevState) => ({\r\n                    comparePlayerPoints: prevState.comparePlayerPoints.filter(player => player.id !== details.option.id),\r\n                    selectedComparePlayers: prevState.selectedComparePlayers.filter(player => player.id !== details.option.id)\r\n                }))\r\n            }\r\n            else if(reason === \"select-option\"){\r\n                this.setState((prevState) => ({\r\n                    selectedComparePlayers: prevState.selectedComparePlayers.concat(details.option)\r\n                }))\r\n                this.getPlayerPoints(details.option).then((value) => {\r\n                    if(value!==undefined && this.state.selectedComparePlayers.some(player => player.id === details.option.id)){\r\n                        const valToAdd: PlayerPointsWithId = {\r\n                            ...value,\r\n                            id: details.option.id\r\n                        }\r\n\r\n                        this.setState((prevState) => ({\r\n                            comparePlayerPoints: prevState.comparePlayerPoints.concat(valToAdd)\r\n                        }))\r\n                    }\r\n\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private readonly getPlayerPoints = (newValue: Player|null): Promise<PlayerPoints | undefined> =>{\r\n        var promise = new Promise<PlayerPoints>((resolve, reject) => {\r\n            if(newValue === null){\r\n                resolve(undefined)\r\n            }\r\n            else{\r\n                this.setState((prevState) => ({playerUpdating: prevState.playerUpdating+1}))\r\n                $.getJSON('https://europe-west3-thranker.cloudfunctions.net/tournaments?playerId='+newValue.id)\r\n                .then(res => {\r\n                    resolve({\r\n                        pointsNormal: tournamentsService.getPointsByDate(res, percentageNormalList),\r\n                        pointsException: tournamentsService.getPointsByDate(res, percentageExceptionList),\r\n                        playerName:newValue.name\r\n                    })\r\n                })\r\n                .catch(() => {\r\n                    this.setState({showError: true})\r\n                    resolve(undefined)\r\n                })\r\n                .always(() => {\r\n                    this.setState((prevState) => ({playerUpdating: prevState.playerUpdating-1}))\r\n                })\r\n            }\r\n\r\n        })\r\n        return promise\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) =>({\r\n    players: state.players.players\r\n});\r\n\r\nconst Progress = connect(mapStateToProps)(ProgressComponent)\r\nexport { Progress };\r\n\r\n","import { Level } from \"../data/scorecalc-data\";\r\n\r\n\r\nexport interface Player{\r\n    name: string,\r\n    id: string,\r\n    rank: number,\r\n    nation: string,\r\n    points: number,\r\n    value: number\r\n    club: string\r\n}\r\n\r\nexport interface PlayerRanked extends Player{\r\n    pos: number\r\n    lowestScore: number\r\n    score: number\r\n    newRank: number\r\n    newPoints: number\r\n}\r\n\r\nclass PlayersService {\r\n\r\n    //private prefScores:number[] = []\r\n\r\n    rankPlayers = (players: PlayerRanked[], prefScores:number[]): PlayerRanked[] => {\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n            players[i].newPoints = players[i].points + Math.max(0, players[i].score - players[i].lowestScore)\r\n        }\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n\r\n            let rank: number = prefScores[players[i].newPoints + 1] + 1\r\n            for(let j=0; j<players.length; j++){\r\n                if(players[j].lowestScore === -1)continue\r\n                if(players[j].points>players[i].newPoints)rank--\r\n                if(players[j].newPoints>players[i].newPoints)rank++\r\n            }\r\n            players[i].rank = prefScores[players[i].points + 1] + 1\r\n            players[i].newRank = rank\r\n        }\r\n\r\n        return players\r\n    }\r\n\r\n    recalc = (players: PlayerRanked[], level: Level): PlayerRanked[] => {\r\n        \r\n        \r\n        //set player pos\r\n        for(var i=0; i<players.length; i++){\r\n            players[i].pos=i+1\r\n            players[i].score=0;\r\n        }\r\n        \r\n        \r\n        if(players.length<4){\r\n            return players;\r\n        }\r\n        \r\n        \r\n        //which player beaten\r\n        var value:number[] = players.map(p => p.value).sort((a,b) => b-a)\r\n        for(let i=0; i+1<players.length; i++){\r\n            let valueSum: number = 0;\r\n            for(var j=i; j<Math.min(i+4, players.length); j++){\r\n                valueSum+=value[j]\r\n            }\r\n            players[i].score = Math.max(players[i].score, (valueSum/4)*level.coefficient);\r\n        }\r\n        //number of beaten\r\n        for(let i=0; i<players.length; i++){\r\n            let maxScore: number = (((70-1)*(players.length - i - 1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, Math.min(maxScore,players.length-i))\r\n        }\r\n\r\n        //scalar\r\n        let points:number = level.winnerpoints\r\n        for(let i=0; i+1<players.length; i++){\r\n            players[i].score = Math.max(players[i].score, points)\r\n            points/=2\r\n        }\r\n\r\n        //linear\r\n        for(let i=0; i<players.length; i++){\r\n            let score: number = (((level.winnerpoints-1)*(players.length-i-1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, score)\r\n        }\r\n\r\n        //sum up\r\n        for(let i=0; i<players.length; i++){\r\n            players[i].score = Math.round(players[i].score - 0.05)\r\n        }\r\n        players[0].score+=10\r\n\r\n        return players\r\n    }\r\n\r\n    parseContent(content: string): Player[]{\r\n        const stringArray = content.split('\\n').map((ln) => {\r\n            return ln.split('\\t');\r\n        });\r\n        let ret: Player[] = []\r\n        for(var i=2; i+1<stringArray.length; i++){\r\n            const player:Player = {\r\n                rank: Number(stringArray[i][0]),\r\n                id: stringArray[i][1],\r\n                name: stringArray[i][2],\r\n                club: stringArray[i][3],\r\n                nation: stringArray[i][4],\r\n                points: Number(stringArray[i][5]),\r\n                value: Number(stringArray[i][6]),\r\n            }\r\n            ret.push(player)\r\n        }\r\n        return ret\r\n    }\r\n\r\n    parsePlayerMinPoints(content: string): number{\r\n        var el = document.createElement('html');\r\n        el.innerHTML = content\r\n        var list = el.getElementsByClassName(\"normTour\");\r\n        \r\n        var ret:number = 100000;\r\n        var cnt:number = 0;\r\n        for(var i=6; i<list.length; i+=7){\r\n            let ind:number = list[i].innerHTML.indexOf('(')\r\n            if(ind===-1)ind=list[i].innerHTML.length\r\n            let score:string = list[i].innerHTML.substr(0, ind);\r\n            ret = Math.min(ret, Number(score));\r\n            cnt++\r\n        }\r\n        if(cnt<5)ret=0\r\n        return ret\r\n    }\r\n\r\n    getPlayerScores(players: Player[]): number[]{\r\n        let prefScores:number[] = new Array(6005).fill(0)\r\n        for(let i=0; i<players.length; i++){\r\n            prefScores[players[i].points]++;\r\n        }\r\n        \r\n        for(let i=6000; i>=0; i--){\r\n            prefScores[i]+=prefScores[i+1]\r\n        }\r\n        return prefScores\r\n\r\n    }\r\n\r\n    fixPlayers(players: Player[], prefScores: number[]): Player[]{\r\n        for(let player of players){\r\n            if(player.club === '???'){\r\n                player.club = 'no club'\r\n            }\r\n            player.rank = prefScores[player.points+1]+1\r\n        }\r\n        return players\r\n    }\r\n\r\n}\r\n\r\nconst playersService = new PlayersService();\r\nexport default playersService","import { Box, Checkbox, IconButton, InputAdornment, List, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Clear, Search } from '@material-ui/icons';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport React, { Component } from 'react';\r\nimport { Player } from '../services/player-service';\r\n//import matchSorter from 'match-sorter'\r\n\r\ninterface OwnProps{\r\n    players: Player[]\r\n    handlePlayerToggle: (player: Player) => void\r\n    playersCompare: Player[]\r\n}\r\ninterface State{\r\n    searchText: string\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class PlayersAutoComplete extends Component<Props, State>{\r\n    public readonly state: State = {\r\n        searchText: ''\r\n    }\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n\r\n            <>\r\n                \r\n\r\n                <TextField \r\n                    label=\"Players\" \r\n                    variant=\"outlined\" \r\n                    onChange={this.handleSearchChange} \r\n                    fullWidth\r\n                    value = {this.state.searchText}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <Search/>\r\n                            </InputAdornment>\r\n                        ),\r\n                        endAdornment: (\r\n                            this.state.searchText.length ?\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton \r\n                                    size='small'\r\n                                    onClick = {() => {\r\n                                        this.setState({\r\n                                            searchText: ''\r\n                                        })\r\n                                    }}\r\n                                >\r\n                                    <Clear/>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            : null\r\n                        )\r\n                    }}\r\n                />\r\n                <List dense>\r\n                    {(!this.props.players.length ? Array.from(new Array(10)) : \r\n                        this.props.players.filter(p => p.name.toLowerCase().includes(this.state.searchText.toLowerCase())).slice(0, 10))\r\n                        .map((player) => {\r\n                            return (\r\n                                player ? (\r\n                                    <ListItem key={player.id} button onClick={() => this.props.handlePlayerToggle(player)}>\r\n                                        <ListItemText id={player.id+player.name} primary={player.name} secondary={player.club} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Checkbox\r\n                                                edge=\"end\"\r\n                                                onChange={() => this.props.handlePlayerToggle(player)}\r\n                                                checked={this.props.playersCompare.some(p => p.id===player.id)}\r\n                                            />\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ) : (\r\n                                    <Box pt={2} pl={1} pr={1}>\r\n                                        <Skeleton />\r\n                                        <Skeleton width=\"60%\" />\r\n                                    </Box>\r\n                                )\r\n                            )\r\n                        })}\r\n                </List>\r\n            </>\r\n        )\r\n    }\r\n    private readonly handleSearchChange = (e: any): void => {\r\n        this.setState({searchText: e.target.value});\r\n    }\r\n}","import { Box, Grid, IconButton, List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { Remove } from \"@material-ui/icons\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport CSS from 'csstype';\r\nimport React, { Component } from \"react\";\r\nimport MediaQuery, { useMediaQuery } from 'react-responsive';\r\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\r\nimport { PlayerRanked } from \"../services/player-service\";\r\nimport styles from './styles/playerlist.module.css';\r\n\r\nconst listItemStyle: CSS.Properties = {\r\n    boxShadow: '0 1.5px 4px rgba(0, 0, 0, 0.2)',\r\n    backgroundColor: 'rgb(255, 255, 255)',\r\n    marginTop: '10px',\r\n    marginBottom: '10px',\r\n    borderRadius: '7px'\r\n}\r\n\r\nconst mobileListItemStyle: CSS.Properties = {\r\n    ...listItemStyle,\r\n    paddingRight: '5px',\r\n    paddingLeft: '10px'\r\n}\r\n\r\nconst ratingUpStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#5eb560'\r\n}\r\nconst ratingDownStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#f97373'\r\n}\r\nconst ratingConstantStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#969696'\r\n}\r\n\r\nconst tabletMaxWidth = 800\r\n\r\nconst SortableItem = SortableElement(({children}:any) => { \r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return(\r\n        <ListItem \r\n            \r\n            style={isTabletOrMobile ? mobileListItemStyle : listItemStyle}\r\n            onMouseEnter={ (): void => { if (document.body.style.cursor !== 'grabbing') document.body.style.cursor = 'grab' } }\r\n            onMouseLeave={ (): void => { if (document.body.style.cursor === 'grab') document.body.style.cursor = '' } }\r\n        >\r\n            {children}\r\n        </ListItem>\r\n        )\r\n    });\r\n    \r\nconst SortableList = SortableContainer(({children}:any) => {\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return <List dense={isTabletOrMobile} style={{paddingTop:0}}>{children}</List>;\r\n});\r\nconst ResponsiveListItem = ({children}:any) => {\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return <ListItem style={isTabletOrMobile ? {paddingRight:'5px', paddingLeft:'10px'}:undefined}>{children}</ListItem>\r\n}\r\n\r\n\r\ninterface OwnProps{\r\n    playersCompare: PlayerRanked[] \r\n    reorder: ({oldIndex, newIndex}: any) => void\r\n    playerRemoved: (playerId: string) => void\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class RankedPlayersList extends Component<Props, {}>{\r\n    \r\n    render(): React.ReactNode{\r\n        return(\r\n            <MediaQuery maxWidth={599}>\r\n            {(isMobile) => \r\n            <SortableList \r\n                onSortStart={() => (document.body.style.cursor = 'grabbing')}\r\n                onSortEnd={({oldIndex, newIndex}: any) => {\r\n                    document.body.style.cursor = 'default'\r\n                    this.props.reorder({oldIndex, newIndex})\r\n                }} \r\n                shouldCancelStart = {(e: any) => {\r\n                    if(\r\n                        e.target.id === \"buttonRemove\" || \r\n                        e.target.nearestViewportElement !== undefined && \r\n                        e.target.nearestViewportElement.id === \"buttonRemove\"\r\n                    ){\r\n                        return true\r\n                    }\r\n                }} \r\n                useWindowAsScrollContainer\r\n                lockAxis = 'y'\r\n                pressDelay = {isMobile ? 200 : 0}\r\n                helperClass = {styles.selected}\r\n            >\r\n                <ResponsiveListItem>\r\n                    <Grid item xs = {1}>\r\n                        <ListItemText >#</ListItemText>\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={4}>\r\n                        <ListItemText>Name</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <ListItemText>Rank</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <ListItemText >Points</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} style={{minWidth: '65px'}}>  \r\n                        <ListItemText style={{textAlign:'right', float:'right'}}>Tournament Points</ListItemText>\r\n                    </Grid>\r\n                </ResponsiveListItem>\r\n                {this.props.playersCompare.map((value, index) => (\r\n                <SortableItem  key={index} index={index} >\r\n                    <Grid item xs = {1}>\r\n                    <ListItemText><b>{value.pos}</b></ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={4}>\r\n                        <ListItemText style={{marginRight:5}}>{value.name}</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={65}/> :(\r\n                            <Grid container direction='row' >\r\n                                <Box mr={0.5}><ListItemText>{value.newRank}</ListItemText></Box>\r\n                                {\r\n                                    value.rank > value.newRank ? <ListItemText style={ratingUpStyle}><b>{`(+${Math.abs(value.rank-value.newRank)})`}</b></ListItemText>:\r\n                                    value.rank === value.newRank ? <ListItemText style={ratingConstantStyle}><b>{`(=${value.rank-value.newRank})`}</b></ListItemText> :\r\n                                    <ListItemText style={ratingDownStyle}><b>{`(-${Math.abs(value.rank-value.newRank)})`}</b></ListItemText>\r\n                                } \r\n                            </Grid>\r\n                            )\r\n                        }\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={65}/> :(\r\n                                <Grid container direction='row' >\r\n                                    <Box mr={0.5}><ListItemText >{value.newPoints}</ListItemText></Box>\r\n                                    {\r\n                                        value.points < value.newPoints ? <ListItemText style={ratingUpStyle}><b>{`(+${Math.abs(value.points-value.newPoints)})`}</b></ListItemText>:\r\n                                        <ListItemText style={ratingConstantStyle}><b> {`(=${value.points-value.newPoints})`}</b></ListItemText> \r\n                                    } \r\n                                </Grid>\r\n                                )\r\n                        }\r\n                        \r\n\r\n                    </Grid>\r\n                      <Grid item xs={2} sm={2}  style={{minWidth: '65px'}}>  \r\n                         <Grid container direction='row' justify='flex-end' > \r\n                            <MediaQuery maxWidth={tabletMaxWidth}>\r\n                                {(matches) => \r\n                                    <>\r\n                                        <Box  display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" marginRight={matches?'2px':2} >\r\n                                            <ListItemText  ><b>{value.score}</b></ListItemText>\r\n                                        </Box>\r\n                                        <IconButton size='small' onClick = {() => this.props.playerRemoved(value.id)} id=\"buttonRemove\">\r\n                                            <Remove fontSize={matches ? 'small' : undefined} id=\"buttonRemove\"/>\r\n                                        </IconButton>\r\n                                    </>\r\n                                    \r\n                                }\r\n                            </MediaQuery>\r\n                         </Grid> \r\n                     </Grid> \r\n                </SortableItem>\r\n                ))}\r\n            </SortableList>\r\n            }\r\n            </MediaQuery>\r\n        )\r\n    }\r\n\r\n}","import { BottomNavigation, BottomNavigationAction, Box, Button, FormControl, Grid, InputLabel, MenuItem, Select, Typography } from '@material-ui/core';\r\nimport { ClearAll, GroupAdd, List as ListIcon } from '@material-ui/icons';\r\nimport arrayMove from 'array-move';\r\nimport $ from \"jquery\";\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MediaQuery from 'react-responsive';\r\nimport { RouteComponentProps, StaticContext } from 'react-router';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { Level, levelList } from '../data/scorecalc-data';\r\nimport playersService, { Player, PlayerRanked } from '../services/player-service';\r\nimport { RootState } from '../store/combineReducers';\r\nimport { updateRankerState } from '../store/ranker/ranker-actions';\r\nimport { RankerState } from '../store/ranker/ranker-types';\r\nimport { ErrorMessage } from './error-message';\r\nimport { PlayersAutoComplete } from './players-autocomplete';\r\nimport { RankedPlayersList } from './rankedplayers-list';\r\n\r\n\r\n\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps> & RouteComponentProps<{}, StaticContext, {addPlayer?: Player}>\r\n\r\ninterface State{\r\n    showError: boolean\r\n}\r\n\r\nexport class RankerComponent extends Component<Props, {}>{ \r\n    public readonly state: State = {\r\n        showError: false\r\n    }\r\n\r\n    private readonly recalc = (players: PlayerRanked[], levelName: string): PlayerRanked[] => {\r\n        let levelFound = levelList.find(level => level.name===levelName)\r\n        let level:Level = levelFound ? levelFound : levelList[0]\r\n        return playersService.rankPlayers(playersService.recalc(players, level), this.props.prefScores);\r\n    }\r\n\r\n    private readonly reorder = ({oldIndex, newIndex}: any): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState, \r\n            playersCompare: this.recalc(arrayMove(this.props.rankerState.playersCompare, oldIndex, newIndex), this.props.rankerState.selectedLevel)\r\n        })\r\n      };\r\n\r\n    componentDidMount():void {\r\n        if(this.props.location.state!==undefined && this.props.location.state!==null &&this.props.location.state.addPlayer !== undefined){\r\n            this.handlePlayerToggle(this.props.location.state.addPlayer, true)\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <>\r\n                <MediaQuery maxWidth={599}>\r\n                {(isMobile) => \r\n                <Box pb={isMobile ? 6 : 2}>\r\n                    <Grid container spacing={3}>\r\n                            <>\r\n                            {(!isMobile || this.props.rankerState.bottomNavVal === 0) &&\r\n                            <Grid item xs={12}  sm={3} style={{minWidth:'200px'}}>\r\n                                <PlayersAutoComplete\r\n                                    players = {this.props.players}\r\n                                    handlePlayerToggle = {this.handlePlayerToggle}\r\n                                    playersCompare = {this.props.rankerState.playersCompare}\r\n                                />\r\n                            </Grid>\r\n                            }\r\n                        \r\n                            {(!isMobile || this.props.rankerState.bottomNavVal === 1) &&\r\n                                <Grid item xs={12} sm>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item>\r\n                                        <FormControl>\r\n                                            <InputLabel>Level</InputLabel>\r\n                                            <Select\r\n                                                value={this.props.rankerState.selectedLevel}\r\n                                                onChange={this.handleLevelChange}\r\n                                            >\r\n                                                {levelList.map(level => <MenuItem value={level.name}>{level.name}</MenuItem> )}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            startIcon={<ClearAll />}\r\n                                            onClick={this.handleClearAllClick}\r\n                                            style={{float:'right'}}\r\n                                        >\r\n                                            Clear\r\n                                        </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Typography align='right' variant='body2'style={{marginTop:20, marginRight:3}} color=\"textSecondary\">\r\n                                        <i>{isMobile ? \"*Hold and drag to reorder\" :\r\n                                            \"*Drag to reorder\"}</i>\r\n                                    </Typography>\r\n                                    <RankedPlayersList\r\n                                        playersCompare = {this.props.rankerState.playersCompare}\r\n                                        reorder = {this.reorder}\r\n                                        playerRemoved = {this.playerRemoved}\r\n                                    />\r\n                                    {this.props.rankerState.playersCompare.length < 4 &&\r\n                                    <div style={{textAlign:'center', fontSize:'14px', fontFamily: 'Arial', color:'#1976d2'}}>\r\n                                        <span >\r\n                                            {`Add`}\r\n                                        </span>\r\n                                        <span style={{marginLeft:4, marginRight:4,color:'#dc004e', fontWeight:600}}>\r\n                                            {4-this.props.rankerState.playersCompare.length}\r\n                                        </span>\r\n                                        <span  >\r\n                                            {`more player${this.props.rankerState.playersCompare.length<3 ? 's':''} to make this tournament rated`}\r\n                                        </span>\r\n                                    </div>\r\n                                    }\r\n                                </Grid>\r\n                            \r\n                            }\r\n                            \r\n                        </>\r\n                    </Grid>\r\n                </Box>\r\n                }\r\n            \r\n                </MediaQuery>\r\n            <MediaQuery maxWidth={599}>\r\n                <BottomNavigation\r\n                    value = {this.props.rankerState.bottomNavVal}\r\n                    onChange={(e, newValue) => {\r\n                        this.props.updateRankerState({\r\n                            ...this.props.rankerState,\r\n                            bottomNavVal: newValue\r\n                        })\r\n                    }}\r\n                    style = {{\r\n                        width:'100%',\r\n                        position: 'fixed',\r\n                        bottom: '0',\r\n                        //right:'0',\r\n                        left:'0',\r\n                        boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',\r\n                        zIndex: 99999\r\n                    }}\r\n                    showLabels\r\n                >\r\n                    <BottomNavigationAction label=\"Select Players\" style={{maxWidth:'1000px'}} icon={<GroupAdd/>}/>\r\n                    <BottomNavigationAction label=\"Standings\" style={{maxWidth:\"1000px\"}} icon={<ListIcon/>}/>\r\n                </BottomNavigation>\r\n            </MediaQuery>\r\n            <ErrorMessage show={this.state.showError}/>\r\n            </>\r\n        )\r\n    }\r\n\r\n    public readonly handlePlayerToggle = (player: Player, forceAdd?: boolean): void => {\r\n        if(this.props.rankerState.playersCompare.some(p => p.id===player.id)){\r\n            \r\n            \r\n            if(forceAdd!==true){\r\n                this.playerRemoved(player.id)\r\n            }\r\n            \r\n        }\r\n        else{\r\n            this.playerAdded(player);\r\n        }\r\n    }\r\n    private readonly playerAdded = (player: Player): void => {\r\n        \r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare.concat({\r\n                ...player, \r\n                pos:this.props.rankerState.playersCompare.length+1, \r\n                score:-1, \r\n                lowestScore:-1,\r\n                newRank:-1,\r\n                newPoints:-1\r\n            }), this.props.rankerState.selectedLevel)\r\n        })\r\n        $.ajax('https://europe-west3-thranker.cloudfunctions.net/single?playerId='+player.id)\r\n        .then(res => {\r\n            \r\n            let score = Number(res);\r\n            let items = [...this.props.rankerState.playersCompare]\r\n            for(var i=0; i<items.length; i++){\r\n                if(items[i].id === player.id && items[i].lowestScore===-1){\r\n                    let item = {...items[i]}\r\n                    item.lowestScore=score\r\n                    \r\n                    items[i]=item\r\n                    this.props.updateRankerState({\r\n                        ...this.props.rankerState,\r\n                        playersCompare: this.recalc(items, this.props.rankerState.selectedLevel)\r\n                    })\r\n\r\n                    break\r\n                }\r\n            }\r\n        \r\n        })\r\n        .catch(() => {\r\n            this.setState({showError: true})\r\n        })\r\n\r\n    }\r\n    private readonly handleClearAllClick = (): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: []\r\n        })\r\n    }\r\n    private readonly playerRemoved = (playerId: string): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare.filter(player => player.id !== playerId), this.props.rankerState.selectedLevel)\r\n        })\r\n    }\r\n    private readonly handleLevelChange = (e: any): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            selectedLevel: e.target.value,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare, e.target.value)\r\n        })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) =>({\r\n    players: state.players.players,\r\n    prefScores: state.players.prefScores,\r\n    rankerState: state.ranker\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>({\r\n    updateRankerState: (rankerState: RankerState) => dispatch(updateRankerState(rankerState))\r\n});\r\n  \r\n\r\nconst Ranker = connect(mapStateToProps, mapDispatchToProps)(RankerComponent)\r\nexport { Ranker };\r\n\r\n","import { RankerActionTypes, RankerState, UPDATE_RANKER_STATE } from \"./ranker-types\";\r\n\r\nexport function updateRankerState(rankerState: RankerState): RankerActionTypes{\r\n    return{\r\n        type: UPDATE_RANKER_STATE,\r\n        payload: rankerState\r\n    }\r\n}","import { PlayerRanked } from \"../../services/player-service\";\r\n\r\nexport const UPDATE_RANKER_STATE = 'UPDATE_RANKER_STATE'\r\n\r\nexport interface RankerState {\r\n    playersCompare: PlayerRanked[] \r\n    selectedLevel: string,\r\n    bottomNavVal: number\r\n}\r\n\r\ninterface UpdateRankerStateAction {\r\n    type: typeof UPDATE_RANKER_STATE\r\n    payload: RankerState\r\n}\r\n\r\nexport type RankerActionTypes = \r\n    | UpdateRankerStateAction","import $ from \"jquery\";\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route } from 'react-router';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport './App.css';\r\nimport { ErrorMessage } from \"./components/error-message\";\r\nimport { Home } from './components/home';\r\nimport { NavBar } from './components/navbar';\r\nimport { Progress } from './components/progress';\r\nimport { Ranker } from './components/ranker';\r\nimport playersService, { Player } from './services/player-service';\r\nimport { updatePlayersState } from './store/players/player-actions';\r\nimport { PlayersState } from './store/players/player-types';\r\n\r\ntype Props = ReturnType<typeof mapDispatchToProps> \r\n\r\ninterface State{\r\n  showError: boolean\r\n}\r\n\r\nclass AppComponent extends Component<Props, State> {\r\n  public readonly state: State = {\r\n    showError: false\r\n  }\r\n  componentDidMount(): void{\r\n    $.ajax('https://europe-west3-thranker.cloudfunctions.net/all')\r\n      .then(res => {\r\n          const players:Player[] =  playersService.parseContent(res)\r\n          const prefScores:number[] = playersService.getPlayerScores(players)\r\n          this.props.updatePlayersState({\r\n            prefScores,\r\n            players: playersService.fixPlayers(players, prefScores)\r\n          })\r\n      })\r\n      .catch(() => {\r\n          this.setState({showError: true})\r\n      })\r\n  }\r\n  \r\n  static displayName = AppComponent.name;\r\n  \r\n  render () {\r\n    return (\r\n      <HashRouter>\r\n        <NavBar>\r\n          <Route exact path='/' component={Home} />\r\n          <Route exact path='/ranker' component={Ranker} />\r\n          <Route exact path= '/players/:id?' component={Progress} />\r\n        </NavBar>\r\n        <ErrorMessage show={this.state.showError}/>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>({\r\n  updatePlayersState: (playersState: PlayersState) => dispatch(updatePlayersState(playersState))\r\n});\r\n\r\nconst App = connect(null, mapDispatchToProps)(AppComponent)\r\nexport default App","import { Player } from \"../../services/player-service\";\r\nimport { PlayersActionTypes, PlayersState, UPDATE_PLAYERS, UPDATE_PLAYERS_STATE } from \"./player-types\";\r\n\r\nexport function updatePlayers(newPlayers: Player[]): PlayersActionTypes{\r\n    return {\r\n        type: UPDATE_PLAYERS,\r\n        payload: newPlayers\r\n    }\r\n}\r\nexport function updatePlayersState(playersState: PlayersState): PlayersActionTypes{\r\n    return {\r\n        type: UPDATE_PLAYERS_STATE,\r\n        payload: playersState\r\n    }\r\n}","import { Player } from \"../../services/player-service\";\r\n\r\nexport const UPDATE_PLAYERS = 'UPDATE_PLAYERS'\r\nexport const UPDATE_PLAYERS_STATE = 'UPDATE_PLAYERS_STATE'\r\n\r\nexport interface PlayersState {\r\n    players: Player[],\r\n    prefScores: number[]\r\n}\r\n\r\ninterface UpdatePlayersStateAction {\r\n    type: typeof UPDATE_PLAYERS_STATE\r\n    payload: PlayersState\r\n}\r\n\r\ninterface UpdatePlayersAction {\r\n    type: typeof UPDATE_PLAYERS\r\n    payload: Player[]\r\n}\r\n\r\nexport type PlayersActionTypes = \r\n    | UpdatePlayersStateAction\r\n    | UpdatePlayersAction","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { PlayersActionTypes, PlayersState, UPDATE_PLAYERS, UPDATE_PLAYERS_STATE } from \"./player-types\";\r\n\r\nconst initialState: PlayersState = {\r\n    players: [],\r\n    prefScores: []\r\n}\r\n\r\nexport function playersReducer(\r\n    state = initialState,\r\n    action: PlayersActionTypes\r\n\r\n): PlayersState {\r\n    switch(action.type){\r\n        case UPDATE_PLAYERS:\r\n            return{\r\n                ...state,\r\n                players: action.payload\r\n            }\r\n        case UPDATE_PLAYERS_STATE:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import { levelList } from \"../../data/scorecalc-data\";\r\nimport { RankerActionTypes, RankerState, UPDATE_RANKER_STATE } from \"./ranker-types\";\r\n\r\nconst initialState: RankerState = {\r\n    playersCompare: [],\r\n    selectedLevel: levelList[0].name,\r\n    bottomNavVal: 1\r\n}\r\n\r\nexport function rankerReducer(\r\n    state = initialState,\r\n    action: RankerActionTypes\r\n\r\n): RankerState {\r\n    switch(action.type){\r\n        case UPDATE_RANKER_STATE:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { playersReducer } from \"./players/player-reducers\";\r\nimport { rankerReducer } from \"./ranker/ranker-reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n    players: playersReducer,\r\n    ranker: rankerReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","import store from './createStore';\r\n\r\nexport default store;","import { createStore } from 'redux';\r\nimport reducer from './combineReducers';\r\n\r\nexport default createStore(reducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}