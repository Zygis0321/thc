{"version":3,"sources":["services/player-service.ts","components/players-autocomplete.tsx","data/scorecalc-data.ts","components/rankedplayers-list.tsx","components/home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["playersService","prefScores","Array","fill","rankPlayers","players","i","length","lowestScore","newPoints","points","Math","max","score","rank","j","newRank","recalc","level","pos","value","map","p","sort","a","b","valueSum","min","coefficient","maxScore","winnerpoints","floor","content","stringArray","split","ln","ret","player","Number","id","name","club","nation","push","el","document","createElement","innerHTML","list","getElementsByClassName","cnt","ind","indexOf","substr","this","PlayersAutoComplete","state","searchText","handleSearchChange","e","setState","target","TextField","label","variant","onChange","fullWidth","List","dense","props","filter","toLowerCase","includes","slice","ListItem","key","button","onClick","handlePlayerToggle","ListItemText","primary","secondary","ListItemSecondaryAction","Checkbox","edge","checked","playersCompare","some","Component","levelList","listItemStyle","boxShadow","backgroundColor","marginTop","marginBottom","ratingUpStyle","fontWeight","color","ratingDownStyle","ratingConstantStyle","SortableItem","SortableElement","children","style","SortableList","SortableContainer","RankedPlayersList","onSortEnd","reorder","distance","Grid","item","xs","Typography","align","index","Skeleton","width","container","direction","Box","mr","abs","justify","display","alignItems","justifyContent","marginRight","IconButton","size","playerRemoved","Clear","Home","selectedLevel","levelName","levelFound","find","oldIndex","newIndex","arrayMove","playerAdded","prevState","concat","$","ajax","then","res","items","catch","console","log","handleClearAllClick","playerId","handleLevelChange","parseContent","setPlayerScores","Container","pt","spacing","FormControl","InputLabel","Select","MenuItem","Button","startIcon","ClearAll","float","App","exact","path","component","displayName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.8f5b4833.chunk.js","sourcesContent":["import { Level } from \"../data/scorecalc-data\";\r\n\r\n\r\nexport interface Player{\r\n    name: string,\r\n    id: string,\r\n    rank: number,\r\n    nation: string,\r\n    points: number,\r\n    value: number\r\n    club: string\r\n}\r\n\r\nexport interface PlayerRanked extends Player{\r\n    pos: number\r\n    lowestScore: number\r\n    score: number\r\n    newRank: number\r\n    newPoints: number\r\n}\r\n\r\nclass PlayersService {\r\n\r\n    private prefScores:number[] = new Array(6005).fill(0)\r\n\r\n    rankPlayers = (players: PlayerRanked[]): PlayerRanked[] => {\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n            players[i].newPoints = players[i].points + Math.max(0, players[i].score - players[i].lowestScore)\r\n        }\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n\r\n            let rank: number = this.prefScores[players[i].newPoints + 1] + 1\r\n            for(let j=0; j<players.length; j++){\r\n                if(players[j].lowestScore === -1)continue\r\n                if(players[j].points>players[i].newPoints)rank--\r\n                if(players[j].newPoints>players[i].newPoints)rank++\r\n            }\r\n            players[i].rank = this.prefScores[players[i].points + 1] + 1\r\n            players[i].newRank = rank\r\n        }\r\n\r\n        return players\r\n    }\r\n\r\n    recalc = (players: PlayerRanked[], level: Level): PlayerRanked[] => {\r\n        \r\n        \r\n        //set player pos\r\n        for(var i=0; i<players.length; i++){\r\n            players[i].pos=i+1\r\n            players[i].score=0;\r\n        }\r\n        \r\n        \r\n        if(players.length<4){\r\n            return players;\r\n        }\r\n        \r\n        \r\n        //which player beaten\r\n        var value:number[] = players.map(p => p.value).sort((a,b) => b-a)\r\n        for(let i=0; i+1<players.length; i++){\r\n            let valueSum: number = 0;\r\n            for(var j=i; j<Math.min(i+4, players.length); j++){\r\n                valueSum+=value[j]\r\n            }\r\n            players[i].score = Math.max(players[i].score, (valueSum/4)*level.coefficient);\r\n        }\r\n        //number of beaten\r\n        for(let i=0; i<players.length; i++){\r\n            let maxScore: number = (((70-1)*(players.length - i - 1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, Math.min(maxScore,players.length-i))\r\n        }\r\n\r\n        //scalar\r\n        let points:number = level.winnerpoints\r\n        for(let i=0; i+1<players.length; i++){\r\n            players[i].score = Math.max(players[i].score, points)\r\n            points/=2\r\n        }\r\n\r\n        //linear\r\n        for(let i=0; i<players.length; i++){\r\n            let score: number = (((level.winnerpoints-1)*(players.length-i-1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, score)\r\n        }\r\n\r\n        //sum up\r\n        for(let i=0; i<players.length; i++){\r\n            players[i].score = Math.floor(players[i].score)\r\n        }\r\n        players[0].score+=10\r\n\r\n        return players\r\n    }\r\n\r\n    parseContent(content: string): Player[]{\r\n        const stringArray = content.split('\\n').map((ln) => {\r\n            return ln.split('\\t');\r\n        });\r\n        let ret: Player[] = []\r\n        for(var i=2; i+1<stringArray.length; i++){\r\n            const player:Player = {\r\n                rank: Number(stringArray[i][0]),\r\n                id: stringArray[i][1],\r\n                name: stringArray[i][2],\r\n                club: stringArray[i][3],\r\n                nation: stringArray[i][4],\r\n                points: Number(stringArray[i][5]),\r\n                value: Number(stringArray[i][6]),\r\n            }\r\n            ret.push(player)\r\n        }\r\n        return ret\r\n    }\r\n\r\n    parsePlayerMinPoints(content: string): number{\r\n        var el = document.createElement('html');\r\n        el.innerHTML = content\r\n        var list = el.getElementsByClassName(\"normTour\");\r\n        \r\n        var ret:number = 100000;\r\n        var cnt:number = 0;\r\n        for(var i=6; i<list.length; i+=7){\r\n            let ind:number = list[i].innerHTML.indexOf('(')\r\n            if(ind===-1)ind=list[i].innerHTML.length\r\n            let score:string = list[i].innerHTML.substr(0, ind);\r\n            ret = Math.min(ret, Number(score));\r\n            cnt++\r\n        }\r\n        if(cnt<5)ret=0\r\n        return ret\r\n    }\r\n\r\n    setPlayerScores(players: Player[]): void{\r\n        for(let i=0; i<players.length; i++){\r\n            this.prefScores[players[i].points]++;\r\n        }\r\n        \r\n        for(let i=6000; i>=0; i--){\r\n            this.prefScores[i]+=this.prefScores[i+1]\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\nconst playersService = new PlayersService();\r\nexport default playersService","import { Checkbox, List, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\r\nimport InputBase from '@material-ui/core/InputBase';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport React, { Component } from 'react';\r\nimport { Player, PlayerRanked } from '../services/player-service';\r\n//import matchSorter from 'match-sorter'\r\n\r\ninterface OwnProps{\r\n    players: Player[]\r\n    handlePlayerToggle: (player: Player) => void\r\n    playersCompare: PlayerRanked[]\r\n    //checked: string[]\r\n}\r\ninterface State{\r\n    searchText: string\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class PlayersAutoComplete extends Component<Props, State>{\r\n    public readonly state: State = {\r\n        searchText: ''\r\n    }\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n\r\n            <>\r\n                <TextField label=\"Players\" variant=\"outlined\" onChange={this.handleSearchChange} fullWidth/>\r\n                <List dense>\r\n                    {this.props.players.filter(p => p.name.toLowerCase().includes(this.state.searchText)).slice(0, 10).map((player) => {\r\n                        return (\r\n                            <ListItem key={player.id} button onClick={() => this.props.handlePlayerToggle(player)}>\r\n                                <ListItemText id={player.id+player.name} primary={player.name} secondary={player.club} />\r\n                                <ListItemSecondaryAction>\r\n                                    <Checkbox\r\n                                        edge=\"end\"\r\n                                        onChange={() => this.props.handlePlayerToggle(player)}\r\n                                        checked={this.props.playersCompare.some(p => p.id==player.id)}\r\n                                    />\r\n                                </ListItemSecondaryAction>\r\n                            </ListItem>\r\n                        )\r\n                    })}\r\n                </List>\r\n            </>\r\n\r\n            /*<Autocomplete\r\n                open\r\n                filterOptions = {createFilterOptions({limit:20})}\r\n                options={this.props.players}\r\n                getOptionLabel={(option) => option.name}\r\n                renderInput={(params) => <TextField {...params} variant=\"outlined\" label=\"Players\"  />}\r\n\r\n                renderTags={() => null}\r\n                closeIcon = {null}\r\n                popupIcon = {null}\r\n                onChange={(event, newValue, reason, details) => {\r\n                    if(reason === 'select-option' && details?.option != undefined){\r\n                        this.props.handlePlayerToggle(details.option)\r\n                    }\r\n                    if(reason === 'remove-option' && details?.option != undefined){\r\n                    }\r\n                }}\r\n            />*/\r\n        )\r\n    }\r\n    private readonly handleSearchChange = (e: any): void => {\r\n        this.setState({searchText: e.target.value});\r\n    }\r\n}","export interface Level {\r\n    name: string,\r\n    coefficient: number,\r\n    winnerpoints: number\r\n}\r\n\r\nexport const levelList: Level[] = [\r\n    {name: \"Level 1 (World)\", coefficient: 0.96, winnerpoints: 1000},\r\n    {name: \"Level 1 (Continental)\", coefficient: 0.96, winnerpoints: 600},\r\n    {name: \"Level 2\", coefficient: 0.92, winnerpoints: 500},\r\n    {name: \"Level 3\", coefficient: 0.89, winnerpoints: 100},\r\n    {name: \"Level 4\", coefficient: 0.83, winnerpoints: 70},\r\n    {name: \"Level 5\", coefficient: 0.60, winnerpoints: 40},\r\n    {name: \"Level 6\", coefficient: 0.40, winnerpoints: 20},\r\n]","import { Box, Grid, IconButton, List, ListItem, ListItemText, Typography } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport { SortableElement, SortableContainer } from \"react-sortable-hoc\";\r\nimport CSS from 'csstype';\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport { PlayerRanked } from \"../services/player-service\";\r\nimport { Clear } from \"@material-ui/icons\";\r\n\r\nconst listItemStyle: CSS.Properties = {\r\n    boxShadow: '0 2px 4px 0 rgba(0, 0, 0, 0.2)',\r\n    backgroundColor: 'rgb(255, 255, 255)',\r\n    marginTop: '12px',\r\n    marginBottom: '12px'\r\n}\r\n\r\nconst ratingUpStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#5eb560'\r\n}\r\nconst ratingDownStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#f97373'\r\n}\r\nconst ratingConstantStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#969696'\r\n}\r\n\r\nconst SortableItem = SortableElement(({children}:any) => { \r\n    return(\r\n        <ListItem style={listItemStyle}>{children}</ListItem>\r\n    )\r\n});\r\n\r\nconst SortableList = SortableContainer(({children}:any) => {\r\n  return <List>{children}</List>;\r\n});\r\n\r\ninterface OwnProps{\r\n    playersCompare: PlayerRanked[] \r\n    reorder: ({oldIndex, newIndex}: any) => void\r\n    playerRemoved: (playerId: string) => void\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\nexport class RankedPlayersList extends Component<Props, {}>{\r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <SortableList onSortEnd={this.props.reorder} distance={1}>\r\n                <ListItem>\r\n                    <Grid item xs = {1}>\r\n                        <Typography >#</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography >Name</Typography>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Typography >Rank</Typography>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Typography >Points</Typography>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Typography align='justify' >Tournament Points</Typography>\r\n                    </Grid>\r\n                </ListItem>\r\n                {this.props.playersCompare.map((value, index) => (\r\n                <SortableItem key={index} index={index}>\r\n                    <Grid item xs = {1}>\r\n                    <Typography><b>{value.pos}</b></Typography>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Typography>{value.name}</Typography>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={70}/> :(\r\n                            <Grid container direction='row' >\r\n                                <Box mr={0.5}><Typography>{value.newRank}</Typography></Box>\r\n                                {\r\n                                    value.rank > value.newRank ? <Typography style={ratingUpStyle}>{`(+${Math.abs(value.rank-value.newRank)})`}</Typography>:\r\n                                    value.rank === value.newRank ? <Typography style={ratingConstantStyle}>{`(=${value.rank-value.newRank})`}</Typography> :\r\n                                    <Typography style={ratingDownStyle}>{`(-${Math.abs(value.rank-value.newRank)})`}</Typography>\r\n                                } \r\n                            </Grid>\r\n                            )\r\n                        }\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={70}/> :(\r\n                                <Grid container direction='row' >\r\n                                    <Box mr={0.5}><Typography>{value.newPoints}</Typography></Box>\r\n                                    {\r\n                                        value.points < value.newPoints ? <Typography style={ratingUpStyle}>{`(+${Math.abs(value.points-value.newPoints)})`}</Typography>:\r\n                                        <Typography style={ratingConstantStyle}>{`(=${value.points-value.newPoints})`}</Typography> \r\n                                    } \r\n                                </Grid>\r\n                                )\r\n                        }\r\n                        \r\n\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        <Grid container direction='row' justify='flex-end'>\r\n                            <Box  display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" marginRight={2} >\r\n                                <Typography align='right'><b>{value.score}</b></Typography>\r\n                            </Box>\r\n                            <Box display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" >\r\n                                <IconButton size='small' onClick = {() => this.props.playerRemoved(value.id)}>\r\n                                    <Clear/>\r\n                                </IconButton>\r\n                            </Box>\r\n                        </Grid>\r\n                    </Grid>\r\n                </SortableItem>\r\n                ))}\r\n            </SortableList>\r\n        )\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport playersService, { Player, PlayerRanked } from '../services/player-service';\r\nimport { PlayersAutoComplete } from './players-autocomplete';\r\nimport $ from \"jquery\";\r\nimport { Box, Button, Container, FormControl, Grid, InputLabel, List, ListItem, ListItemText, MenuItem, Paper, Select } from '@material-ui/core';\r\nimport arrayMove from 'array-move';\r\nimport { Level, levelList } from '../data/scorecalc-data';\r\nimport { ClearAll } from '@material-ui/icons';\r\nimport { RankedPlayersList } from './rankedplayers-list';\r\n\r\n\r\ninterface State{\r\n    players: Player[]\r\n    playersCompare: PlayerRanked[] \r\n    selectedLevel: string\r\n}\r\n\r\nexport class Home extends Component<{}, State>{\r\n\r\n    public readonly state: State = {\r\n        players: [],\r\n        playersCompare: [],\r\n        selectedLevel: levelList[0].name\r\n    }\r\n    \r\n    \r\n\r\n\r\n    private readonly recalc = (players: PlayerRanked[], levelName: string): PlayerRanked[] => {\r\n        let levelFound = levelList.find(level => level.name==levelName)\r\n        let level:Level = levelFound ? levelFound : levelList[0]\r\n        return playersService.rankPlayers(playersService.recalc(players, level));\r\n    }\r\n\r\n    private readonly reorder = ({oldIndex, newIndex}: any): void => {\r\n        this.setState(({playersCompare}) => ({\r\n            playersCompare: this.recalc(arrayMove(playersCompare, oldIndex, newIndex), this.state.selectedLevel),\r\n        }));\r\n      };\r\n    \r\n    public componentDidMount(): void{\r\n        $.ajax('https://thcserver.herokuapp.com/all')\r\n        .then(res => {\r\n            const players:Player[] =  playersService.parseContent(res)\r\n            playersService.setPlayerScores(players)\r\n            this.setState({ players: players});\r\n        })\r\n        .catch(() => {\r\n            console.log(\"error\")\r\n        })\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <Container>\r\n                <Box pt={5}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={3}>\r\n                        <PlayersAutoComplete\r\n                            players = {this.state.players}\r\n                            handlePlayerToggle = {this.handlePlayerToggle}\r\n                            playersCompare = {this.state.playersCompare}\r\n                            ///checked = {this.state.playersCompare.map(player => player.id).sort()}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <Grid container justify='space-between' alignItems='center'>\r\n                            <Grid item>\r\n                            <FormControl>\r\n                                <InputLabel>Level</InputLabel>\r\n                                <Select\r\n                                    value={this.state.selectedLevel}\r\n                                    onChange={this.handleLevelChange}\r\n                                >\r\n                                    {levelList.map(level => <MenuItem value={level.name}>{level.name}</MenuItem> )}\r\n                                </Select>\r\n                            </FormControl>\r\n                            </Grid>\r\n                            <Grid item>\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n                                startIcon={<ClearAll />}\r\n                                onClick={this.handleClearAllClick}\r\n                                style={{float:'right'}}\r\n                            >\r\n                                Clear\r\n                            </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <RankedPlayersList\r\n                            playersCompare = {this.state.playersCompare}\r\n                            reorder = {this.reorder}\r\n                            playerRemoved = {this.playerRemoved}\r\n                        />\r\n                    </Grid>\r\n            \r\n                </Grid>\r\n                \r\n                </Box>\r\n            </Container>\r\n\r\n        )\r\n    }\r\n\r\n    private readonly handlePlayerToggle = (player: Player): void => {\r\n        if(this.state.playersCompare.some(p => p.id==player.id)){\r\n            this.playerRemoved(player.id)\r\n        }\r\n        else{\r\n            this.playerAdded(player);\r\n        }\r\n    }\r\n    private readonly playerAdded = (player: Player): void => {\r\n\r\n        this.setState(prevState => ({\r\n            ...prevState,\r\n            playersCompare: this.recalc(prevState.playersCompare.concat({\r\n                ...player, \r\n                pos:prevState.playersCompare.length+1, \r\n                score:-1, \r\n                lowestScore:-1,\r\n                newRank:-1,\r\n                newPoints:-1\r\n            }), prevState.selectedLevel)\r\n        }))\r\n        $.ajax('https://thcserver.herokuapp.com/single/'+player.id)\r\n        .then(res => {\r\n            \r\n            let score = Number(res);\r\n            let items = [...this.state.playersCompare]\r\n            for(var i=0; i<items.length; i++){\r\n                if(items[i].id === player.id && items[i].lowestScore===-1){\r\n                    let item = {...items[i]}\r\n                    item.lowestScore=score\r\n                    \r\n                    items[i]=item\r\n                    \r\n                    this.setState({playersCompare: this.recalc(items, this.state.selectedLevel)})\r\n\r\n                    break\r\n                }\r\n            }\r\n        \r\n        })\r\n        .catch(() => {\r\n            console.log(\"error\")\r\n        })\r\n\r\n    }\r\n    private readonly handleClearAllClick = (): void => {\r\n        this.setState({\r\n            playersCompare: []\r\n        })\r\n    }\r\n    private readonly playerRemoved = (playerId: string): void => {\r\n        this.setState(({playersCompare, selectedLevel}) => ({\r\n            playersCompare: this.recalc(playersCompare.filter(player => player.id !== playerId), selectedLevel)\r\n        }))\r\n    }\r\n    private readonly handleLevelChange = (e: any): void => {\r\n        \r\n        this.setState(({playersCompare}) => ({\r\n            selectedLevel: e.target.value,\r\n            playersCompare: this.recalc(playersCompare, e.target.value)\r\n            \r\n        }));\r\n    }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom';\nimport { Route } from 'react-router';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Home } from './components/home';\n\n\n\n\n\nexport default class App extends Component {\n  static displayName = App.name;\n  \n  render () {\n    return (\n      <HashRouter>\n        <Route exact path='/' component={Home} />\n      </HashRouter>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}