{"version":3,"sources":["components/styles/playerlist.module.css","data/scorecalc-data.ts","services/player-service.ts","components/players-autocomplete.tsx","components/rankedplayers-list.tsx","components/ranker.tsx","store/ranker/ranker-actions.ts","store/ranker/ranker-types.ts","services/tournament-service.ts","services/country-service.ts","components/player-card.tsx","components/players-chart.tsx","components/progress.tsx","components/navbar.tsx","components/home.tsx","App.tsx","store/players/player-actions.ts","store/players/player-types.ts","serviceWorker.ts","store/players/player-reducers.ts","store/ranker/ranker-reducers.ts","store/combineReducers.ts","store/index.ts","store/createStore.ts","index.tsx"],"names":["module","exports","levelList","name","coefficient","winnerpoints","percentageNormalList","tournamentAge","percentage","percentageExceptionList","exceptionInterval","Date","UTC","playersService","rankPlayers","players","prefScores","i","length","lowestScore","newPoints","points","Math","max","score","rank","j","newRank","recalc","level","pos","value","map","p","sort","a","b","valueSum","min","maxScore","round","content","stringArray","split","ln","ret","player","Number","id","club","nation","push","el","document","createElement","innerHTML","list","getElementsByClassName","cnt","ind","indexOf","substr","Array","fill","PlayersAutoComplete","state","searchText","handleSearchChange","e","setState","target","TextField","label","variant","onChange","this","fullWidth","InputProps","startAdornment","InputAdornment","position","Search","endAdornment","IconButton","size","onClick","Clear","dense","props","filter","toLowerCase","includes","slice","from","ListItem","key","button","handlePlayerToggle","ListItemText","primary","secondary","ListItemSecondaryAction","Checkbox","edge","checked","playersCompare","some","Box","pt","pl","pr","Skeleton","width","Component","listItemStyle","boxShadow","backgroundColor","marginTop","marginBottom","borderRadius","mobileListItemStyle","paddingRight","paddingLeft","ratingUpStyle","fontWeight","color","ratingDownStyle","ratingConstantStyle","SortableItem","SortableElement","children","isTabletOrMobile","useMediaQuery","maxWidth","style","onMouseEnter","body","cursor","onMouseLeave","SortableList","SortableContainer","paddingTop","ResponsiveListItem","undefined","RankedPlayersList","isMobile","onSortStart","onSortEnd","oldIndex","newIndex","reorder","shouldCancelStart","nearestViewportElement","useWindowAsScrollContainer","lockAxis","pressDelay","helperClass","styles","selected","Grid","item","xs","sm","md","minWidth","textAlign","float","index","marginRight","container","direction","mr","abs","justify","matches","display","alignItems","justifyContent","playerRemoved","Remove","fontSize","RankerComponent","levelName","levelFound","find","updateRankerState","rankerState","arrayMove","selectedLevel","forceAdd","playerAdded","concat","$","ajax","then","res","items","catch","console","log","handleClearAllClick","playerId","handleLevelChange","location","addPlayer","pb","spacing","bottomNavVal","FormControl","InputLabel","Select","MenuItem","Button","startIcon","ClearAll","Typography","align","fontFamily","marginLeft","BottomNavigation","newValue","bottom","left","zIndex","showLabels","BottomNavigationAction","icon","GroupAdd","List","Ranker","connect","ranker","dispatch","type","payload","tournamentsService","addYears","dt","n","dtt","setFullYear","getFullYear","getPointsByDate","tournaments","percentageList","datesToCheck","newDate","date","getTime","best5","best","sum","convertDateToString","toUTCString","getChartData","points01","points02","points03","scalePointsByDate","step","startRange","endRange","startTime","endTime","getMaxDate","getMinDate","getChartDataArray","yearRange","density","playerPoints","playerPointsException","playerPoints1","startDate","endDate","res1","res2","res3","newEl","pop","getChartDataArrayCompare","playerPointsException1","playerPoints2","playerPointsException2","points11","points12","points13","getCountry","countryCodes","country","fifa","alpha2code","a2","PlayerDetail","bold","text","PlayerContent","CardContent","homePage","paddingBottom","withFlag","alignSelf","objectFit","alt","code","margin","ArrowForward","toString","PlayerSkeleton","height","PlayerHomeCard","history","useHistory","Card","CardActionArea","PlayerCard","useSelector","flexDirection","CardActions","href","disabled","pathname","flex","PlayersChart","currentYear","player2Color","player1Color","handleYearChange","event","prevProps","playerPointsNormal1","prevState","getYearRange","getUTCFullYear","playerName1","playerName2","Slider","valueLabelDisplay","aria-labelledby","marks","overflow","data","playerPointsNormal2","strokeDasharray","dataKey","getPayload","stroke","dot","strokeWidth","x","ProgressComponent","playerUpdating","selectedPlayer","handleValueChange","handlePlayerChange","getPlayerPoints","normal","exception","handlePlayerCompareChange","Promise","resolve","reject","getJSON","always","match","params","getPlayerValue","CircularProgress","Autocomplete","blurOnSelect","options","getOptionLabel","option","renderInput","filterOptions","createFilterOptions","limit","loading","pointerEvents","top","Progress","navBarItemStyle","buttonSelectedStyle","navList","url","NavBar","useState","opened","setOpened","toggleDrawer","Drawer","anchor","open","onClose","src","Divider","component","to","exact","activeStyle","AppBar","Container","Home","playerCount","setPlayerCount","Whatshot","WebkitTextStroke","WebkitTextStrokeColor","gridGap","gridTemplateColumns","count","skeletons","getSkeletons","AppComponent","parseContent","getPlayerScores","updatePlayersState","fixPlayers","path","displayName","App","playersState","Boolean","window","hostname","initialState","rootReducer","combineReducers","action","store","createStore","reducer","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.c8860bd8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"selected\":\"playerlist_selected__3NSKn\"};","export interface Level {\r\n    name: string,\r\n    coefficient: number,\r\n    winnerpoints: number\r\n}\r\n\r\nexport const levelList: Level[] = [\r\n    {name: \"Level 1 (World)\", coefficient: 0.96, winnerpoints: 1000},\r\n    {name: \"Level 1 (Continental)\", coefficient: 0.96, winnerpoints: 600},\r\n    {name: \"Level 2\", coefficient: 0.92, winnerpoints: 500},\r\n    {name: \"Level 3\", coefficient: 0.89, winnerpoints: 100},\r\n    {name: \"Level 4\", coefficient: 0.83, winnerpoints: 70},\r\n    {name: \"Level 5\", coefficient: 0.60, winnerpoints: 40},\r\n    {name: \"Level 6\", coefficient: 0.40, winnerpoints: 20},\r\n]\r\n\r\nexport interface PointsPercentage {\r\n    tournamentAge: number,\r\n    percentage: number\r\n}\r\n\r\nexport const percentageNormalList: PointsPercentage[] = [\r\n    {\r\n        tournamentAge: 0,\r\n        percentage: 1\r\n    },\r\n    {\r\n        tournamentAge: 2,\r\n        percentage: 0.8\r\n    },\r\n    {\r\n        tournamentAge: 3,\r\n        percentage: 0.6\r\n    },\r\n    {\r\n        tournamentAge: 4,\r\n        percentage: 0.4\r\n    },\r\n    {\r\n        tournamentAge: 5,\r\n        percentage: 0.2\r\n    },\r\n    {\r\n        tournamentAge: 6,\r\n        percentage: 0\r\n    },\r\n]\r\nexport const percentageExceptionList: PointsPercentage[] = [\r\n    {\r\n        tournamentAge: 0,\r\n        percentage: 1\r\n    },\r\n    {\r\n        tournamentAge: 3,\r\n        percentage: 0.6\r\n    },\r\n    {\r\n        tournamentAge: 4,\r\n        percentage: 0.4\r\n    },\r\n    {\r\n        tournamentAge: 5,\r\n        percentage: 0.2\r\n    },\r\n    {\r\n        tournamentAge: 6,\r\n        percentage: 0\r\n    },\r\n]\r\nexport const exceptionInterval: Date[] = [\r\n    new Date(Date.UTC(2020, 9, 5)),\r\n    new Date(Date.UTC(2021, 6, 1))\r\n]","import { Level } from \"../data/scorecalc-data\";\r\n\r\n\r\nexport interface Player{\r\n    name: string,\r\n    id: string,\r\n    rank: number,\r\n    nation: string,\r\n    points: number,\r\n    value: number\r\n    club: string\r\n}\r\n\r\nexport interface PlayerRanked extends Player{\r\n    pos: number\r\n    lowestScore: number\r\n    score: number\r\n    newRank: number\r\n    newPoints: number\r\n}\r\n\r\nclass PlayersService {\r\n\r\n    //private prefScores:number[] = []\r\n\r\n    rankPlayers = (players: PlayerRanked[], prefScores:number[]): PlayerRanked[] => {\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n            players[i].newPoints = players[i].points + Math.max(0, players[i].score - players[i].lowestScore)\r\n        }\r\n        for(let i=0; i<players.length; i++){\r\n            if(players[i].lowestScore === -1){\r\n                continue\r\n            }\r\n\r\n            let rank: number = prefScores[players[i].newPoints + 1] + 1\r\n            for(let j=0; j<players.length; j++){\r\n                if(players[j].lowestScore === -1)continue\r\n                if(players[j].points>players[i].newPoints)rank--\r\n                if(players[j].newPoints>players[i].newPoints)rank++\r\n            }\r\n            players[i].rank = prefScores[players[i].points + 1] + 1\r\n            players[i].newRank = rank\r\n        }\r\n\r\n        return players\r\n    }\r\n\r\n    recalc = (players: PlayerRanked[], level: Level): PlayerRanked[] => {\r\n        \r\n        \r\n        //set player pos\r\n        for(var i=0; i<players.length; i++){\r\n            players[i].pos=i+1\r\n            players[i].score=0;\r\n        }\r\n        \r\n        \r\n        if(players.length<4){\r\n            return players;\r\n        }\r\n        \r\n        \r\n        //which player beaten\r\n        var value:number[] = players.map(p => p.value).sort((a,b) => b-a)\r\n        for(let i=0; i+1<players.length; i++){\r\n            let valueSum: number = 0;\r\n            for(var j=i; j<Math.min(i+4, players.length); j++){\r\n                valueSum+=value[j]\r\n            }\r\n            players[i].score = Math.max(players[i].score, (valueSum/4)*level.coefficient);\r\n        }\r\n        //number of beaten\r\n        for(let i=0; i<players.length; i++){\r\n            let maxScore: number = (((70-1)*(players.length - i - 1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, Math.min(maxScore,players.length-i))\r\n        }\r\n\r\n        //scalar\r\n        let points:number = level.winnerpoints\r\n        for(let i=0; i+1<players.length; i++){\r\n            players[i].score = Math.max(players[i].score, points)\r\n            points/=2\r\n        }\r\n\r\n        //linear\r\n        for(let i=0; i<players.length; i++){\r\n            let score: number = (((level.winnerpoints-1)*(players.length-i-1))/(players.length-1))+1\r\n            players[i].score = Math.max(players[i].score, score)\r\n        }\r\n\r\n        //sum up\r\n        for(let i=0; i<players.length; i++){\r\n            players[i].score = Math.round(players[i].score - 0.05)\r\n        }\r\n        players[0].score+=10\r\n\r\n        return players\r\n    }\r\n\r\n    parseContent(content: string): Player[]{\r\n        const stringArray = content.split('\\n').map((ln) => {\r\n            return ln.split('\\t');\r\n        });\r\n        let ret: Player[] = []\r\n        for(var i=2; i+1<stringArray.length; i++){\r\n            const player:Player = {\r\n                rank: Number(stringArray[i][0]),\r\n                id: stringArray[i][1],\r\n                name: stringArray[i][2],\r\n                club: stringArray[i][3],\r\n                nation: stringArray[i][4],\r\n                points: Number(stringArray[i][5]),\r\n                value: Number(stringArray[i][6]),\r\n            }\r\n            ret.push(player)\r\n        }\r\n        return ret\r\n    }\r\n\r\n    parsePlayerMinPoints(content: string): number{\r\n        var el = document.createElement('html');\r\n        el.innerHTML = content\r\n        var list = el.getElementsByClassName(\"normTour\");\r\n        \r\n        var ret:number = 100000;\r\n        var cnt:number = 0;\r\n        for(var i=6; i<list.length; i+=7){\r\n            let ind:number = list[i].innerHTML.indexOf('(')\r\n            if(ind===-1)ind=list[i].innerHTML.length\r\n            let score:string = list[i].innerHTML.substr(0, ind);\r\n            ret = Math.min(ret, Number(score));\r\n            cnt++\r\n        }\r\n        if(cnt<5)ret=0\r\n        return ret\r\n    }\r\n\r\n    getPlayerScores(players: Player[]): number[]{\r\n        let prefScores:number[] = new Array(6005).fill(0)\r\n        for(let i=0; i<players.length; i++){\r\n            prefScores[players[i].points]++;\r\n        }\r\n        \r\n        for(let i=6000; i>=0; i--){\r\n            prefScores[i]+=prefScores[i+1]\r\n        }\r\n        return prefScores\r\n\r\n    }\r\n\r\n    fixPlayers(players: Player[], prefScores: number[]): Player[]{\r\n        for(let player of players){\r\n            if(player.club === '???'){\r\n                player.club = 'no club'\r\n            }\r\n            player.rank = prefScores[player.points+1]+1\r\n        }\r\n        return players\r\n    }\r\n\r\n}\r\n\r\nconst playersService = new PlayersService();\r\nexport default playersService","import { Box, Checkbox, IconButton, InputAdornment, List, ListItem, ListItemSecondaryAction, ListItemText } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Clear, Remove, Search } from '@material-ui/icons';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\nimport React, { Component } from 'react';\r\nimport { Player } from '../services/player-service';\r\n//import matchSorter from 'match-sorter'\r\n\r\ninterface OwnProps{\r\n    players: Player[]\r\n    handlePlayerToggle: (player: Player) => void\r\n    playersCompare: Player[]\r\n}\r\ninterface State{\r\n    searchText: string\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class PlayersAutoComplete extends Component<Props, State>{\r\n    public readonly state: State = {\r\n        searchText: ''\r\n    }\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n\r\n            <>\r\n                \r\n\r\n                <TextField \r\n                    label=\"Players\" \r\n                    variant=\"outlined\" \r\n                    onChange={this.handleSearchChange} \r\n                    fullWidth\r\n                    value = {this.state.searchText}\r\n                    InputProps={{\r\n                        startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                                <Search/>\r\n                            </InputAdornment>\r\n                        ),\r\n                        endAdornment: (\r\n                            this.state.searchText.length ?\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton \r\n                                    size='small'\r\n                                    onClick = {() => {\r\n                                        this.setState({\r\n                                            searchText: ''\r\n                                        })\r\n                                    }}\r\n                                >\r\n                                    <Clear/>\r\n                                </IconButton>\r\n                            </InputAdornment>\r\n                            : null\r\n                        )\r\n                    }}\r\n                />\r\n                <List dense>\r\n                    {(!this.props.players.length ? Array.from(new Array(10)) : \r\n                        this.props.players.filter(p => p.name.toLowerCase().includes(this.state.searchText.toLowerCase())).slice(0, 10))\r\n                        .map((player) => {\r\n                            return (\r\n                                player ? (\r\n                                    <ListItem key={player.id} button onClick={() => this.props.handlePlayerToggle(player)}>\r\n                                        <ListItemText id={player.id+player.name} primary={player.name} secondary={player.club} />\r\n                                        <ListItemSecondaryAction>\r\n                                            <Checkbox\r\n                                                edge=\"end\"\r\n                                                onChange={() => this.props.handlePlayerToggle(player)}\r\n                                                checked={this.props.playersCompare.some(p => p.id==player.id)}\r\n                                            />\r\n                                        </ListItemSecondaryAction>\r\n                                    </ListItem>\r\n                                ) : (\r\n                                    <Box pt={2} pl={1} pr={1}>\r\n                                        <Skeleton />\r\n                                        <Skeleton width=\"60%\" />\r\n                                    </Box>\r\n                                )\r\n                            )\r\n                        })}\r\n                </List>\r\n            </>\r\n        )\r\n    }\r\n    private readonly handleSearchChange = (e: any): void => {\r\n        this.setState({searchText: e.target.value});\r\n    }\r\n}","import { Box, Grid, IconButton, List, ListItem, ListItemText } from \"@material-ui/core\";\r\nimport { Remove } from \"@material-ui/icons\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport CSS from 'csstype';\r\nimport React, { Component } from \"react\";\r\nimport MediaQuery, { useMediaQuery } from 'react-responsive';\r\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\r\nimport { PlayerRanked } from \"../services/player-service\";\r\nimport styles from './styles/playerlist.module.css';\r\n\r\nconst listItemStyle: CSS.Properties = {\r\n    boxShadow: '0 1.5px 4px rgba(0, 0, 0, 0.2)',\r\n    backgroundColor: 'rgb(255, 255, 255)',\r\n    marginTop: '10px',\r\n    marginBottom: '10px',\r\n    borderRadius: '7px'\r\n}\r\n\r\nconst mobileListItemStyle: CSS.Properties = {\r\n    ...listItemStyle,\r\n    paddingRight: '5px',\r\n    paddingLeft: '10px'\r\n}\r\n\r\nconst ratingUpStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#5eb560'\r\n}\r\nconst ratingDownStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#f97373'\r\n}\r\nconst ratingConstantStyle: CSS.Properties = {\r\n    fontWeight: 600,\r\n    color: '#969696'\r\n}\r\n\r\nconst tabletMaxWidth = 800\r\n\r\nconst SortableItem = SortableElement(({children}:any) => { \r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return(\r\n        <ListItem \r\n            \r\n            style={isTabletOrMobile ? mobileListItemStyle : listItemStyle}\r\n            onMouseEnter={ (): void => { if (document.body.style.cursor !== 'grabbing') document.body.style.cursor = 'grab' } }\r\n            onMouseLeave={ (): void => { if (document.body.style.cursor === 'grab') document.body.style.cursor = '' } }\r\n        >\r\n            {children}\r\n        </ListItem>\r\n        )\r\n    });\r\n    \r\nconst SortableList = SortableContainer(({children}:any) => {\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return <List dense={isTabletOrMobile} style={{paddingTop:0}}>{children}</List>;\r\n});\r\nconst ResponsiveListItem = ({children}:any) => {\r\n    const isTabletOrMobile = useMediaQuery({ maxWidth: tabletMaxWidth })\r\n    return <ListItem style={isTabletOrMobile ? {paddingRight:'5px', paddingLeft:'10px'}:undefined}>{children}</ListItem>\r\n}\r\n\r\n\r\ninterface OwnProps{\r\n    playersCompare: PlayerRanked[] \r\n    reorder: ({oldIndex, newIndex}: any) => void\r\n    playerRemoved: (playerId: string) => void\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nexport class RankedPlayersList extends Component<Props, {}>{\r\n    \r\n    render(): React.ReactNode{\r\n        return(\r\n            <MediaQuery maxWidth={599}>\r\n            {(isMobile) => \r\n            <SortableList \r\n                onSortStart={() => (document.body.style.cursor = 'grabbing')}\r\n                onSortEnd={({oldIndex, newIndex}: any) => {\r\n                    document.body.style.cursor = 'default'\r\n                    this.props.reorder({oldIndex, newIndex})\r\n                }} \r\n                shouldCancelStart = {(e: any) => {\r\n                    if(\r\n                        e.target.id == \"buttonRemove\" || \r\n                        e.target.nearestViewportElement !== undefined && \r\n                        e.target.nearestViewportElement.id === \"buttonRemove\"\r\n                    ){\r\n                        return true\r\n                    }\r\n                }} \r\n                useWindowAsScrollContainer\r\n                lockAxis = 'y'\r\n                pressDelay = {isMobile ? 200 : 0}\r\n                helperClass = {styles.selected}\r\n            >\r\n                <ResponsiveListItem>\r\n                    <Grid item xs = {1}>\r\n                        <ListItemText >#</ListItemText>\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={4}>\r\n                        <ListItemText>Name</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <ListItemText>Rank</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        <ListItemText >Points</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={2} sm={2} md={2} style={{minWidth: '65px'}}>  \r\n                        <ListItemText style={{textAlign:'right', float:'right'}}>Tournament Points</ListItemText>\r\n                    </Grid>\r\n                </ResponsiveListItem>\r\n                {this.props.playersCompare.map((value, index) => (\r\n                <SortableItem  key={index} index={index} >\r\n                    <Grid item xs = {1}>\r\n                    <ListItemText><b>{value.pos}</b></ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs={3} sm={4}>\r\n                        <ListItemText style={{marginRight:5}}>{value.name}</ListItemText>\r\n\r\n                    </Grid>\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={65}/> :(\r\n                            <Grid container direction='row' >\r\n                                <Box mr={0.5}><ListItemText>{value.newRank}</ListItemText></Box>\r\n                                {\r\n                                    value.rank > value.newRank ? <ListItemText style={ratingUpStyle}><b>{`(+${Math.abs(value.rank-value.newRank)})`}</b></ListItemText>:\r\n                                    value.rank === value.newRank ? <ListItemText style={ratingConstantStyle}><b>{`(=${value.rank-value.newRank})`}</b></ListItemText> :\r\n                                    <ListItemText style={ratingDownStyle}><b>{`(-${Math.abs(value.rank-value.newRank)})`}</b></ListItemText>\r\n                                } \r\n                            </Grid>\r\n                            )\r\n                        }\r\n\r\n                    </Grid>\r\n\r\n                    <Grid item xs>\r\n                        {\r\n                            value.lowestScore===-1 ? <Skeleton width={65}/> :(\r\n                                <Grid container direction='row' >\r\n                                    <Box mr={0.5}><ListItemText >{value.newPoints}</ListItemText></Box>\r\n                                    {\r\n                                        value.points < value.newPoints ? <ListItemText style={ratingUpStyle}><b>{`(+${Math.abs(value.points-value.newPoints)})`}</b></ListItemText>:\r\n                                        <ListItemText style={ratingConstantStyle}><b> {`(=${value.points-value.newPoints})`}</b></ListItemText> \r\n                                    } \r\n                                </Grid>\r\n                                )\r\n                        }\r\n                        \r\n\r\n                    </Grid>\r\n                      <Grid item xs={2} sm={2}  style={{minWidth: '65px'}}>  \r\n                         <Grid container direction='row' justify='flex-end' > \r\n                            <MediaQuery maxWidth={tabletMaxWidth}>\r\n                                {(matches) => \r\n                                    <>\r\n                                        <Box  display=\"flex\" alignItems=\"center\" justifyContent=\"flex-end\" marginRight={matches?'2px':2} >\r\n                                            <ListItemText  ><b>{value.score}</b></ListItemText>\r\n                                        </Box>\r\n                                        <IconButton size='small' onClick = {() => this.props.playerRemoved(value.id)} id=\"buttonRemove\">\r\n                                            <Remove fontSize={matches ? 'small' : undefined} id=\"buttonRemove\"/>\r\n                                        </IconButton>\r\n                                    </>\r\n                                    \r\n                                }\r\n                            </MediaQuery>\r\n                         </Grid> \r\n                     </Grid> \r\n                </SortableItem>\r\n                ))}\r\n            </SortableList>\r\n            }\r\n            </MediaQuery>\r\n        )\r\n    }\r\n\r\n}","import { BottomNavigation, BottomNavigationAction, Box, Button, Divider, FormControl, Grid, InputLabel, MenuItem, Select, Typography } from '@material-ui/core';\r\nimport { ClearAll, GroupAdd, List as ListIcon } from '@material-ui/icons';\r\nimport arrayMove from 'array-move';\r\nimport $ from \"jquery\";\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MediaQuery from 'react-responsive';\r\nimport { RouteComponentProps, StaticContext } from 'react-router';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { Level, levelList } from '../data/scorecalc-data';\r\nimport playersService, { Player, PlayerRanked } from '../services/player-service';\r\nimport { RootState } from '../store/combineReducers';\r\nimport { updateRankerState } from '../store/ranker/ranker-actions';\r\nimport { RankerState } from '../store/ranker/ranker-types';\r\nimport { PlayersAutoComplete } from './players-autocomplete';\r\nimport { RankedPlayersList } from './rankedplayers-list';\r\n\r\n\r\n\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps> & RouteComponentProps<{}, StaticContext, {addPlayer?: Player}>\r\n\r\n\r\nexport class RankerComponent extends Component<Props, {}>{ \r\n    \r\n    private readonly recalc = (players: PlayerRanked[], levelName: string): PlayerRanked[] => {\r\n        let levelFound = levelList.find(level => level.name==levelName)\r\n        let level:Level = levelFound ? levelFound : levelList[0]\r\n        return playersService.rankPlayers(playersService.recalc(players, level), this.props.prefScores);\r\n    }\r\n\r\n    private readonly reorder = ({oldIndex, newIndex}: any): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState, \r\n            playersCompare: this.recalc(arrayMove(this.props.rankerState.playersCompare, oldIndex, newIndex), this.props.rankerState.selectedLevel)\r\n        })\r\n      };\r\n\r\n    componentDidMount():void {\r\n        if(this.props.location.state!==undefined && this.props.location.state!==null &&this.props.location.state.addPlayer !== undefined){\r\n            this.handlePlayerToggle(this.props.location.state.addPlayer, true)\r\n        }\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            <>\r\n                <MediaQuery maxWidth={599}>\r\n                {(isMobile) => \r\n                <Box pb={isMobile ? 6 : 2}>\r\n                    <Grid container spacing={3}>\r\n                            <>\r\n                            {(!isMobile || this.props.rankerState.bottomNavVal === 0) &&\r\n                            <Grid item xs={12}  sm={3} style={{minWidth:'200px'}}>\r\n                                <PlayersAutoComplete\r\n                                    players = {this.props.players}\r\n                                    handlePlayerToggle = {this.handlePlayerToggle}\r\n                                    playersCompare = {this.props.rankerState.playersCompare}\r\n                                />\r\n                            </Grid>\r\n                            }\r\n                        \r\n                            {(!isMobile || this.props.rankerState.bottomNavVal === 1) &&\r\n                                <Grid item xs={12} sm>\r\n                                    <Grid container justify='space-between' alignItems='center'>\r\n                                        <Grid item>\r\n                                        <FormControl>\r\n                                            <InputLabel>Level</InputLabel>\r\n                                            <Select\r\n                                                value={this.props.rankerState.selectedLevel}\r\n                                                onChange={this.handleLevelChange}\r\n                                            >\r\n                                                {levelList.map(level => <MenuItem value={level.name}>{level.name}</MenuItem> )}\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                        </Grid>\r\n                                        <Grid item>\r\n                                        <Button\r\n                                            variant=\"contained\"\r\n                                            color=\"secondary\"\r\n                                            startIcon={<ClearAll />}\r\n                                            onClick={this.handleClearAllClick}\r\n                                            style={{float:'right'}}\r\n                                        >\r\n                                            Clear\r\n                                        </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Typography align='right' variant='body2'style={{marginTop:20, marginRight:3}} color=\"textSecondary\">\r\n                                        <i>{isMobile ? \"*Hold and drag to reorder\" :\r\n                                            \"*Drag to reorder\"}</i>\r\n                                    </Typography>\r\n                                    <RankedPlayersList\r\n                                        playersCompare = {this.props.rankerState.playersCompare}\r\n                                        reorder = {this.reorder}\r\n                                        playerRemoved = {this.playerRemoved}\r\n                                    />\r\n                                    {this.props.rankerState.playersCompare.length < 4 &&\r\n                                    <div style={{textAlign:'center', fontSize:'14px', fontFamily: 'Arial', color:'#1976d2'}}>\r\n                                        <span >\r\n                                            {`Add`}\r\n                                        </span>\r\n                                        <span style={{marginLeft:4, marginRight:4,color:'#dc004e', fontWeight:600}}>\r\n                                            {4-this.props.rankerState.playersCompare.length}\r\n                                        </span>\r\n                                        <span  >\r\n                                            {`more player${this.props.rankerState.playersCompare.length<3 ? 's':''} to make this tournament rated`}\r\n                                        </span>\r\n                                    </div>\r\n                                    }\r\n                                </Grid>\r\n                            \r\n                            }\r\n                            \r\n                        </>\r\n                    </Grid>\r\n                </Box>\r\n                }\r\n            \r\n                </MediaQuery>\r\n            <MediaQuery maxWidth={599}>\r\n                <BottomNavigation\r\n                    value = {this.props.rankerState.bottomNavVal}\r\n                    onChange={(e, newValue) => {\r\n                        this.props.updateRankerState({\r\n                            ...this.props.rankerState,\r\n                            bottomNavVal: newValue\r\n                        })\r\n                    }}\r\n                    style = {{\r\n                        width:'100%',\r\n                        position: 'fixed',\r\n                        bottom: '0',\r\n                        //right:'0',\r\n                        left:'0',\r\n                        boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',\r\n                        zIndex: 99999\r\n                    }}\r\n                    showLabels\r\n                >\r\n                    <BottomNavigationAction label=\"Select Players\" style={{maxWidth:'1000px'}} icon={<GroupAdd/>}/>\r\n                    <BottomNavigationAction label=\"Standings\" style={{maxWidth:\"1000px\"}} icon={<ListIcon/>}/>\r\n                </BottomNavigation>\r\n            </MediaQuery>\r\n            </>\r\n        )\r\n    }\r\n\r\n    public readonly handlePlayerToggle = (player: Player, forceAdd?: boolean): void => {\r\n        if(this.props.rankerState.playersCompare.some(p => p.id==player.id)){\r\n            \r\n            \r\n            if(forceAdd!==true){\r\n                this.playerRemoved(player.id)\r\n            }\r\n            \r\n        }\r\n        else{\r\n            this.playerAdded(player);\r\n        }\r\n    }\r\n    private readonly playerAdded = (player: Player): void => {\r\n        \r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare.concat({\r\n                ...player, \r\n                pos:this.props.rankerState.playersCompare.length+1, \r\n                score:-1, \r\n                lowestScore:-1,\r\n                newRank:-1,\r\n                newPoints:-1\r\n            }), this.props.rankerState.selectedLevel)\r\n        })\r\n        $.ajax('https://serene-crag-74633.herokuapp.com/single/'+player.id)\r\n        .then(res => {\r\n            \r\n            let score = Number(res);\r\n            let items = [...this.props.rankerState.playersCompare]\r\n            for(var i=0; i<items.length; i++){\r\n                if(items[i].id === player.id && items[i].lowestScore===-1){\r\n                    let item = {...items[i]}\r\n                    item.lowestScore=score\r\n                    \r\n                    items[i]=item\r\n                    this.props.updateRankerState({\r\n                        ...this.props.rankerState,\r\n                        playersCompare: this.recalc(items, this.props.rankerState.selectedLevel)\r\n                    })\r\n\r\n                    break\r\n                }\r\n            }\r\n        \r\n        })\r\n        .catch(() => {\r\n            console.log(\"error\")\r\n        })\r\n\r\n    }\r\n    private readonly handleClearAllClick = (): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: []\r\n        })\r\n    }\r\n    private readonly playerRemoved = (playerId: string): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare.filter(player => player.id !== playerId), this.props.rankerState.selectedLevel)\r\n        })\r\n    }\r\n    private readonly handleLevelChange = (e: any): void => {\r\n        this.props.updateRankerState({\r\n            ...this.props.rankerState,\r\n            selectedLevel: e.target.value,\r\n            playersCompare: this.recalc(this.props.rankerState.playersCompare, e.target.value)\r\n        })\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) =>({\r\n    players: state.players.players,\r\n    prefScores: state.players.prefScores,\r\n    rankerState: state.ranker\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>({\r\n    updateRankerState: (rankerState: RankerState) => dispatch(updateRankerState(rankerState))\r\n});\r\n  \r\n\r\nconst Ranker = connect(mapStateToProps, mapDispatchToProps)(RankerComponent)\r\nexport { Ranker };\r\n","import { RankerActionTypes, RankerState, UPDATE_RANKER_STATE } from \"./ranker-types\";\r\n\r\nexport function updateRankerState(rankerState: RankerState): RankerActionTypes{\r\n    return{\r\n        type: UPDATE_RANKER_STATE,\r\n        payload: rankerState\r\n    }\r\n}","import { PlayerRanked } from \"../../services/player-service\";\r\n\r\nexport const UPDATE_RANKER_STATE = 'UPDATE_RANKER_STATE'\r\n\r\nexport interface RankerState {\r\n    playersCompare: PlayerRanked[] \r\n    selectedLevel: string,\r\n    bottomNavVal: number\r\n}\r\n\r\ninterface UpdateRankerStateAction {\r\n    type: typeof UPDATE_RANKER_STATE\r\n    payload: RankerState\r\n}\r\n\r\nexport type RankerActionTypes = \r\n    | UpdateRankerStateAction","import {  exceptionInterval, PointsPercentage } from \"../data/scorecalc-data\";\r\nimport { Player } from \"./player-service\";\r\n\r\nexport interface Tournament{\r\n    date: Date,\r\n    name: string,\r\n    series: string[],\r\n    city: string,\r\n    pos: number,\r\n    points: number\r\n}\r\n\r\nexport interface PlayerWithTournaments extends Player{\r\n    tournaments: PointsByDate[]\r\n}\r\n\r\nexport interface PointsByDate {\r\n    date: Date,\r\n    points: number\r\n}\r\n\r\ninterface PointsByDatePrecalc extends PointsByDate {\r\n    ind: number\r\n}\r\n\r\nexport interface ChartData {\r\n    date: string,\r\n    points01?: number,\r\n    points02?: number,\r\n    points03?: number,\r\n    points11?: number,\r\n    points12?: number,\r\n    points13?: number,\r\n}\r\n\r\nclass TournamentsService {\r\n\r\n    private readonly addYears = (dt: Date, n: number): Date => {\r\n        let dtt = new Date(dt)\r\n        return new Date(dtt.setFullYear(dtt.getFullYear() + n))\r\n    }\r\n\r\n    getPointsByDate = (tournaments: Tournament[], percentageList: PointsPercentage[]): PointsByDate[] => {\r\n        \r\n        let datesToCheck: PointsByDatePrecalc[] = []\r\n        for(let i=0; i<tournaments.length; i++) {\r\n            for(let percentage of percentageList){\r\n                let newDate: Date = this.addYears(tournaments[i].date, percentage.tournamentAge)\r\n\r\n                datesToCheck.push({\r\n                    date: newDate,\r\n                    points: Math.round(tournaments[i].points * percentage.percentage),\r\n                    ind: i\r\n                })\r\n\r\n            }\r\n        }\r\n\r\n        datesToCheck = datesToCheck.sort((a, b) => {\r\n            return new Date(a.date).getTime() - new Date(b.date).getTime()\r\n        })\r\n        \r\n        let best5: PointsByDatePrecalc[] = []\r\n        let ret:PointsByDate[] = []\r\n\r\n        for(let date of datesToCheck){\r\n            best5 = best5.filter((best) => best.ind !== date.ind)\r\n            best5.push(date)\r\n            best5 = best5.sort((a, b) => b.points - a.points)\r\n            let sum = 0\r\n\r\n            for(let i=0; i< Math.min(best5.length, 5); i++){\r\n                sum += best5[i].points;\r\n            }\r\n            ret.push({\r\n                date: date.date,\r\n                points: sum\r\n            })\r\n        }\r\n\r\n\r\n        return ret\r\n    }\r\n\r\n    convertDateToString = (date: Date): string  => {\r\n        return date.toUTCString().slice(5, 16);\r\n    }\r\n\r\n    getChartData = (date: number, score: number, type: number): ChartData => {\r\n        if(type==0){\r\n            return{\r\n                date: this.convertDateToString(new Date(date)),\r\n                points01: score\r\n            }\r\n        }\r\n        else if(type==1){\r\n            return{\r\n                date: this.convertDateToString(new Date(date)),\r\n                points02: score\r\n            }\r\n        }\r\n        else {\r\n            return{\r\n                date: this.convertDateToString(new Date(date)),\r\n                points03: score\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    scalePointsByDate = (points: PointsByDate[], step: number, startRange: Date, endRange: Date, type: number): ChartData[] => {\r\n        let startTime = startRange.getTime();\r\n        let endTime = endRange.getTime();\r\n\r\n        let ind = 0\r\n        let score = 0\r\n        let ret:ChartData[] = []\r\n        for(let i=startTime; i<endTime; i+=step){\r\n            while(ind < points.length && points[ind].date.getTime() <= i){\r\n                score = points[ind].points\r\n                ind++\r\n            }\r\n            ret.push(this.getChartData(i, score, type))\r\n        }\r\n        while(ind < points.length && points[ind].date.getTime() <= endTime){\r\n            score = points[ind].points\r\n            ind++\r\n        }\r\n        ret.push(this.getChartData(endTime, score, type))\r\n        return ret\r\n    }\r\n\r\n\r\n    getMaxDate = (a: Date, b:Date): Date=>{\r\n        if(a>b)return a\r\n        return b\r\n    }\r\n    getMinDate = (a: Date, b:Date): Date => {\r\n        if(a<b)return a\r\n        return b\r\n    }\r\n\r\n    getChartDataArray = (\r\n        yearRange: number[], \r\n        density: number, \r\n        playerPoints:PointsByDate[], \r\n        playerPointsException: PointsByDate[],\r\n        playerPoints1:PointsByDate[]\r\n    ): ChartData[] => {\r\n\r\n\r\n        let startDate: Date = this.getMaxDate(\r\n            new Date(Date.UTC(yearRange[0], 0)), \r\n            playerPoints1[0].date\r\n        )\r\n        let endDate: Date = this.getMinDate(\r\n            new Date(Date.UTC(yearRange[1], 0)), \r\n            playerPoints1[playerPoints1.length - 1].date\r\n        )\r\n        let step: number = (endDate.getTime() - startDate.getTime()) / density\r\n\r\n        let res1: ChartData[] = startDate < exceptionInterval[0] ? \r\n        this.scalePointsByDate(\r\n            playerPoints,\r\n            step, \r\n            startDate, \r\n            this.getMinDate( exceptionInterval[0], endDate),\r\n            0\r\n        ) : []\r\n        let res2: ChartData[] = endDate > exceptionInterval[0] && startDate < exceptionInterval[1]  ? \r\n        this.scalePointsByDate(\r\n            playerPointsException,\r\n            step, \r\n            this.getMaxDate(exceptionInterval[0], startDate), \r\n            this.getMinDate(exceptionInterval[1], endDate),\r\n            1\r\n        ) : []\r\n        let res3: ChartData[] = endDate > exceptionInterval[1] ? \r\n        this.scalePointsByDate(\r\n            playerPoints,\r\n            step, \r\n            this.getMaxDate(startDate, exceptionInterval[1]),\r\n            endDate,\r\n            2\r\n        ) : []\r\n\r\n        if(res1.length && res2.length && res1[res1.length - 1].date === res2[0].date){\r\n            let newEl: ChartData = {\r\n                date: res2[0].date,\r\n                points01: res1[res1.length - 1].points01,\r\n                points02: res2[0].points02\r\n            }\r\n            \r\n            res1.pop()\r\n            res2[0] = newEl\r\n        }\r\n        if(res2.length && res3.length && res2[res2.length - 1].date === res3[0].date){\r\n            let newEl: ChartData = {\r\n                date: res3[0].date,\r\n                points02: res2[res2.length - 1].points02,\r\n                points03: res3[0].points03\r\n            }\r\n            \r\n            res2.pop()\r\n            res3[0] = newEl\r\n        }\r\n        return res1.concat(res2.concat(res3));\r\n    }\r\n    getChartDataArrayCompare = (\r\n        yearRange: number[], \r\n        density: number, \r\n        playerPoints1:PointsByDate[], \r\n        playerPointsException1: PointsByDate[],\r\n        playerPoints2:PointsByDate[], \r\n        playerPointsException2: PointsByDate[]\r\n    ): ChartData[] => {\r\n        let res1: ChartData[] = this.getChartDataArray(\r\n            yearRange,\r\n            density, \r\n            playerPoints1, \r\n            playerPointsException1,\r\n            playerPoints1\r\n        )\r\n        let res2: ChartData[] = this.getChartDataArray(\r\n            yearRange,\r\n            density, \r\n            playerPoints2, \r\n            playerPointsException2,\r\n            playerPoints1\r\n        )\r\n        let ind = 0\r\n        for(let i=0; i<res1.length; i++){\r\n            if(ind < res2.length && res1[i].date === res2[ind].date){\r\n                res1[i].points11 = res2[ind].points01 \r\n                res1[i].points12 = res2[ind].points02 \r\n                res1[i].points13 = res2[ind].points03\r\n                \r\n                ind++            \r\n            }\r\n\r\n        }\r\n        return res1\r\n\r\n    }\r\n}\r\n\r\nconst tournamentsService = new TournamentsService();\r\nexport default tournamentsService","import countryCodes from '../data/countryCodes.json'\r\n\r\nexport interface CountryCode{\r\n    name: string; \r\n    alpha2code: string;\r\n}\r\n\r\nexport function getCountry(nation: string): CountryCode{\r\n    let ret = countryCodes.find(country => country.fifa===nation)\r\n    if(ret===undefined){\r\n        return {\r\n            name:\"Not Found\",\r\n            alpha2code:\"_empty\",\r\n        }\r\n    }\r\n    return {\r\n        name: ret.name,\r\n        alpha2code: ret.a2\r\n    }\r\n}","import { Button, CardActionArea, CardActions, CardContent, IconButton, Typography } from \"@material-ui/core\";\r\nimport Card from '@material-ui/core/Card';\r\nimport { ArrowForward } from \"@material-ui/icons\";\r\nimport { Skeleton } from \"@material-ui/lab\";\r\nimport React from \"react\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { useHistory } from \"react-router\";\r\nimport { getCountry } from \"../services/country-service\";\r\nimport { Player } from \"../services/player-service\";\r\nimport Flag from 'react-world-flags'\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../store/combineReducers\";\r\n\r\ninterface OwnProps{\r\n    player: Player | null\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\n\r\nfunction PlayerDetail(props: {text: string, value: string, bold?: boolean}){\r\n    return (\r\n        <>\r\n            <Typography align='right' style={{float:'right'}}>\r\n                {props.bold === true ? <b>{props.value}</b> : props.value}\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n                {props.text}\r\n            </Typography>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction PlayerContent(props: {player: Player, withFlag:boolean, homePage?:boolean}){\r\n    return(\r\n        <CardContent style={props.homePage===true ? undefined :{paddingBottom:4}}>\r\n            <div style={{display:'flex', marginBottom: props.homePage===true ? '0px':'12px'}}>\r\n                {props.withFlag && <Flag \r\n                    style={{alignSelf:'center', marginRight:'12px',width: props.homePage===true ? '60px':'90px',objectFit:'fill', boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',}}\r\n                    alt = {getCountry(props.player.nation).name}\r\n                    code={getCountry(props.player.nation).alpha2code.toLowerCase()}\r\n                />}\r\n                <Typography variant={props.homePage===true ? 'h6' : \"h5\"} align='center' style = {{margin:'auto'}} color={props.homePage===true?'textPrimary':\"secondary\"}>\r\n                    {props.player.name}\r\n                </Typography>\r\n                {props.homePage===true &&\r\n                    <IconButton >\r\n                        <ArrowForward fontSize='large'/>\r\n                    </IconButton>\r\n                }\r\n            </div>\r\n            {props.homePage!==true &&\r\n                <>\r\n                    <PlayerDetail text='Club' value={props.player.club} />\r\n                    <PlayerDetail text='Rank' value={props.player.rank.toString()} bold/>\r\n                    <PlayerDetail text='Points' value={props.player.points.toString()} bold/>\r\n                    <PlayerDetail text='Player Value' value={props.player.value.toString()}/>\r\n                </>\r\n            }\r\n            \r\n        </CardContent>\r\n    )\r\n}\r\nfunction PlayerSkeleton(){\r\n    return(\r\n        <CardContent >\r\n            <div style={{display:'flex'}}>\r\n                <div style={{alignSelf:'center'}}><Skeleton variant='rect' width={60} height={40} /></div>\r\n                <div style={{margin:'auto'}}><Skeleton variant='text' width='120px' height={30}/></div>\r\n                <div style={{alignSelf:'center'}}><IconButton><ArrowForward fontSize='large'/></IconButton></div>\r\n            </div>\r\n            \r\n        </CardContent>\r\n    )\r\n}\r\n\r\n\r\nexport function PlayerHomeCard(props: {player?: Player}){\r\n    let history = useHistory()\r\n    \r\n    function PlayerClicked(playerId?: string){\r\n        if(playerId==undefined)return\r\n        history.push(`/players/${playerId}`)\r\n    }\r\n    return(\r\n        <Card style = {{width:'100%', height:'100%'}}>\r\n            <CardActionArea onClick={() => PlayerClicked(props.player?.id)} >\r\n                {\r\n                    props.player === undefined ? <PlayerSkeleton/> :\r\n                    <PlayerContent player={props.player} withFlag homePage/>\r\n                }\r\n            </CardActionArea>\r\n        </Card>\r\n\r\n    )\r\n}\r\n\r\nexport default function PlayerCard(props: Props){\r\n    const isMobile = useMediaQuery({maxWidth: 959});\r\n    const history = useHistory()\r\n    const playersCompare = useSelector(\r\n        (state: RootState) => \r\n        state.ranker.playersCompare\r\n    )\r\n    return (\r\n        props.player === null ?\r\n        <Card style = {{ display:'flex', height: '230px', width:'100%', maxWidth:'650px', marginLeft:'auto', marginRight:'auto'}}>\r\n            <Typography style={{margin:'auto'}}>\r\n                No player selected\r\n            </Typography>\r\n        </Card>\r\n        :\r\n        <Card style = {{display:'flex',justifyContent:'flex-end', alignItems:'stretch',  maxWidth:'650px', marginLeft:'auto', marginRight:'auto', width:'100%'}}>\r\n                \r\n                    <div style={{display:'flex', flexDirection:'column', justifyContent:'space-between', width:'100%'}}>\r\n                        <PlayerContent player={props.player} withFlag={isMobile} />\r\n                        <CardActions>\r\n                            <Button \r\n                                size=\"small\" \r\n                                color=\"primary\"\r\n                                href =  {`https://stiga.trefik.cz/ithf/ranking/player.aspx?ID=${props.player.id}`}\r\n                                target = '_blank'\r\n                            >\r\n                                Learn More\r\n                            </Button>\r\n                            <Button \r\n                                size=\"small\" \r\n                                color=\"primary\"\r\n                                disabled={playersCompare.some(player => props.player?.id===player.id)}\r\n                                onClick = {() => {\r\n                                    history.push({\r\n                                        pathname: '/ranker',\r\n                                        state: {addPlayer: props.player}\r\n                                    })\r\n                                }}\r\n                            >\r\n                                Add to Ranker\r\n                            </Button>\r\n                        </CardActions>\r\n                    </div>\r\n            {!isMobile && <Flag \r\n                style={{width:'340px', flex:'0 0 340px', boxShadow: '0 0px 3px 0px rgb(150, 150, 150)',}}\r\n                alt = {getCountry(props.player.nation).name}\r\n                code={getCountry(props.player.nation).alpha2code.toLowerCase()}\r\n            />}\r\n        </Card>\r\n    )\r\n}","import { Slider, Typography } from \"@material-ui/core\";\r\nimport React, { Component } from \"react\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport { CartesianGrid, Legend, LegendPayload, Line, LineChart, ReferenceLine, ResponsiveContainer, Tooltip, XAxis, YAxis } from \"recharts\";\r\nimport { exceptionInterval } from \"../data/scorecalc-data\";\r\nimport tournamentsService, { PointsByDate } from \"../services/tournament-service\";\r\n\r\ninterface OwnProps{\r\n    playerPointsNormal1: PointsByDate[]\r\n    playerPointsException1: PointsByDate[]\r\n    playerPointsNormal2: PointsByDate[]\r\n    playerPointsException2: PointsByDate[]\r\n    playerName1?: string\r\n    playerName2?: string\r\n}\r\n\r\ntype Props = OwnProps\r\n\r\ninterface State{\r\n    yearRange: number[]\r\n}\r\n\r\n\r\nexport class PlayersChart extends Component<Props, State>{\r\n    \r\n    private currentYear = Math.max(new Date().getFullYear(), 2020)\r\n    public readonly state:State = {\r\n        yearRange: [2000, this.currentYear + 1],\r\n    }\r\n\r\n    public readonly player2Color: string = \"#8884d8\"\r\n    public readonly player1Color: string = \"#0004d8\"\r\n\r\n    componentDidUpdate(prevProps: Props){\r\n        if(prevProps.playerPointsNormal1 !== this.props.playerPointsNormal1){\r\n            this.setState((prevState) => ({\r\n                yearRange: [\r\n                    Math.min(  Math.min(this.getYearRange()[1], this.currentYear + 1), Math.max(this.getYearRange()[0], prevState.yearRange[0])),\r\n                    Math.max(this.getYearRange()[0], Math.min( Math.min(this.getYearRange()[1], this.currentYear + 1), prevState.yearRange[1]))\r\n                ]\r\n            }));\r\n        }\r\n    }\r\n\r\n    getYearRange(): number[]{\r\n        if(this.props.playerPointsNormal1.length === 0){\r\n            return [2000, this.currentYear + 7]\r\n        }\r\n        return [\r\n            this.props.playerPointsNormal1[0].date.getUTCFullYear(),\r\n            this.props.playerPointsNormal1[this.props.playerPointsNormal1.length-1].date.getUTCFullYear() + 1,\r\n        ]\r\n    }\r\n    \r\n    \r\n    getPayload(): LegendPayload[]{\r\n        let ret:LegendPayload[] = []\r\n        if(this.props.playerName1 !== undefined){\r\n            ret.push({\r\n                value: this.props.playerName1,\r\n                type: \"line\",\r\n                id:\"points01\",\r\n                color: this.player1Color\r\n            })\r\n        }\r\n        if(this.props.playerName2 !== undefined){\r\n            ret.push({\r\n                value: this.props.playerName2,\r\n                type: \"line\",\r\n                id:\"points02\",\r\n                color: this.player2Color\r\n            })\r\n        }\r\n        return ret\r\n    }\r\n\r\n    render(): React.ReactNode{\r\n\r\n        return(\r\n            <>\r\n                <div style={{paddingLeft:'10px', paddingRight:'10px'}}>\r\n                <Typography>\r\n                    Year Range\r\n                </Typography>\r\n                <Slider\r\n                    color = \"secondary\"\r\n                    value = {this.state.yearRange}\r\n                    onChange={this.handleYearChange}\r\n                    valueLabelDisplay=\"auto\"\r\n                    aria-labelledby=\"range-slider\"\r\n                    marks\r\n                    step = {1}\r\n                    min = {this.getYearRange()[0]}\r\n                    max = {this.getYearRange()[1]}\r\n                />\r\n                </div>\r\n                <MediaQuery maxWidth='599px'>{\r\n                    (isMobile) =>\r\n                <div style={{ width: '100%', height: isMobile ? 350:500, overflow:'hidden' }}>\r\n                    <ResponsiveContainer>\r\n                        {this.props.playerPointsNormal1.length ?\r\n\r\n                        <LineChart\r\n                            data={ this.props.playerPointsNormal2.length === 0 ? \r\n                                tournamentsService.getChartDataArray(\r\n                                    this.state.yearRange, \r\n                                    isMobile ? 20 : 40, \r\n                                    this.props.playerPointsNormal1, \r\n                                    this.props.playerPointsException1,\r\n                                    this.props.playerPointsNormal1) :\r\n                                tournamentsService.getChartDataArrayCompare(\r\n                                    this.state.yearRange, \r\n                                    isMobile ? 20 : 40,\r\n                                    this.props.playerPointsNormal1, \r\n                                    this.props.playerPointsException1, \r\n                                    this.props.playerPointsNormal2, \r\n                                    this.props.playerPointsException2)\r\n                            }\r\n                        >\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <YAxis width={40}/>\r\n                            <XAxis dataKey=\"date\"  />\r\n                            <Tooltip />\r\n                            <Legend  payload = {this.getPayload()} />\r\n                            <Line name={this.props.playerName1} type=\"monotone\" dataKey=\"points01\" stroke={this.player1Color} dot={false} strokeWidth = {2}/>\r\n                            <Line name={`${this.props.playerName1} (New Rules)`} type=\"monotone\" dataKey=\"points02\" stroke={this.player1Color} dot={false} strokeWidth = {2}/>\r\n                            <Line name={this.props.playerName1} type=\"monotone\" dataKey=\"points03\" stroke={this.player1Color} dot={false} strokeWidth = {2}/>\r\n                            {this.props.playerPointsNormal2.length > 0 && \r\n                                <Line name={this.props.playerName2} type=\"monotone\" dataKey=\"points11\" stroke={this.player2Color} dot={false} strokeWidth={2} />}\r\n                            {this.props.playerPointsNormal2.length > 0 && \r\n                                <Line name={`${this.props.playerName2} (New Rules)`} type=\"monotone\" dataKey=\"points12\" stroke={this.player2Color} dot={false} strokeWidth={2} />}\r\n                            {this.props.playerPointsNormal2.length > 0 && \r\n                                <Line name={this.props.playerName2} type=\"monotone\" dataKey=\"points13\" stroke={this.player2Color} dot={false} strokeWidth={2} />}\r\n                            <ReferenceLine x={tournamentsService.convertDateToString(exceptionInterval[0])} stroke=\"#f50057\"/>\r\n                            <ReferenceLine x={tournamentsService.convertDateToString(exceptionInterval[1])} stroke=\"#f50057\"/>\r\n                        </LineChart>\r\n                        :\r\n                        <LineChart>\r\n                            <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                            <YAxis width={40}/>\r\n                            <XAxis/>\r\n                        </LineChart>\r\n                        }\r\n                    </ResponsiveContainer>\r\n                </div>}\r\n                </MediaQuery>\r\n            </>\r\n        )\r\n    }\r\n    \r\n    private readonly handleYearChange = (event: any, newValue: number | number[]) => {\r\n        this.setState({yearRange: newValue as number[]});\r\n    };\r\n\r\n\r\n}","import { CircularProgress, TextField, Typography } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid/Grid';\r\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\r\nimport $ from \"jquery\";\r\nimport React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport MediaQuery from 'react-responsive';\r\nimport { RouteComponentProps, withRouter } from 'react-router';\r\nimport { percentageExceptionList, percentageNormalList } from '../data/scorecalc-data';\r\nimport { Player } from '../services/player-service';\r\nimport tournamentsService, { PointsByDate } from '../services/tournament-service';\r\nimport { RootState } from '../store/combineReducers';\r\nimport PlayerCard from './player-card';\r\nimport { PlayersChart } from './players-chart';\r\n\r\ninterface Params{\r\n    id: string\r\n}\r\n\r\ntype Props = ReturnType<typeof mapStateToProps> & RouteComponentProps<Params>\r\n\r\ninterface State{\r\n    playerPointsNormal1: PointsByDate[]\r\n    playerPointsException1: PointsByDate[]\r\n    playerPointsNormal2: PointsByDate[]\r\n    playerPointsException2: PointsByDate[]\r\n    playerName1?: string\r\n    playerName2?: string\r\n    \r\n    playerUpdating: boolean\r\n    selectedPlayer: Player | null\r\n}\r\n\r\ninterface PlayerPoints{\r\n    normal: PointsByDate[],\r\n    exception: PointsByDate[]\r\n}\r\n\r\nexport class ProgressComponent extends Component<Props, State>{\r\n\r\n    public readonly state:State = {\r\n        playerPointsNormal1: [],\r\n        playerPointsException1: [],\r\n        playerPointsNormal2: [],\r\n        playerPointsException2: [],\r\n        \r\n        playerUpdating: false,\r\n        selectedPlayer: null\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.match.params.id !== undefined && this.props.players.length){\r\n            this.handlePlayerChange(undefined, this.getPlayerValue())\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Props){\r\n        if(prevProps.players.length !== this.props.players.length && this.props.match.params.id !== undefined ||\r\n           prevProps.match.params.id !== this.props.match.params.id && this.props.players.length){\r\n            this.handlePlayerChange(undefined, this.getPlayerValue())\r\n        }\r\n    }\r\n\r\n\r\n    getPlayerValue(): Player | null{\r\n        let player = this.props.players.find(player => player.id === this.props.match.params.id)\r\n        if(player === undefined){\r\n            return null\r\n        }\r\n\r\n        return player\r\n    }\r\n    \r\n\r\n    render(): React.ReactNode{\r\n        return(\r\n            (this.props.match.params.id !== undefined && this.props.players.length === 0) \r\n            ? \r\n            <div style={{\r\n                height:'calc(100vh - 100px)',\r\n                display:'flex', \r\n                justifyContent:\"center\", \r\n                alignItems:'center'}}\r\n            >\r\n                <CircularProgress style = {{alignSelf:'center'}}/>\r\n            </div>\r\n            :\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12} sm={5} md={4}>\r\n                        <Grid container spacing={3}>\r\n\r\n                        <Grid item xs={12}>\r\n                            <Autocomplete\r\n                                blurOnSelect\r\n                                options = {this.props.players}\r\n                                getOptionLabel = {(option) => option.name}\r\n                                value = {this.state.selectedPlayer}\r\n                                renderInput = {(params) => \r\n                                    <TextField {...params} label=\"Select a player\" variant = \"outlined\" />\r\n                                }\r\n                                filterOptions = {createFilterOptions({\r\n                                    limit: 100\r\n                                })}\r\n                                onChange = {this.handleValueChange}\r\n                                loading = {this.props.players.length === 0}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <Autocomplete\r\n                                blurOnSelect\r\n                                options = {this.props.players}\r\n                                getOptionLabel = {(option) => option.name}\r\n                                renderInput = {(params) => \r\n                                    <TextField {...params} label=\"Select a player to compare\" />\r\n                                }\r\n                                filterOptions = {createFilterOptions({\r\n                                    limit: 100\r\n                                })}\r\n                                onChange = {this.handlePlayerCompareChange}\r\n                                loading = {this.props.players.length === 0}\r\n                            />\r\n                        </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid item xs sm md>\r\n                        <PlayerCard player={this.state.selectedPlayer}/>\r\n                    </Grid>\r\n                    <Grid item xs = {12}>\r\n                        <MediaQuery maxWidth={599}>\r\n                        {(isMobile) =>\r\n                        <div style={{position: \"relative\"}}>\r\n                            {\r\n                                <div style={(this.state.playerUpdating || this.state.playerName1 === undefined) ? {filter:\"blur(5px)\", pointerEvents:'none'} : undefined }>\r\n                                    \r\n                                    <PlayersChart \r\n                                        playerPointsNormal1={this.state.playerPointsNormal1} \r\n                                        playerPointsException1={this.state.playerPointsException1}\r\n                                        playerPointsNormal2={this.state.playerPointsNormal2} \r\n                                        playerPointsException2={this.state.playerPointsException2}\r\n                                        playerName1={this.state.playerName1}\r\n                                        playerName2={this.state.playerName2}\r\n                                    />\r\n                                </div>\r\n                            }\r\n                            {\r\n                                (this.state.playerUpdating || this.state.playerName1 === undefined) && \r\n                                <div style={{\r\n                                    position:\"absolute\", \r\n                                    width:\"100%\", \r\n                                    height:isMobile?\"350px\":\"500px\", \r\n                                    top:0, \r\n                                    left:0, \r\n                                    display:'flex', \r\n                                    justifyContent:\"center\", \r\n                                    alignItems:'center'\r\n                                }}>\r\n                                    {this.state.playerName1 !== undefined ?\r\n\r\n                                        <CircularProgress  />\r\n                                        :\r\n                                        <Typography>\r\n                                            Select a player to load chart\r\n                                        </Typography>\r\n                                    }\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                        }\r\n                        </MediaQuery>\r\n                    </Grid>\r\n                </Grid>\r\n        )\r\n\r\n    }\r\n\r\n    \r\n    private readonly handleValueChange = (event: any, newValue: Player|null) => {\r\n        if(newValue === null){\r\n            this.props.history.push(`/players`)\r\n        }\r\n        else{\r\n            this.props.history.push(`/players/${newValue.id}`)\r\n        }\r\n    }\r\n    private readonly handlePlayerChange = (event: any, newValue: Player|null) =>{\r\n        this.setState({playerName1: newValue?.name, selectedPlayer: newValue})\r\n        this.getPlayerPoints(newValue).then((value) => {\r\n            this.setState({\r\n                playerPointsNormal1: value.normal,\r\n                playerPointsException1: value.exception\r\n            })\r\n            \r\n        })\r\n    }\r\n    private readonly handlePlayerCompareChange = (event: any, newValue: Player|null) =>{\r\n        this.getPlayerPoints(newValue).then((value) => {\r\n            this.setState({\r\n                playerPointsNormal2: value.normal,\r\n                playerPointsException2: value.exception,\r\n                playerName2: newValue?.name\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    private readonly getPlayerPoints = (newValue: Player|null): Promise<PlayerPoints> =>{\r\n        var promise = new Promise<PlayerPoints>((resolve, reject) => {\r\n            if(newValue === null){\r\n                resolve( {\r\n                    normal: [],\r\n                    exception: []\r\n                })\r\n            }\r\n            else{\r\n                this.setState({playerUpdating: true})\r\n                $.getJSON('https://serene-crag-74633.herokuapp.com/tournaments/'+newValue.id)\r\n                .then(res => {\r\n                    resolve({\r\n                        normal: tournamentsService.getPointsByDate(res, percentageNormalList),\r\n                        exception: tournamentsService.getPointsByDate(res, percentageExceptionList)\r\n                    })\r\n                })\r\n                .catch(() => {\r\n                    console.log(\"error\")\r\n                    resolve( {\r\n                        normal: [],\r\n                        exception: []\r\n                    })\r\n                })\r\n                .always(() => {\r\n                    this.setState({playerUpdating: false})\r\n                })\r\n            }\r\n\r\n        })\r\n        return promise\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) =>({\r\n    players: state.players.players\r\n});\r\n\r\nconst Progress = connect(mapStateToProps)(ProgressComponent)\r\nexport {Progress};\r\n","import { AppBar, Box, Button, Container, Divider, Drawer, IconButton, List, ListItem, ListItemText, Typography } from \"@material-ui/core\";\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CSS from 'csstype';\r\nimport React, { useState } from \"react\";\r\nimport MediaQuery from \"react-responsive\";\r\nimport { Link, NavLink, RouteComponentProps, useHistory, withRouter } from \"react-router-dom\";\r\n\r\nconst navBarItemStyle:CSS.Properties = {\r\n    margin:'10px',\r\n    alignSelf:'center'\r\n}\r\n\r\nconst buttonSelectedStyle:CSS.Properties = {\r\n    backgroundColor: '#dddddd'\r\n}\r\n\r\n\r\ninterface navItem{\r\n    name: string\r\n    url: string\r\n}\r\n\r\nconst navList: navItem[] = [\r\n    {\r\n        name: 'Home',\r\n        url: '/'\r\n    },\r\n    {\r\n        name: 'Players',\r\n        url: '/players'\r\n    },\r\n    {\r\n        name: 'Ranker',\r\n        url: '/ranker'\r\n    },\r\n\r\n]\r\n\r\n\r\nexport const NavBar: React.FC = ({children}) => {\r\n\r\n    let history = useHistory()\r\n    const [opened, setOpened] = useState(false)\r\n\r\n    function toggleDrawer(){\r\n        setOpened(!opened)\r\n    }\r\n\r\n    return(\r\n        <MediaQuery maxWidth={599}>\r\n            {(isMobile) =>\r\n            <>\r\n            {isMobile && <>\r\n                <Drawer anchor='left' open={opened} onClose={() => toggleDrawer()} style={{zIndex:999999}}>\r\n                    <div style={{position:'relative', margin:6}}>\r\n                        <img width={100} height={100} src='/logo256.png' alt='logo'/>\r\n                        <Typography variant=\"h6\"  style={{position:'absolute', left:70, bottom:0}}>\r\n                            TH RANKER\r\n                        </Typography>\r\n                    </div>\r\n                    <Divider/>\r\n                    <List style={{width:'250px'}}>\r\n                        {\r\n                            navList.map(item => \r\n                                <ListItem component={(props) => <NavLink to={item.url} exact={item.url==='/'} activeStyle={buttonSelectedStyle} {...props}/>} onClick={() => toggleDrawer()} button>\r\n                                    <ListItemText primary={item.name}/>\r\n                                </ListItem>\r\n                            )\r\n                        }\r\n                    </List>\r\n                </Drawer>\r\n                </>\r\n            }\r\n            <AppBar position='sticky' color='default' style={{justifyContent:'space-between', flexDirection:'row', height:'55px', paddingLeft:!isMobile ? 24 : undefined, paddingRight:24}} >\r\n                <div style={{display:'flex'}}>\r\n                    {isMobile &&\r\n                        <IconButton \r\n                            edge=\"start\" \r\n                            //size='small' \r\n                            color=\"inherit\" \r\n                            onClick={() => toggleDrawer()} \r\n                            style={{...navBarItemStyle, marginLeft:'10px'}}>\r\n                            <MenuIcon />\r\n                        </IconButton>\r\n                    }\r\n\r\n                    \r\n                    <div onClick={() => {history.push('/')}} style={{display:'flex', cursor:'pointer'}}>\r\n                        {!isMobile && <img width={45} height={45} style={{alignSelf:'center'}} src='/logo256.png' alt='logo'/>}\r\n                        <Typography variant=\"h6\" style={{alignSelf:'center', marginLeft:5}}>\r\n                            TH RANKER\r\n                        </Typography>\r\n                    </div>\r\n                </div>\r\n                {!isMobile && <div style={navBarItemStyle}>\r\n                    {\r\n                        navList.map(item => \r\n                            <Button \r\n                                component={(props) => <NavLink to={item.url} exact={item.url==='/'} activeStyle={buttonSelectedStyle} {...props} />} \r\n                                color=\"inherit\" \r\n                                style={{marginLeft:'10px'}}\r\n                            >\r\n                                {item.name}\r\n                            </Button>\r\n                        )\r\n                    }\r\n                </div>}\r\n            </AppBar>\r\n            <Container>\r\n                <Box pt={3}>{children}</Box>\r\n            </Container>\r\n            </>\r\n        }\r\n        </MediaQuery>\r\n    )\r\n} \r\n","import { Button, Typography } from \"@material-ui/core\";\r\nimport { Whatshot } from \"@material-ui/icons\";\r\nimport React, { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useMediaQuery } from \"react-responsive\";\r\nimport { RootState } from \"../store/combineReducers\";\r\nimport { PlayerHomeCard } from \"./player-card\";\r\n\r\n\r\nfunction getSkeletons(count: number){\r\n    let skeletons = []\r\n    for(let i=0; i<count; i++){\r\n        skeletons.push(<PlayerHomeCard/>)\r\n    }\r\n    return skeletons\r\n}\r\n\r\n\r\nexport function Home(){\r\n    \r\n    const isMobile = useMediaQuery({maxWidth:'599px'})\r\n    const [playerCount, setPlayerCount] = useState(6)\r\n\r\n    const players = useSelector(\r\n        (state: RootState) => \r\n        state.players.players.slice(0, playerCount)\r\n    )\r\n    return(\r\n        <>\r\n            <div style={{display:'flex', justifyContent:'center'}}>\r\n                <div style={{alignSelf:'stretch'}}><Whatshot fontSize='large' style={{ color:'#2c387e'}}/></div>\r\n\r\n                    <Typography \r\n                        variant='h4' \r\n                        align='center'\r\n                        style={{\r\n                            color:'white', \r\n                            marginBottom:'20px', \r\n                            WebkitTextStroke:'1px', \r\n                            WebkitTextStrokeColor:'#3f51b5',\r\n                        }}\r\n                        >\r\n                        <b>TOP PLAYERS</b>\r\n                    </Typography>\r\n            </div>\r\n            <div \r\n                style={!isMobile ? {\r\n                    display:'grid', \r\n                    gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',\r\n                    gridGap:'20px'\r\n                }:\r\n                {\r\n                    display:'grid', \r\n                    gridGap:'20px'\r\n                }\r\n            }>\r\n                {\r\n                    players.length > 0 ? players.map(value =>\r\n                        <PlayerHomeCard player={value}/>\r\n                    ) : getSkeletons(playerCount)   \r\n                }\r\n            </div>\r\n            <div style={{textAlign:'center', margin:'20px'}}>\r\n                <Button \r\n                    variant='outlined' \r\n                    color='primary' \r\n                    onClick={() => {\r\n                        console.log(isMobile)\r\n                        setPlayerCount(playerCount+6)\r\n                    }}\r\n                    style={{width:'200px'}}\r\n                >\r\n                    Load More\r\n                </Button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, HashRouter } from 'react-router-dom';\r\nimport { Route } from 'react-router';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { Ranker } from './components/ranker';\r\nimport playersService, { Player } from './services/player-service';\r\nimport { AnyAction, Dispatch } from 'redux';\r\nimport { updatePlayers, updatePlayersState } from './store/players/player-actions';\r\nimport { connect } from 'react-redux';\r\nimport $ from \"jquery\";\r\nimport { Progress } from './components/progress';\r\nimport { NavBar } from './components/navbar';\r\nimport tournamentsService from './services/tournament-service';\r\nimport { PlayersState } from './store/players/player-types';\r\nimport { Home } from './components/home';\r\n\r\ntype Props = ReturnType<typeof mapDispatchToProps> \r\n\r\nclass AppComponent extends Component<Props, {}> {\r\n  \r\n  componentDidMount(): void{\r\n    $.ajax('https://serene-crag-74633.herokuapp.com/all')\r\n      .then(res => {\r\n          const players:Player[] =  playersService.parseContent(res)\r\n          const prefScores:number[] = playersService.getPlayerScores(players)\r\n          this.props.updatePlayersState({\r\n            prefScores,\r\n            players: playersService.fixPlayers(players, prefScores)\r\n          })\r\n      })\r\n      .catch(() => {\r\n          console.log(\"error\")\r\n      })\r\n  }\r\n  \r\n  static displayName = AppComponent.name;\r\n  \r\n  render () {\r\n    return (\r\n      <HashRouter>\r\n        <NavBar>\r\n          <Route exact path='/' component={Home} />\r\n          <Route exact path='/ranker' component={Ranker} />\r\n          <Route exact path= '/players/:id?' component={Progress} />\r\n        </NavBar>\r\n      </HashRouter>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<AnyAction>) =>({\r\n  updatePlayersState: (playersState: PlayersState) => dispatch(updatePlayersState(playersState))\r\n});\r\n\r\nconst App = connect(null, mapDispatchToProps)(AppComponent)\r\nexport default App","import { Player } from \"../../services/player-service\";\r\nimport { PlayersActionTypes, PlayersState, UPDATE_PLAYERS, UPDATE_PLAYERS_STATE } from \"./player-types\";\r\n\r\nexport function updatePlayers(newPlayers: Player[]): PlayersActionTypes{\r\n    return {\r\n        type: UPDATE_PLAYERS,\r\n        payload: newPlayers\r\n    }\r\n}\r\nexport function updatePlayersState(playersState: PlayersState): PlayersActionTypes{\r\n    return {\r\n        type: UPDATE_PLAYERS_STATE,\r\n        payload: playersState\r\n    }\r\n}","import { Player } from \"../../services/player-service\";\r\n\r\nexport const UPDATE_PLAYERS = 'UPDATE_PLAYERS'\r\nexport const UPDATE_PLAYERS_STATE = 'UPDATE_PLAYERS_STATE'\r\n\r\nexport interface PlayersState {\r\n    players: Player[],\r\n    prefScores: number[]\r\n}\r\n\r\ninterface UpdatePlayersStateAction {\r\n    type: typeof UPDATE_PLAYERS_STATE\r\n    payload: PlayersState\r\n}\r\n\r\ninterface UpdatePlayersAction {\r\n    type: typeof UPDATE_PLAYERS\r\n    payload: Player[]\r\n}\r\n\r\nexport type PlayersActionTypes = \r\n    | UpdatePlayersStateAction\r\n    | UpdatePlayersAction","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { PlayersActionTypes, PlayersState, UPDATE_PLAYERS, UPDATE_PLAYERS_STATE } from \"./player-types\";\r\n\r\nconst initialState: PlayersState = {\r\n    players: [],\r\n    prefScores: []\r\n}\r\n\r\nexport function playersReducer(\r\n    state = initialState,\r\n    action: PlayersActionTypes\r\n\r\n): PlayersState {\r\n    switch(action.type){\r\n        case UPDATE_PLAYERS:\r\n            return{\r\n                ...state,\r\n                players: action.payload\r\n            }\r\n        case UPDATE_PLAYERS_STATE:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import { levelList } from \"../../data/scorecalc-data\";\r\nimport { RankerActionTypes, RankerState, UPDATE_RANKER_STATE } from \"./ranker-types\";\r\n\r\nconst initialState: RankerState = {\r\n    playersCompare: [],\r\n    selectedLevel: levelList[0].name,\r\n    bottomNavVal: 1\r\n}\r\n\r\nexport function rankerReducer(\r\n    state = initialState,\r\n    action: RankerActionTypes\r\n\r\n): RankerState {\r\n    switch(action.type){\r\n        case UPDATE_RANKER_STATE:\r\n            return action.payload\r\n        default:\r\n            return state\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { playersReducer } from \"./players/player-reducers\";\r\nimport { rankerReducer } from \"./ranker/ranker-reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n    players: playersReducer,\r\n    ranker: rankerReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","import store from './createStore';\r\n\r\nexport default store;","import { createStore } from 'redux';\r\nimport reducer from './combineReducers';\r\n\r\nexport default createStore(reducer);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}